{
	"drawioXML": "<mxfile>\n  <diagram id=\"xq94bDtK-rOpSU9oDLua\" name=\"Page-1\">\n    <mxGraphModel dx=\"1406\" dy=\"748\" grid=\"0\" gridSize=\"10\" guides=\"1\" tooltips=\"1\" connect=\"0\" arrows=\"1\" fold=\"1\" page=\"0\" pageScale=\"1\" pageWidth=\"850\" pageHeight=\"1100\" math=\"0\" shadow=\"0\">\n      <root>\n        <mxCell id=\"0\" />\n        <mxCell id=\"1\" parent=\"0\" />\n      </root>\n    </mxGraphModel>\n  </diagram>\n</mxfile>\n",
	"fileName": "",
	"fileURL": "github",
	"repoData": {
		"runtime": {
			"path": "runtime",
			"fileName": "runtime",
			"cellName": "runtime",
			"cellId": "b52bf518-7886-464d-9f0c-143c99a095bd",
			"visible": true,
			"children": [
				"runtime/lua"
			]
		},
		"runtime/lua": {
			"path": "runtime/lua",
			"fileName": "lua",
			"cellName": "lua",
			"cellId": "c922487a-a2f6-43f6-9277-9979bcda65df",
			"visible": true,
			"parentCellId": "b52bf518-7886-464d-9f0c-143c99a095bd",
			"children": [
				"runtime/lua/vim"
			]
		},
		"runtime/lua/vim": {
			"path": "runtime/lua/vim",
			"fileName": "vim",
			"cellName": "vim",
			"cellId": "c851f0f3-ad8b-4337-b109-5813415e3dd0",
			"visible": true,
			"parentCellId": "c922487a-a2f6-43f6-9277-9979bcda65df",
			"children": [
				"runtime/lua/vim/lsp.lua",
				"runtime/lua/vim/lsp",
				"runtime/lua/vim/treesitter.lua",
				"runtime/lua/vim/treesitter"
			]
		},
		"runtime/lua/vim/lsp.lua": {
			"path": "runtime/lua/vim/lsp.lua",
			"fileName": "lsp.lua",
			"cellName": "lsp.lua",
			"cellId": "1de65660-86b9-4e74-9809-48c7ed511209",
			"visible": true,
			"parentCellId": "c851f0f3-ad8b-4337-b109-5813415e3dd0",
			"children": [
				"runtime/lua/vim/lsp.lua-simstep-7285d70b-8e21-4aa6-90b8-4626e8d15fce",
				"runtime/lua/vim/lsp.lua-simstep-1aa5f8e4-cfa3-4a67-af6f-017ce5243174"
			]
		},
		"runtime/lua/vim/lsp": {
			"path": "runtime/lua/vim/lsp",
			"fileName": "lsp",
			"cellName": "lsp",
			"cellId": "3e57265c-f610-4d80-a76c-a4ea5aa05a60",
			"visible": true,
			"parentCellId": "c851f0f3-ad8b-4337-b109-5813415e3dd0",
			"children": [
				"runtime/lua/vim/lsp/client.lua",
				"runtime/lua/vim/lsp/buf.lua",
				"runtime/lua/vim/lsp/handlers.lua"
			]
		},
		"runtime/lua/vim/lsp/buf.lua": {
			"path": "runtime/lua/vim/lsp/buf.lua",
			"fileName": "buf.lua",
			"cellName": "buf.lua",
			"cellId": "f9f72dfc-2e7a-4acc-bad7-056824c3b13c",
			"visible": true,
			"parentCellId": "3e57265c-f610-4d80-a76c-a4ea5aa05a60"
		},
		"runtime/lua/vim/lsp/client.lua": {
			"path": "runtime/lua/vim/lsp/client.lua",
			"fileName": "client.lua",
			"cellName": "client.lua",
			"cellId": "71e6ac0f-df3a-4d68-8a74-686275b1132d",
			"visible": true,
			"parentCellId": "3e57265c-f610-4d80-a76c-a4ea5aa05a60",
			"children": [
				"runtime/lua/vim/lsp/client.lua-simstep-260ab1a1-c622-4a14-bd33-cf9a1cf5f83c"
			]
		},
		"runtime/lua/vim/lsp/handlers.lua": {
			"path": "runtime/lua/vim/lsp/handlers.lua",
			"fileName": "handlers.lua",
			"cellName": "handlers.lua",
			"cellId": "9cc89460-e83b-4fa1-a5bc-8530c4ca6ef8",
			"visible": true,
			"parentCellId": "3e57265c-f610-4d80-a76c-a4ea5aa05a60",
			"children": [
				"runtime/lua/vim/lsp/handlers.lua-simstep-bd6ae996-e127-46cb-b8a3-ef60eb19bd3c"
			]
		},
		"runtime/lua/vim/treesitter.lua": {
			"path": "runtime/lua/vim/treesitter.lua",
			"fileName": "treesitter.lua",
			"cellName": "treesitter.lua",
			"cellId": "542a18b2-cf80-43f4-925a-89bb18c92962",
			"visible": true,
			"parentCellId": "c851f0f3-ad8b-4337-b109-5813415e3dd0",
			"children": [
				"runtime/lua/vim/treesitter.lua-simstep-2ce887f3-1c98-4e7c-86ca-933fcc495bde",
				"runtime/lua/vim/treesitter.lua-simstep-b106e0a3-768d-4282-9ec6-deb881ed3a1f",
				"runtime/lua/vim/treesitter.lua-simstep-a3288e50-6bde-43b0-bc27-3c65c895f56b"
			]
		},
		"runtime/lua/vim/treesitter": {
			"path": "runtime/lua/vim/treesitter",
			"fileName": "treesitter",
			"cellName": "treesitter",
			"cellId": "803fa254-ad17-4d23-add4-b6ebfc965164",
			"visible": true,
			"parentCellId": "c851f0f3-ad8b-4337-b109-5813415e3dd0",
			"children": [
				"runtime/lua/vim/treesitter/highlighter.lua"
			]
		},
		"runtime/lua/vim/treesitter/highlighter.lua": {
			"path": "runtime/lua/vim/treesitter/highlighter.lua",
			"fileName": "highlighter.lua",
			"cellName": "highlighter.lua",
			"cellId": "cc9f7eb2-fe91-4acf-984b-22486f94d4f1",
			"visible": true,
			"parentCellId": "803fa254-ad17-4d23-add4-b6ebfc965164",
			"children": [
				"runtime/lua/vim/treesitter/highlighter.lua-simstep-337810a2-50ef-4efc-b86b-493e5700c80f",
				"runtime/lua/vim/treesitter/highlighter.lua-simstep-7d7d67ad-119f-499e-9186-2a977659976b"
			]
		},
		"src": {
			"path": "src",
			"fileName": "src",
			"cellName": "src",
			"cellId": "d6a60112-6bc4-4474-8997-f4458fcc3328",
			"visible": true,
			"children": [
				"src/nvim",
				"src/gen"
			]
		},
		"src/gen": {
			"path": "src/gen",
			"fileName": "gen",
			"cellName": "gen",
			"cellId": "24a46775-e82d-4010-a07a-ca429e687577",
			"visible": true,
			"parentCellId": "d6a60112-6bc4-4474-8997-f4458fcc3328",
			"children": [
				"src/gen/gen_api_dispatch.lua"
			]
		},
		"src/gen/gen_api_dispatch.lua": {
			"path": "src/gen/gen_api_dispatch.lua",
			"fileName": "gen_api_dispatch.lua",
			"cellName": "gen_api_dispatch.lua",
			"cellId": "4b4eb64a-101c-4009-941e-c6f336d94ff0",
			"visible": true,
			"parentCellId": "24a46775-e82d-4010-a07a-ca429e687577",
			"children": [
				"src/gen/gen_api_dispatch.lua-simstep-8ae7f84a-1a1b-4322-b57f-b46112a80606"
			]
		},
		"src/nvim": {
			"path": "src/nvim",
			"fileName": "nvim",
			"cellName": "nvim",
			"cellId": "3e82ef51-0ca1-4920-9642-822b9ab36245",
			"visible": true,
			"parentCellId": "d6a60112-6bc4-4474-8997-f4458fcc3328",
			"children": [
				"src/nvim/main.c",
				"src/nvim/normal.c",
				"src/nvim/edit.c",
				"src/nvim/api",
				"src/nvim/msgpack_rpc",
				"src/nvim/lua",
				"src/nvim/buffer_updates.c",
				"src/nvim/drawscreen.c",
				"src/nvim/ui_client.c",
				"src/nvim/tui",
				"src/nvim/ex_docmd.c",
				"src/nvim/terminal.c",
				"src/nvim/vterm",
				"src/nvim/eval.lua",
				"src/nvim/eval",
				"src/nvim/channel.c",
				"src/nvim/ex_cmds.lua",
				"src/nvim/runtime.c",
				"src/nvim/eval.c",
				"src/nvim/window.c",
				"src/nvim/shada.c"
			]
		},
		"src/nvim/api": {
			"path": "src/nvim/api",
			"fileName": "api",
			"cellName": "api",
			"cellId": "4030d70f-0fed-4a0f-8778-d844f56b88f7",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245",
			"children": [
				"src/nvim/api/vim.c",
				"src/nvim/api/buffer.c",
				"src/nvim/api/events.c",
				"src/nvim/api/ui.c",
				"src/nvim/api/vimscript.c"
			]
		},
		"src/nvim/api/buffer.c": {
			"path": "src/nvim/api/buffer.c",
			"fileName": "buffer.c",
			"cellName": "buffer.c",
			"cellId": "770e342b-bb36-468b-b859-cbf415542d91",
			"visible": true,
			"parentCellId": "4030d70f-0fed-4a0f-8778-d844f56b88f7",
			"children": [
				"src/nvim/api/buffer.c-simstep-0d69d455-ba83-4959-9cb2-45699a974fd0"
			]
		},
		"src/nvim/api/events.c": {
			"path": "src/nvim/api/events.c",
			"fileName": "events.c",
			"cellName": "events.c",
			"cellId": "ffc21c72-aa11-4a85-829b-250f0719530b",
			"visible": true,
			"parentCellId": "4030d70f-0fed-4a0f-8778-d844f56b88f7",
			"children": [
				"src/nvim/api/events.c-simstep-b29b725a-05a6-4330-b933-4b5840467ce4"
			]
		},
		"src/nvim/api/ui.c": {
			"path": "src/nvim/api/ui.c",
			"fileName": "ui.c",
			"cellName": "ui.c",
			"cellId": "75816457-6537-45f4-9f6f-b99311adeb07",
			"visible": true,
			"parentCellId": "4030d70f-0fed-4a0f-8778-d844f56b88f7",
			"children": [
				"src/nvim/api/ui.c-simstep-af3845c8-ab94-4da5-b1e7-04372753c599"
			]
		},
		"src/nvim/api/vim.c": {
			"path": "src/nvim/api/vim.c",
			"fileName": "vim.c",
			"cellName": "vim.c",
			"cellId": "6dc96ed4-5374-4d39-97e8-f84e6912f0c9",
			"visible": true,
			"parentCellId": "4030d70f-0fed-4a0f-8778-d844f56b88f7",
			"children": [
				"src/nvim/api/vim.c-simstep-e90fe967-7096-4e2a-a379-5da61500f5ad"
			]
		},
		"src/nvim/api/vimscript.c": {
			"path": "src/nvim/api/vimscript.c",
			"fileName": "vimscript.c",
			"cellName": "vimscript.c",
			"cellId": "d796ed6c-23d7-4b7e-bda2-1b111eae56f0",
			"visible": true,
			"parentCellId": "4030d70f-0fed-4a0f-8778-d844f56b88f7",
			"children": [
				"src/nvim/api/vimscript.c-simstep-1f86bd67-1f46-4692-a8a6-07d602732c45"
			]
		},
		"src/nvim/buffer_updates.c": {
			"path": "src/nvim/buffer_updates.c",
			"fileName": "buffer_updates.c",
			"cellName": "buffer_updates.c",
			"cellId": "1bc9a917-6299-4cd3-89c5-f72aba8a049b",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245",
			"children": [
				"src/nvim/buffer_updates.c-simstep-b658af9c-ebd9-494e-b291-212321993faa"
			]
		},
		"src/nvim/channel.c": {
			"path": "src/nvim/channel.c",
			"fileName": "channel.c",
			"cellName": "channel.c",
			"cellId": "20fcfc79-9ca0-4d2e-b076-0fe710245289",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245",
			"children": [
				"src/nvim/channel.c-simstep-854ff8f5-8f8a-4698-9668-18eb81c62445",
				"src/nvim/channel.c-simstep-50982715-7e99-41eb-ad7a-444adf002b76",
				"src/nvim/channel.c-simstep-8cb74844-a3b5-47ab-bf0b-70ac8cae0f2e",
				"src/nvim/channel.c-simstep-8f80b898-11ed-4b06-ac47-1c81e36fd8e7"
			]
		},
		"src/nvim/drawscreen.c": {
			"path": "src/nvim/drawscreen.c",
			"fileName": "drawscreen.c",
			"cellName": "drawscreen.c",
			"cellId": "d70166f9-1da5-433d-884b-384ff4d58776",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245",
			"children": [
				"src/nvim/drawscreen.c-simstep-34f99a2f-a13a-4e89-a5d8-c7e64326c236"
			]
		},
		"src/nvim/edit.c": {
			"path": "src/nvim/edit.c",
			"fileName": "edit.c",
			"cellName": "edit.c",
			"cellId": "009cda38-3911-4628-b7d7-f231e5b9d9c1",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245",
			"children": [
				"src/nvim/edit.c-simstep-9ba3df3f-324c-41ca-9dbd-7937612366b7",
				"src/nvim/edit.c-simstep-ba30f07d-998c-4d61-95f2-cf0cfa3da97c"
			]
		},
		"src/nvim/eval.c": {
			"path": "src/nvim/eval.c",
			"fileName": "eval.c",
			"cellName": "eval.c",
			"cellId": "12f119a2-b00d-4406-b448-72ee123e040a",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245",
			"children": [
				"src/nvim/eval.c-simstep-0712ca23-aeff-4f04-b68b-42a5bc59f0d7"
			]
		},
		"src/nvim/eval.lua": {
			"path": "src/nvim/eval.lua",
			"fileName": "eval.lua",
			"cellName": "eval.lua",
			"cellId": "b4185b59-5067-4365-922a-5ad077381cd6",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245"
		},
		"src/nvim/eval": {
			"path": "src/nvim/eval",
			"fileName": "eval",
			"cellName": "eval",
			"cellId": "042d484f-3bcd-4f24-878d-22a640843dbf",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245",
			"children": [
				"src/nvim/eval/funcs.c"
			]
		},
		"src/nvim/eval/funcs.c": {
			"path": "src/nvim/eval/funcs.c",
			"fileName": "funcs.c",
			"cellName": "funcs.c",
			"cellId": "d77ec535-eb4c-4752-a7f5-6e51b52f0e71",
			"visible": true,
			"parentCellId": "042d484f-3bcd-4f24-878d-22a640843dbf",
			"children": [
				"src/nvim/eval/funcs.c-simstep-aedec869-e86a-432a-bfd6-ace49b1a815e",
				"src/nvim/eval/funcs.c-simstep-87627dcb-783c-4f41-bb38-8de49d48016d"
			]
		},
		"src/nvim/ex_cmds.lua": {
			"path": "src/nvim/ex_cmds.lua",
			"fileName": "ex_cmds.lua",
			"cellName": "ex_cmds.lua",
			"cellId": "5ed19d61-b36f-4e7e-92d4-44d9cff8557d",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245"
		},
		"src/nvim/ex_docmd.c": {
			"path": "src/nvim/ex_docmd.c",
			"fileName": "ex_docmd.c",
			"cellName": "ex_docmd.c",
			"cellId": "167aa0f6-b357-4338-b535-12f91d334c0e",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245",
			"children": [
				"src/nvim/ex_docmd.c-simstep-36e59f38-15cc-431c-8640-a92071154959",
				"src/nvim/ex_docmd.c-simstep-2457a8c1-7c83-4d28-9732-9a8321da9eca",
				"src/nvim/ex_docmd.c-simstep-09103307-3564-4428-88ea-68f85c5a11e7"
			]
		},
		"src/nvim/lua": {
			"path": "src/nvim/lua",
			"fileName": "lua",
			"cellName": "lua",
			"cellId": "e70de9ac-eaa8-40f0-8d38-6b65bf87ec20",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245",
			"children": [
				"src/nvim/lua/executor.c"
			]
		},
		"src/nvim/lua/executor.c": {
			"path": "src/nvim/lua/executor.c",
			"fileName": "executor.c",
			"cellName": "executor.c",
			"cellId": "2504cc8a-889d-4471-9d56-2b97a6275447",
			"visible": true,
			"parentCellId": "e70de9ac-eaa8-40f0-8d38-6b65bf87ec20",
			"children": [
				"src/nvim/lua/executor.c-simstep-b4ea1d34-c777-4eef-99a2-055ab46ebae3"
			]
		},
		"src/nvim/main.c": {
			"path": "src/nvim/main.c",
			"fileName": "main.c",
			"cellName": "main.c",
			"cellId": "daae3417-8258-49a6-a129-53b01c2aaa30",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245",
			"children": [
				"src/nvim/main.c-simstep-6cd87cb0-6e59-4149-819b-1f71b053ea56",
				"src/nvim/main.c-simstep-bd547437-aeee-4b1b-a24a-91af1ee23455",
				"src/nvim/main.c-simstep-db84dff7-c246-409f-9d89-49b95e2ea413",
				"src/nvim/main.c-simstep-24440508-8c7b-4e59-a317-cd461ea1ef2e",
				"src/nvim/main.c-simstep-c5571808-e2ec-47fc-a5de-9df864d59c28",
				"src/nvim/main.c-simstep-4e39780d-ae85-48aa-b6a1-18c6ee1f1c42"
			]
		},
		"src/nvim/msgpack_rpc": {
			"path": "src/nvim/msgpack_rpc",
			"fileName": "msgpack_rpc",
			"cellName": "msgpack_rpc",
			"cellId": "4926e922-21e0-43d4-99c5-888a53fd1496",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245",
			"children": [
				"src/nvim/msgpack_rpc/channel.c",
				"src/nvim/msgpack_rpc/unpacker.c"
			]
		},
		"src/nvim/msgpack_rpc/channel.c": {
			"path": "src/nvim/msgpack_rpc/channel.c",
			"fileName": "channel.c",
			"cellName": "channel.c",
			"cellId": "043e230c-2dcd-42ad-be8f-d32dd9d140f0",
			"visible": true,
			"parentCellId": "4926e922-21e0-43d4-99c5-888a53fd1496",
			"children": [
				"src/nvim/msgpack_rpc/channel.c-simstep-a1524e46-90af-42d0-932d-0409e297ac6a",
				"src/nvim/msgpack_rpc/channel.c-simstep-ca2f44d1-d6e3-466d-89eb-002ddce8c542"
			]
		},
		"src/nvim/msgpack_rpc/unpacker.c": {
			"path": "src/nvim/msgpack_rpc/unpacker.c",
			"fileName": "unpacker.c",
			"cellName": "unpacker.c",
			"cellId": "1c885fa8-a209-4898-99d8-421d28e73253",
			"visible": true,
			"parentCellId": "4926e922-21e0-43d4-99c5-888a53fd1496",
			"children": [
				"src/nvim/msgpack_rpc/unpacker.c-simstep-29d0f4f4-e4c6-4dba-b7d4-d1f45c37a1da"
			]
		},
		"src/nvim/normal.c": {
			"path": "src/nvim/normal.c",
			"fileName": "normal.c",
			"cellName": "normal.c",
			"cellId": "518c0162-31c6-4815-b119-eaa40b16f756",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245",
			"children": [
				"src/nvim/normal.c-simstep-ce3da800-2568-4ad4-b612-180379aaff6d",
				"src/nvim/normal.c-simstep-29866267-f701-4727-927f-d97d94001177",
				"src/nvim/normal.c-simstep-42cde6a0-47ec-4b89-9ec0-8d82e2532167",
				"src/nvim/normal.c-simstep-fdfba2d4-9a1d-4d6d-8699-3368ea7f2ce1"
			]
		},
		"src/nvim/runtime.c": {
			"path": "src/nvim/runtime.c",
			"fileName": "runtime.c",
			"cellName": "runtime.c",
			"cellId": "f9b33e30-d2b7-431f-bb0d-7c471ad2a424",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245",
			"children": [
				"src/nvim/runtime.c-simstep-a9c1483a-e524-4548-938f-1e858991fb17"
			]
		},
		"src/nvim/shada.c": {
			"path": "src/nvim/shada.c",
			"fileName": "shada.c",
			"cellName": "shada.c",
			"cellId": "4c9bbdcc-7533-41c0-b3b0-55ccef072e58",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245",
			"children": [
				"src/nvim/shada.c-simstep-68470baa-c67e-427a-845b-0da191047596",
				"src/nvim/shada.c-simstep-c711debd-7b2b-4545-8e35-0ff796b2b17c",
				"src/nvim/shada.c-simstep-4d4095e8-155c-485b-829e-3fee86027fcb",
				"src/nvim/shada.c-simstep-6d6d7f55-fb2e-4dbd-b996-bf17a8df685d"
			]
		},
		"src/nvim/terminal.c": {
			"path": "src/nvim/terminal.c",
			"fileName": "terminal.c",
			"cellName": "terminal.c",
			"cellId": "8845d34c-e1ba-4e90-9d8f-e1390c8dc458",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245",
			"children": [
				"src/nvim/terminal.c-simstep-82b5e0c0-1920-412d-beb0-b48d28562f8f",
				"src/nvim/terminal.c-simstep-287eeff7-3ed4-448f-8d07-0c2c6e67d5e5",
				"src/nvim/terminal.c-simstep-42d54e9c-9ec8-4255-a575-4998f3ca24a1"
			]
		},
		"src/nvim/tui": {
			"path": "src/nvim/tui",
			"fileName": "tui",
			"cellName": "tui",
			"cellId": "763b600d-b62e-4a11-b879-9e4529d1d127",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245",
			"children": [
				"src/nvim/tui/tui.c",
				"src/nvim/tui/input.c"
			]
		},
		"src/nvim/tui/input.c": {
			"path": "src/nvim/tui/input.c",
			"fileName": "input.c",
			"cellName": "input.c",
			"cellId": "eb988e14-0f6e-4a6c-b3a0-20009c1358bb",
			"visible": true,
			"parentCellId": "763b600d-b62e-4a11-b879-9e4529d1d127",
			"children": [
				"src/nvim/tui/input.c-simstep-e7e73eee-1300-4377-b62b-1c992d2960ec"
			]
		},
		"src/nvim/tui/tui.c": {
			"path": "src/nvim/tui/tui.c",
			"fileName": "tui.c",
			"cellName": "tui.c",
			"cellId": "acb15131-a0a0-4b55-8a5c-74da55812314",
			"visible": true,
			"parentCellId": "763b600d-b62e-4a11-b879-9e4529d1d127",
			"children": [
				"src/nvim/tui/tui.c-simstep-ceb51e25-a97d-4cd8-ab64-1a5c96cdf406"
			]
		},
		"src/nvim/ui_client.c": {
			"path": "src/nvim/ui_client.c",
			"fileName": "ui_client.c",
			"cellName": "ui_client.c",
			"cellId": "8578861f-8170-4a8a-9974-0142b8687f15",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245",
			"children": [
				"src/nvim/ui_client.c-simstep-f51d4fdd-ccd9-485e-8d82-a073f5e2ee79"
			]
		},
		"src/nvim/vterm": {
			"path": "src/nvim/vterm",
			"fileName": "vterm",
			"cellName": "vterm",
			"cellId": "c00488d0-c1e1-43a1-b816-b3744ac83b9f",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245",
			"children": [
				"src/nvim/vterm/screen.c",
				"src/nvim/vterm/keyboard.c"
			]
		},
		"src/nvim/vterm/keyboard.c": {
			"path": "src/nvim/vterm/keyboard.c",
			"fileName": "keyboard.c",
			"cellName": "keyboard.c",
			"cellId": "d0580ce7-c403-4e51-9297-4989adc23028",
			"visible": true,
			"parentCellId": "c00488d0-c1e1-43a1-b816-b3744ac83b9f",
			"children": [
				"src/nvim/vterm/keyboard.c-simstep-03602d2f-aa8f-4926-92fb-167fffd3ad26"
			]
		},
		"src/nvim/vterm/screen.c": {
			"path": "src/nvim/vterm/screen.c",
			"fileName": "screen.c",
			"cellName": "screen.c",
			"cellId": "ec73ace7-c209-4021-ae84-1dd9665a81cf",
			"visible": true,
			"parentCellId": "c00488d0-c1e1-43a1-b816-b3744ac83b9f"
		},
		"src/nvim/window.c": {
			"path": "src/nvim/window.c",
			"fileName": "window.c",
			"cellName": "window.c",
			"cellId": "c61bd152-dcea-427a-b0b9-0691812637d8",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245",
			"children": [
				"src/nvim/window.c-simstep-ede6f7ce-ff71-4955-a1ee-759d468b14ba",
				"src/nvim/window.c-simstep-93f995ef-1a38-48c1-96a1-08044a13ca4f",
				"src/nvim/window.c-simstep-f73213a7-afc2-436d-8760-49676497d7e0",
				"src/nvim/window.c-simstep-9295a909-2af8-4f26-8a06-027a48c2764f",
				"src/nvim/window.c-simstep-53db624a-1c7f-490c-950f-7a6c769446c4",
				"src/nvim/window.c-simstep-012ef29c-1b5d-48c8-b22a-89b00092f74e"
			]
		},
		"test": {
			"path": "test",
			"fileName": "test",
			"cellName": "test",
			"cellId": "87a748a7-1b4f-498c-a0e0-da2a5d827815",
			"visible": true,
			"children": [
				"test/functional"
			]
		},
		"test/functional": {
			"path": "test/functional",
			"fileName": "functional",
			"cellName": "functional",
			"cellId": "b4c81f3b-f7a8-48c1-a806-f4f685fda7d1",
			"visible": true,
			"parentCellId": "87a748a7-1b4f-498c-a0e0-da2a5d827815",
			"children": [
				"test/functional/plugin",
				"test/functional/core"
			]
		},
		"test/functional/core": {
			"path": "test/functional/core",
			"fileName": "core",
			"cellName": "core",
			"cellId": "de04d0f9-b63d-4791-a845-19c24d9fcf9b",
			"visible": true,
			"parentCellId": "b4c81f3b-f7a8-48c1-a806-f4f685fda7d1",
			"children": [
				"test/functional/core/job_spec.lua"
			]
		},
		"test/functional/core/job_spec.lua": {
			"path": "test/functional/core/job_spec.lua",
			"fileName": "job_spec.lua",
			"cellName": "job_spec.lua",
			"cellId": "6bbecf0c-33f3-4e39-8222-2d1c0afce663",
			"visible": true,
			"parentCellId": "de04d0f9-b63d-4791-a845-19c24d9fcf9b",
			"children": [
				"test/functional/core/job_spec.lua-simstep-eaaca010-42e5-4cce-aef6-fa32b3b82b6e",
				"test/functional/core/job_spec.lua-simstep-e7b85c33-fd85-47cb-8ecb-a0d12c8f7a8e"
			]
		},
		"test/functional/plugin": {
			"path": "test/functional/plugin",
			"fileName": "plugin",
			"cellName": "plugin",
			"cellId": "75e68e6b-cd4c-44d6-915e-f762027767fe",
			"visible": true,
			"parentCellId": "b4c81f3b-f7a8-48c1-a806-f4f685fda7d1",
			"children": [
				"test/functional/plugin/lsp"
			]
		},
		"test/functional/plugin/lsp": {
			"path": "test/functional/plugin/lsp",
			"fileName": "lsp",
			"cellName": "lsp",
			"cellId": "7d942eb2-d170-48d7-960e-2a880f5f9412",
			"visible": true,
			"parentCellId": "75e68e6b-cd4c-44d6-915e-f762027767fe",
			"children": [
				"test/functional/plugin/lsp/diagnostic_spec.lua"
			]
		},
		"test/functional/plugin/lsp/diagnostic_spec.lua": {
			"path": "test/functional/plugin/lsp/diagnostic_spec.lua",
			"fileName": "diagnostic_spec.lua",
			"cellName": "diagnostic_spec.lua",
			"cellId": "f57e2f28-09e1-4d7c-bc12-257c87bad075",
			"visible": true,
			"parentCellId": "7d942eb2-d170-48d7-960e-2a880f5f9412",
			"children": [
				"test/functional/plugin/lsp/diagnostic_spec.lua-simstep-33be5e65-fed2-40c8-8efb-07b9cc952325"
			]
		},
		"d6a60112-6bc4-4474-8997-f4458fcc3328": {
			"path": "d6a60112-6bc4-4474-8997-f4458fcc3328",
			"fileName": "d6a60112-6bc4-4474-8997-f4458fcc3328",
			"cellName": "src",
			"cellId": "d6a60112-6bc4-4474-8997-f4458fcc3328",
			"visible": true
		},
		"3e82ef51-0ca1-4920-9642-822b9ab36245": {
			"path": "3e82ef51-0ca1-4920-9642-822b9ab36245",
			"fileName": "3e82ef51-0ca1-4920-9642-822b9ab36245",
			"cellName": "nvim",
			"cellId": "3e82ef51-0ca1-4920-9642-822b9ab36245",
			"visible": true,
			"parentCellId": "d6a60112-6bc4-4474-8997-f4458fcc3328"
		},
		"daae3417-8258-49a6-a129-53b01c2aaa30": {
			"path": "daae3417-8258-49a6-a129-53b01c2aaa30",
			"fileName": "daae3417-8258-49a6-a129-53b01c2aaa30",
			"cellName": "main.c",
			"cellId": "daae3417-8258-49a6-a129-53b01c2aaa30",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245"
		},
		"518c0162-31c6-4815-b119-eaa40b16f756": {
			"path": "518c0162-31c6-4815-b119-eaa40b16f756",
			"fileName": "518c0162-31c6-4815-b119-eaa40b16f756",
			"cellName": "normal.c",
			"cellId": "518c0162-31c6-4815-b119-eaa40b16f756",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245"
		},
		"009cda38-3911-4628-b7d7-f231e5b9d9c1": {
			"path": "009cda38-3911-4628-b7d7-f231e5b9d9c1",
			"fileName": "009cda38-3911-4628-b7d7-f231e5b9d9c1",
			"cellName": "edit.c",
			"cellId": "009cda38-3911-4628-b7d7-f231e5b9d9c1",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245"
		},
		"fc227316-19fc-4c6b-858f-c5a2258e6038": {
			"path": "fc227316-19fc-4c6b-858f-c5a2258e6038",
			"fileName": "fc227316-19fc-4c6b-858f-c5a2258e6038",
			"cellName": "Startup & Enter Normal Mode - main.c:L656",
			"cellId": "fc227316-19fc-4c6b-858f-c5a2258e6038",
			"visible": true,
			"parentCellId": "daae3417-8258-49a6-a129-53b01c2aaa30"
		},
		"src/nvim/main.c-simstep-6cd87cb0-6e59-4149-819b-1f71b053ea56": {
			"path": "src/nvim/main.c-simstep-6cd87cb0-6e59-4149-819b-1f71b053ea56",
			"fileName": "main.c",
			"wiki": "Neovim starts. The `main` function initializes the editor and enters the main loop for Normal mode by calling `normal_enter`. The core Normal mode loop (`normal_cmd`) begins, waiting for user input.",
			"cellName": "Startup & Enter Normal Mode - main.c:L656",
			"cellId": "fc227316-19fc-4c6b-858f-c5a2258e6038",
			"visible": true,
			"startLine": 656,
			"endLine": 656,
			"parentCellId": "daae3417-8258-49a6-a129-53b01c2aaa30",
			"parentPath": "src/nvim/main.c"
		},
		"2c454cce-3d53-4ccd-8aad-bfb51ff68f2a": {
			"path": "2c454cce-3d53-4ccd-8aad-bfb51ff68f2a",
			"fileName": "2c454cce-3d53-4ccd-8aad-bfb51ff68f2a",
			"cellName": "Process 'i' Command to Enter Insert Mode - normal.c:L1245-1246",
			"cellId": "2c454cce-3d53-4ccd-8aad-bfb51ff68f2a",
			"visible": true,
			"parentCellId": "518c0162-31c6-4815-b119-eaa40b16f756"
		},
		"src/nvim/normal.c-simstep-ce3da800-2568-4ad4-b612-180379aaff6d": {
			"path": "src/nvim/normal.c-simstep-ce3da800-2568-4ad4-b612-180379aaff6d",
			"fileName": "normal.c",
			"wiki": "The `normal_cmd` loop identifies 'i' as a command to start insertion by looking it up in `nv_cmds`. It calls the associated function `nv_edit`, which then calls `edit()` to switch the editor to Insert mode.",
			"cellName": "Process 'i' Command to Enter Insert Mode - normal.c:L1245-1246",
			"cellId": "2c454cce-3d53-4ccd-8aad-bfb51ff68f2a",
			"visible": true,
			"startLine": 1245,
			"endLine": 1246,
			"parentCellId": "518c0162-31c6-4815-b119-eaa40b16f756",
			"parentPath": "src/nvim/normal.c"
		},
		"02a5eb0d-7779-4aa6-a386-2b0c7b32599c": {
			"path": "02a5eb0d-7779-4aa6-a386-2b0c7b32599c",
			"fileName": "02a5eb0d-7779-4aa6-a386-2b0c7b32599c",
			"cellName": "Insert Text into Buffer - edit.c:L2648-2651",
			"cellId": "02a5eb0d-7779-4aa6-a386-2b0c7b32599c",
			"visible": true,
			"parentCellId": "009cda38-3911-4628-b7d7-f231e5b9d9c1"
		},
		"src/nvim/edit.c-simstep-9ba3df3f-324c-41ca-9dbd-7937612366b7": {
			"path": "src/nvim/edit.c-simstep-9ba3df3f-324c-41ca-9dbd-7937612366b7",
			"fileName": "edit.c",
			"wiki": "The `edit()` loop processes each character of 'Hello', calling functions to insert the text into the current buffer at the cursor's position.",
			"cellName": "Insert Text into Buffer - edit.c:L2648-2651",
			"cellId": "02a5eb0d-7779-4aa6-a386-2b0c7b32599c",
			"visible": true,
			"startLine": 2648,
			"endLine": 2651,
			"parentCellId": "009cda38-3911-4628-b7d7-f231e5b9d9c1",
			"parentPath": "src/nvim/edit.c"
		},
		"20677a8e-f78e-4d90-b121-327ccef83669": {
			"path": "20677a8e-f78e-4d90-b121-327ccef83669",
			"fileName": "20677a8e-f78e-4d90-b121-327ccef83669",
			"cellName": "Process Escape and Exit Insert Mode - edit.c:L1670-1678",
			"cellId": "20677a8e-f78e-4d90-b121-327ccef83669",
			"visible": true,
			"parentCellId": "009cda38-3911-4628-b7d7-f231e5b9d9c1"
		},
		"src/nvim/edit.c-simstep-ba30f07d-998c-4d61-95f2-cf0cfa3da97c": {
			"path": "src/nvim/edit.c-simstep-ba30f07d-998c-4d61-95f2-cf0cfa3da97c",
			"fileName": "edit.c",
			"wiki": "The `edit()` loop handles the `<Esc>` key, which terminates Insert mode and causes the `edit()` function to return, passing control back to the Normal mode loop.",
			"cellName": "Process Escape and Exit Insert Mode - edit.c:L1670-1678",
			"cellId": "20677a8e-f78e-4d90-b121-327ccef83669",
			"visible": true,
			"startLine": 1670,
			"endLine": 1678,
			"parentCellId": "009cda38-3911-4628-b7d7-f231e5b9d9c1",
			"parentPath": "src/nvim/edit.c"
		},
		"b88cd60a-114c-4aa0-99ae-e71447500e62": {
			"path": "b88cd60a-114c-4aa0-99ae-e71447500e62",
			"fileName": "b88cd60a-114c-4aa0-99ae-e71447500e62",
			"cellName": "Process 'h' and Move Cursor - normal.c:L3242-3252",
			"cellId": "b88cd60a-114c-4aa0-99ae-e71447500e62",
			"visible": true,
			"parentCellId": "518c0162-31c6-4815-b119-eaa40b16f756"
		},
		"src/nvim/normal.c-simstep-29866267-f701-4727-927f-d97d94001177": {
			"path": "src/nvim/normal.c-simstep-29866267-f701-4727-927f-d97d94001177",
			"fileName": "normal.c",
			"wiki": "The `normal_cmd` loop identifies 'h' as a cursor motion command and calls `nv_left`. This function updates the cursor's column position, moving it one character to the left.",
			"cellName": "Process 'h' and Move Cursor - normal.c:L3242-3252",
			"cellId": "b88cd60a-114c-4aa0-99ae-e71447500e62",
			"visible": true,
			"startLine": 3242,
			"endLine": 3252,
			"parentCellId": "518c0162-31c6-4815-b119-eaa40b16f756",
			"parentPath": "src/nvim/normal.c"
		},
		"fe1e3d63-c1dd-4302-9c49-44ebd7bab5a6": {
			"path": "fe1e3d63-c1dd-4302-9c49-44ebd7bab5a6",
			"fileName": "fe1e3d63-c1dd-4302-9c49-44ebd7bab5a6",
			"cellName": "Input: 'i'",
			"cellId": "fe1e3d63-c1dd-4302-9c49-44ebd7bab5a6",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245"
		},
		"generated-edge-simstep-97f9849d-f37d-462d-9154-86af0bc326f3-fe1e3d63-c1dd-4302-9c49-44ebd7bab5a6": {
			"path": "generated-edge-simstep-97f9849d-f37d-462d-9154-86af0bc326f3-fe1e3d63-c1dd-4302-9c49-44ebd7bab5a6",
			"fileName": "main.c",
			"cellName": "Input: 'i'",
			"cellId": "fe1e3d63-c1dd-4302-9c49-44ebd7bab5a6",
			"visible": true,
			"startLine": 514,
			"endLine": 514,
			"parentPath": "src/nvim/main.c"
		},
		"d1f3cad6-6d29-4445-84a0-0495f39cfda5": {
			"path": "d1f3cad6-6d29-4445-84a0-0495f39cfda5",
			"fileName": "d1f3cad6-6d29-4445-84a0-0495f39cfda5",
			"cellName": "Input: User\nTypes Text",
			"cellId": "d1f3cad6-6d29-4445-84a0-0495f39cfda5",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245"
		},
		"generated-edge-simstep-56d29906-e346-4deb-8233-ed01b8e2aa43-d1f3cad6-6d29-4445-84a0-0495f39cfda5": {
			"path": "generated-edge-simstep-56d29906-e346-4deb-8233-ed01b8e2aa43-d1f3cad6-6d29-4445-84a0-0495f39cfda5",
			"fileName": "normal.c",
			"cellName": "Input: User Types Text",
			"cellId": "d1f3cad6-6d29-4445-84a0-0495f39cfda5",
			"visible": true,
			"startLine": 1661,
			"endLine": 1661,
			"parentPath": "src/nvim/normal.c"
		},
		"5a19ec83-0c62-4f00-b056-a07cec0c77a6": {
			"path": "5a19ec83-0c62-4f00-b056-a07cec0c77a6",
			"fileName": "5a19ec83-0c62-4f00-b056-a07cec0c77a6",
			"cellName": "Input: ''",
			"cellId": "5a19ec83-0c62-4f00-b056-a07cec0c77a6",
			"visible": true,
			"parentCellId": "009cda38-3911-4628-b7d7-f231e5b9d9c1"
		},
		"generated-edge-simstep-ce7bff20-72b5-4831-8b30-d545d67e90ec-5a19ec83-0c62-4f00-b056-a07cec0c77a6": {
			"path": "generated-edge-simstep-ce7bff20-72b5-4831-8b30-d545d67e90ec-5a19ec83-0c62-4f00-b056-a07cec0c77a6",
			"fileName": "edit.c",
			"cellName": "Input: '<Esc>'",
			"cellId": "5a19ec83-0c62-4f00-b056-a07cec0c77a6",
			"visible": true,
			"startLine": 1661,
			"endLine": 1661,
			"parentPath": "src/nvim/edit.c"
		},
		"8765ad01-0c30-40ab-8037-fa7a2f7dfcf0": {
			"path": "8765ad01-0c30-40ab-8037-fa7a2f7dfcf0",
			"fileName": "8765ad01-0c30-40ab-8037-fa7a2f7dfcf0",
			"cellName": "Input: 'h'",
			"cellId": "8765ad01-0c30-40ab-8037-fa7a2f7dfcf0",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245"
		},
		"generated-edge-simstep-c71c533b-e734-4cbd-91c5-6b0d7243c82a-8765ad01-0c30-40ab-8037-fa7a2f7dfcf0": {
			"path": "generated-edge-simstep-c71c533b-e734-4cbd-91c5-6b0d7243c82a-8765ad01-0c30-40ab-8037-fa7a2f7dfcf0",
			"fileName": "edit.c",
			"cellName": "Input: 'h'",
			"cellId": "8765ad01-0c30-40ab-8037-fa7a2f7dfcf0",
			"visible": true,
			"startLine": 514,
			"endLine": 514,
			"parentPath": "src/nvim/edit.c"
		},
		"b52bf518-7886-464d-9f0c-143c99a095bd": {
			"path": "b52bf518-7886-464d-9f0c-143c99a095bd",
			"fileName": "b52bf518-7886-464d-9f0c-143c99a095bd",
			"cellName": "runtime",
			"cellId": "b52bf518-7886-464d-9f0c-143c99a095bd",
			"visible": true
		},
		"87a748a7-1b4f-498c-a0e0-da2a5d827815": {
			"path": "87a748a7-1b4f-498c-a0e0-da2a5d827815",
			"fileName": "87a748a7-1b4f-498c-a0e0-da2a5d827815",
			"cellName": "test",
			"cellId": "87a748a7-1b4f-498c-a0e0-da2a5d827815",
			"visible": true
		},
		"c922487a-a2f6-43f6-9277-9979bcda65df": {
			"path": "c922487a-a2f6-43f6-9277-9979bcda65df",
			"fileName": "c922487a-a2f6-43f6-9277-9979bcda65df",
			"cellName": "lua",
			"cellId": "c922487a-a2f6-43f6-9277-9979bcda65df",
			"visible": true,
			"parentCellId": "b52bf518-7886-464d-9f0c-143c99a095bd"
		},
		"b4c81f3b-f7a8-48c1-a806-f4f685fda7d1": {
			"path": "b4c81f3b-f7a8-48c1-a806-f4f685fda7d1",
			"fileName": "b4c81f3b-f7a8-48c1-a806-f4f685fda7d1",
			"cellName": "functional",
			"cellId": "b4c81f3b-f7a8-48c1-a806-f4f685fda7d1",
			"visible": true,
			"parentCellId": "87a748a7-1b4f-498c-a0e0-da2a5d827815"
		},
		"c851f0f3-ad8b-4337-b109-5813415e3dd0": {
			"path": "c851f0f3-ad8b-4337-b109-5813415e3dd0",
			"fileName": "c851f0f3-ad8b-4337-b109-5813415e3dd0",
			"cellName": "vim",
			"cellId": "c851f0f3-ad8b-4337-b109-5813415e3dd0",
			"visible": true,
			"parentCellId": "c922487a-a2f6-43f6-9277-9979bcda65df"
		},
		"75e68e6b-cd4c-44d6-915e-f762027767fe": {
			"path": "75e68e6b-cd4c-44d6-915e-f762027767fe",
			"fileName": "75e68e6b-cd4c-44d6-915e-f762027767fe",
			"cellName": "plugin",
			"cellId": "75e68e6b-cd4c-44d6-915e-f762027767fe",
			"visible": true,
			"parentCellId": "b4c81f3b-f7a8-48c1-a806-f4f685fda7d1"
		},
		"1de65660-86b9-4e74-9809-48c7ed511209": {
			"path": "1de65660-86b9-4e74-9809-48c7ed511209",
			"fileName": "1de65660-86b9-4e74-9809-48c7ed511209",
			"cellName": "lsp.lua",
			"cellId": "1de65660-86b9-4e74-9809-48c7ed511209",
			"visible": true,
			"parentCellId": "c851f0f3-ad8b-4337-b109-5813415e3dd0"
		},
		"3e57265c-f610-4d80-a76c-a4ea5aa05a60": {
			"path": "3e57265c-f610-4d80-a76c-a4ea5aa05a60",
			"fileName": "3e57265c-f610-4d80-a76c-a4ea5aa05a60",
			"cellName": "lsp",
			"cellId": "3e57265c-f610-4d80-a76c-a4ea5aa05a60",
			"visible": true,
			"parentCellId": "c851f0f3-ad8b-4337-b109-5813415e3dd0"
		},
		"7d942eb2-d170-48d7-960e-2a880f5f9412": {
			"path": "7d942eb2-d170-48d7-960e-2a880f5f9412",
			"fileName": "7d942eb2-d170-48d7-960e-2a880f5f9412",
			"cellName": "lsp",
			"cellId": "7d942eb2-d170-48d7-960e-2a880f5f9412",
			"visible": true,
			"parentCellId": "75e68e6b-cd4c-44d6-915e-f762027767fe"
		},
		"71e6ac0f-df3a-4d68-8a74-686275b1132d": {
			"path": "71e6ac0f-df3a-4d68-8a74-686275b1132d",
			"fileName": "71e6ac0f-df3a-4d68-8a74-686275b1132d",
			"cellName": "client.lua",
			"cellId": "71e6ac0f-df3a-4d68-8a74-686275b1132d",
			"visible": true,
			"parentCellId": "3e57265c-f610-4d80-a76c-a4ea5aa05a60"
		},
		"f9f72dfc-2e7a-4acc-bad7-056824c3b13c": {
			"path": "f9f72dfc-2e7a-4acc-bad7-056824c3b13c",
			"fileName": "f9f72dfc-2e7a-4acc-bad7-056824c3b13c",
			"cellName": "buf.lua",
			"cellId": "f9f72dfc-2e7a-4acc-bad7-056824c3b13c",
			"visible": true,
			"parentCellId": "3e57265c-f610-4d80-a76c-a4ea5aa05a60"
		},
		"9cc89460-e83b-4fa1-a5bc-8530c4ca6ef8": {
			"path": "9cc89460-e83b-4fa1-a5bc-8530c4ca6ef8",
			"fileName": "9cc89460-e83b-4fa1-a5bc-8530c4ca6ef8",
			"cellName": "handlers.lua",
			"cellId": "9cc89460-e83b-4fa1-a5bc-8530c4ca6ef8",
			"visible": true,
			"parentCellId": "3e57265c-f610-4d80-a76c-a4ea5aa05a60"
		},
		"f57e2f28-09e1-4d7c-bc12-257c87bad075": {
			"path": "f57e2f28-09e1-4d7c-bc12-257c87bad075",
			"fileName": "f57e2f28-09e1-4d7c-bc12-257c87bad075",
			"cellName": "diagnostic_spec.lua",
			"cellId": "f57e2f28-09e1-4d7c-bc12-257c87bad075",
			"visible": true,
			"parentCellId": "7d942eb2-d170-48d7-960e-2a880f5f9412"
		},
		"e293cc75-5e20-4786-8bd5-3ead6698bac2": {
			"path": "e293cc75-5e20-4786-8bd5-3ead6698bac2",
			"fileName": "e293cc75-5e20-4786-8bd5-3ead6698bac2",
			"cellName": "LSP Flow: User Initiates LSP Client - lsp.lua:L660-663",
			"cellId": "e293cc75-5e20-4786-8bd5-3ead6698bac2",
			"visible": true,
			"parentCellId": "1de65660-86b9-4e74-9809-48c7ed511209"
		},
		"runtime/lua/vim/lsp.lua-simstep-7285d70b-8e21-4aa6-90b8-4626e8d15fce": {
			"path": "runtime/lua/vim/lsp.lua-simstep-7285d70b-8e21-4aa6-90b8-4626e8d15fce",
			"fileName": "lsp.lua",
			"wiki": "A user's configuration or a manual command triggers `vim.lsp.start` to launch and configure a language server. This function is the primary entry point for creating and managing LSP clients, handling either the creation of a new client or the reuse of an existing one that matches the project's root directory and server name.",
			"cellName": "LSP Flow: User Initiates LSP Client - lsp.lua:L660-663",
			"cellId": "e293cc75-5e20-4786-8bd5-3ead6698bac2",
			"visible": true,
			"startLine": 660,
			"endLine": 663,
			"parentCellId": "1de65660-86b9-4e74-9809-48c7ed511209",
			"parentPath": "runtime/lua/vim/lsp.lua"
		},
		"e0ce6135-616a-4bd8-8342-4d89d1a3639d": {
			"path": "e0ce6135-616a-4bd8-8342-4d89d1a3639d",
			"fileName": "e0ce6135-616a-4bd8-8342-4d89d1a3639d",
			"cellName": "LSP Flow: Client Initialization and Handshake - client.lua:L726-732",
			"cellId": "e0ce6135-616a-4bd8-8342-4d89d1a3639d",
			"visible": true,
			"parentCellId": "71e6ac0f-df3a-4d68-8a74-686275b1132d"
		},
		"runtime/lua/vim/lsp/client.lua-simstep-260ab1a1-c622-4a14-bd33-cf9a1cf5f83c": {
			"path": "runtime/lua/vim/lsp/client.lua-simstep-260ab1a1-c622-4a14-bd33-cf9a1cf5f83c",
			"fileName": "client.lua",
			"wiki": "The client starts the language server executable and establishes a connection. It then performs the LSP initialization handshake by sending an `initialize` request with the client's capabilities (e.g., support for snippets) and processes the server's response containing its own capabilities.",
			"cellName": "LSP Flow: Client Initialization and Handshake - client.lua:L726-732",
			"cellId": "e0ce6135-616a-4bd8-8342-4d89d1a3639d",
			"visible": true,
			"startLine": 726,
			"endLine": 732,
			"parentCellId": "71e6ac0f-df3a-4d68-8a74-686275b1132d",
			"parentPath": "runtime/lua/vim/lsp/client.lua"
		},
		"f095a9dc-2d06-437b-93aa-3a7dd3ed833f": {
			"path": "f095a9dc-2d06-437b-93aa-3a7dd3ed833f",
			"fileName": "f095a9dc-2d06-437b-93aa-3a7dd3ed833f",
			"cellName": "LSP Flow: Server Analyzes Document and Publishes Diagnostics - diagnostic_spec.lua:L535-549",
			"cellId": "f095a9dc-2d06-437b-93aa-3a7dd3ed833f",
			"visible": true,
			"parentCellId": "f57e2f28-09e1-4d7c-bc12-257c87bad075"
		},
		"test/functional/plugin/lsp/diagnostic_spec.lua-simstep-33be5e65-fed2-40c8-8efb-07b9cc952325": {
			"path": "test/functional/plugin/lsp/diagnostic_spec.lua-simstep-33be5e65-fed2-40c8-8efb-07b9cc952325",
			"fileName": "diagnostic_spec.lua",
			"wiki": "The language server, running as a separate process, receives the document content and performs static analysis. If any errors or warnings are found, it sends a `textDocument/publishDiagnostics` notification back to Neovim, which then displays them in the editor.",
			"cellName": "LSP Flow: Server Analyzes Document and Publishes Diagnostics - diagnostic_spec.lua:L535-549",
			"cellId": "f095a9dc-2d06-437b-93aa-3a7dd3ed833f",
			"visible": true,
			"startLine": 535,
			"endLine": 549,
			"parentCellId": "f57e2f28-09e1-4d7c-bc12-257c87bad075",
			"parentPath": "test/functional/plugin/lsp/diagnostic_spec.lua"
		},
		"4bca555a-8aaa-4a0a-911c-c9888268799d": {
			"path": "4bca555a-8aaa-4a0a-911c-c9888268799d",
			"fileName": "4bca555a-8aaa-4a0a-911c-c9888268799d",
			"cellName": "LSP Flow: `buf_request_all` Dispatches Request - lsp.lua:L1250-1254",
			"cellId": "4bca555a-8aaa-4a0a-911c-c9888268799d",
			"visible": true,
			"parentCellId": "1de65660-86b9-4e74-9809-48c7ed511209"
		},
		"runtime/lua/vim/lsp.lua-simstep-1aa5f8e4-cfa3-4a67-af6f-017ce5243174": {
			"path": "runtime/lua/vim/lsp.lua-simstep-1aa5f8e4-cfa3-4a67-af6f-017ce5243174",
			"fileName": "lsp.lua",
			"wiki": "The `vim.lsp.buf_request_all` function sends a request to all clients attached to the buffer that support the method ('textDocument/definition'). This architecture allows multiple servers to respond to the same request, with a handler function aggregating the results.",
			"cellName": "LSP Flow: `buf_request_all` Dispatches Request - lsp.lua:L1250-1254",
			"cellId": "4bca555a-8aaa-4a0a-911c-c9888268799d",
			"visible": true,
			"startLine": 1250,
			"endLine": 1254,
			"parentCellId": "1de65660-86b9-4e74-9809-48c7ed511209",
			"parentPath": "runtime/lua/vim/lsp.lua"
		},
		"bf73463f-8a85-4599-a168-942be8f9397a": {
			"path": "bf73463f-8a85-4599-a168-942be8f9397a",
			"fileName": "bf73463f-8a85-4599-a168-942be8f9397a",
			"cellName": "LSP Flow: Neovim Jumps to Definition - handlers.lua:L377-380",
			"cellId": "bf73463f-8a85-4599-a168-942be8f9397a",
			"visible": true,
			"parentCellId": "9cc89460-e83b-4fa1-a5bc-8530c4ca6ef8"
		},
		"runtime/lua/vim/lsp/handlers.lua-simstep-bd6ae996-e127-46cb-b8a3-ef60eb19bd3c": {
			"path": "runtime/lua/vim/lsp/handlers.lua-simstep-bd6ae996-e127-46cb-b8a3-ef60eb19bd3c",
			"fileName": "handlers.lua",
			"wiki": "The client's handler receives the response. The default `textDocument/definition` handler processes the location data and executes commands to open the target file and move the cursor to the specified range, effectively 'jumping' to the definition.",
			"cellName": "LSP Flow: Neovim Jumps to Definition - handlers.lua:L377-380",
			"cellId": "bf73463f-8a85-4599-a168-942be8f9397a",
			"visible": true,
			"startLine": 377,
			"endLine": 380,
			"parentCellId": "9cc89460-e83b-4fa1-a5bc-8530c4ca6ef8",
			"parentPath": "runtime/lua/vim/lsp/handlers.lua"
		},
		"37af7ff0-4bcd-403d-9163-e048b49ba847": {
			"path": "37af7ff0-4bcd-403d-9163-e048b49ba847",
			"fileName": "37af7ff0-4bcd-403d-9163-e048b49ba847",
			"cellName": "LSP Flow:\nConfiguration Data\nFlow",
			"cellId": "37af7ff0-4bcd-403d-9163-e048b49ba847",
			"visible": true,
			"parentCellId": "c851f0f3-ad8b-4337-b109-5813415e3dd0"
		},
		"generated-edge-simstep-991e652b-dec8-4511-9657-040f168c1f1e-37af7ff0-4bcd-403d-9163-e048b49ba847": {
			"path": "generated-edge-simstep-991e652b-dec8-4511-9657-040f168c1f1e-37af7ff0-4bcd-403d-9163-e048b49ba847",
			"fileName": "lsp.lua",
			"cellName": "LSP Flow: Configuration Data Flow",
			"cellId": "37af7ff0-4bcd-403d-9163-e048b49ba847",
			"visible": true,
			"startLine": 35,
			"endLine": 43,
			"parentPath": "runtime/lua/vim/lsp.lua"
		},
		"b84506f1-1881-4b72-9130-976d8f9f4dc0": {
			"path": "b84506f1-1881-4b72-9130-976d8f9f4dc0",
			"fileName": "b84506f1-1881-4b72-9130-976d8f9f4dc0",
			"cellName": "LSP Flow:\nSend `textDocument/didOpen`\nNotification",
			"cellId": "b84506f1-1881-4b72-9130-976d8f9f4dc0",
			"visible": true
		},
		"generated-edge-simstep-c91b6617-1f87-4eb0-9c2d-e158c33d22ad-b84506f1-1881-4b72-9130-976d8f9f4dc0": {
			"path": "generated-edge-simstep-c91b6617-1f87-4eb0-9c2d-e158c33d22ad-b84506f1-1881-4b72-9130-976d8f9f4dc0",
			"fileName": "client.lua",
			"cellName": "LSP Flow: Send `textDocument/didOpen` Notification",
			"cellId": "b84506f1-1881-4b72-9130-976d8f9f4dc0",
			"visible": true,
			"startLine": 1051,
			"endLine": 1055,
			"parentPath": "runtime/lua/vim/lsp/client.lua"
		},
		"45325d38-b4bd-4abf-bbac-e3412106c58d": {
			"path": "45325d38-b4bd-4abf-bbac-e3412106c58d",
			"fileName": "45325d38-b4bd-4abf-bbac-e3412106c58d",
			"cellName": "LSP Flow:\nUser Triggers\n'Go to\nDefinition'",
			"cellId": "45325d38-b4bd-4abf-bbac-e3412106c58d",
			"visible": true
		},
		"generated-edge-simstep-96875ef8-e9b3-4a79-bcf9-36d53942e9a8-45325d38-b4bd-4abf-bbac-e3412106c58d": {
			"path": "generated-edge-simstep-96875ef8-e9b3-4a79-bcf9-36d53942e9a8-45325d38-b4bd-4abf-bbac-e3412106c58d",
			"fileName": "diagnostic_spec.lua",
			"cellName": "LSP Flow: User Triggers 'Go to Definition'",
			"cellId": "45325d38-b4bd-4abf-bbac-e3412106c58d",
			"visible": true,
			"startLine": 195,
			"endLine": 218,
			"parentPath": "test/functional/plugin/lsp/diagnostic_spec.lua"
		},
		"1f01c4c8-b7af-43de-b0b0-90fe2b54c7f4": {
			"path": "1f01c4c8-b7af-43de-b0b0-90fe2b54c7f4",
			"fileName": "1f01c4c8-b7af-43de-b0b0-90fe2b54c7f4",
			"cellName": "LSP Flow:\nServer Responds\nwith Definition\nLocation",
			"cellId": "1f01c4c8-b7af-43de-b0b0-90fe2b54c7f4",
			"visible": true,
			"parentCellId": "c851f0f3-ad8b-4337-b109-5813415e3dd0"
		},
		"generated-edge-simstep-1c87e4cd-3060-479a-b444-c6231b81416a-1f01c4c8-b7af-43de-b0b0-90fe2b54c7f4": {
			"path": "generated-edge-simstep-1c87e4cd-3060-479a-b444-c6231b81416a-1f01c4c8-b7af-43de-b0b0-90fe2b54c7f4",
			"fileName": "lsp.lua",
			"cellName": "LSP Flow: Server Responds with Definition Location",
			"cellId": "1f01c4c8-b7af-43de-b0b0-90fe2b54c7f4",
			"visible": true,
			"startLine": 1251,
			"endLine": 1251,
			"parentPath": "runtime/lua/vim/lsp.lua"
		},
		"24a46775-e82d-4010-a07a-ca429e687577": {
			"path": "24a46775-e82d-4010-a07a-ca429e687577",
			"fileName": "24a46775-e82d-4010-a07a-ca429e687577",
			"cellName": "gen",
			"cellId": "24a46775-e82d-4010-a07a-ca429e687577",
			"visible": true,
			"parentCellId": "d6a60112-6bc4-4474-8997-f4458fcc3328"
		},
		"4030d70f-0fed-4a0f-8778-d844f56b88f7": {
			"path": "4030d70f-0fed-4a0f-8778-d844f56b88f7",
			"fileName": "4030d70f-0fed-4a0f-8778-d844f56b88f7",
			"cellName": "api",
			"cellId": "4030d70f-0fed-4a0f-8778-d844f56b88f7",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245"
		},
		"4926e922-21e0-43d4-99c5-888a53fd1496": {
			"path": "4926e922-21e0-43d4-99c5-888a53fd1496",
			"fileName": "4926e922-21e0-43d4-99c5-888a53fd1496",
			"cellName": "msgpack_rpc",
			"cellId": "4926e922-21e0-43d4-99c5-888a53fd1496",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245"
		},
		"e70de9ac-eaa8-40f0-8d38-6b65bf87ec20": {
			"path": "e70de9ac-eaa8-40f0-8d38-6b65bf87ec20",
			"fileName": "e70de9ac-eaa8-40f0-8d38-6b65bf87ec20",
			"cellName": "lua",
			"cellId": "e70de9ac-eaa8-40f0-8d38-6b65bf87ec20",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245"
		},
		"1bc9a917-6299-4cd3-89c5-f72aba8a049b": {
			"path": "1bc9a917-6299-4cd3-89c5-f72aba8a049b",
			"fileName": "1bc9a917-6299-4cd3-89c5-f72aba8a049b",
			"cellName": "buffer_updates.c",
			"cellId": "1bc9a917-6299-4cd3-89c5-f72aba8a049b",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245"
		},
		"4b4eb64a-101c-4009-941e-c6f336d94ff0": {
			"path": "4b4eb64a-101c-4009-941e-c6f336d94ff0",
			"fileName": "4b4eb64a-101c-4009-941e-c6f336d94ff0",
			"cellName": "gen_api_dispatch.lua",
			"cellId": "4b4eb64a-101c-4009-941e-c6f336d94ff0",
			"visible": true,
			"parentCellId": "24a46775-e82d-4010-a07a-ca429e687577"
		},
		"6dc96ed4-5374-4d39-97e8-f84e6912f0c9": {
			"path": "6dc96ed4-5374-4d39-97e8-f84e6912f0c9",
			"fileName": "6dc96ed4-5374-4d39-97e8-f84e6912f0c9",
			"cellName": "vim.c",
			"cellId": "6dc96ed4-5374-4d39-97e8-f84e6912f0c9",
			"visible": true,
			"parentCellId": "4030d70f-0fed-4a0f-8778-d844f56b88f7"
		},
		"770e342b-bb36-468b-b859-cbf415542d91": {
			"path": "770e342b-bb36-468b-b859-cbf415542d91",
			"fileName": "770e342b-bb36-468b-b859-cbf415542d91",
			"cellName": "buffer.c",
			"cellId": "770e342b-bb36-468b-b859-cbf415542d91",
			"visible": true,
			"parentCellId": "4030d70f-0fed-4a0f-8778-d844f56b88f7"
		},
		"ffc21c72-aa11-4a85-829b-250f0719530b": {
			"path": "ffc21c72-aa11-4a85-829b-250f0719530b",
			"fileName": "ffc21c72-aa11-4a85-829b-250f0719530b",
			"cellName": "events.c",
			"cellId": "ffc21c72-aa11-4a85-829b-250f0719530b",
			"visible": true,
			"parentCellId": "4030d70f-0fed-4a0f-8778-d844f56b88f7"
		},
		"043e230c-2dcd-42ad-be8f-d32dd9d140f0": {
			"path": "043e230c-2dcd-42ad-be8f-d32dd9d140f0",
			"fileName": "043e230c-2dcd-42ad-be8f-d32dd9d140f0",
			"cellName": "channel.c",
			"cellId": "043e230c-2dcd-42ad-be8f-d32dd9d140f0",
			"visible": true,
			"parentCellId": "4926e922-21e0-43d4-99c5-888a53fd1496"
		},
		"2504cc8a-889d-4471-9d56-2b97a6275447": {
			"path": "2504cc8a-889d-4471-9d56-2b97a6275447",
			"fileName": "2504cc8a-889d-4471-9d56-2b97a6275447",
			"cellName": "executor.c",
			"cellId": "2504cc8a-889d-4471-9d56-2b97a6275447",
			"visible": true,
			"parentCellId": "e70de9ac-eaa8-40f0-8d38-6b65bf87ec20"
		},
		"31e11097-71a3-4628-a17e-03bcd497f17a": {
			"path": "31e11097-71a3-4628-a17e-03bcd497f17a",
			"fileName": "31e11097-71a3-4628-a17e-03bcd497f17a",
			"cellName": "Lua Flow: Client Initiates Lua Execution - vim.c:L508-516",
			"cellId": "31e11097-71a3-4628-a17e-03bcd497f17a",
			"visible": true,
			"parentCellId": "6dc96ed4-5374-4d39-97e8-f84e6912f0c9"
		},
		"src/nvim/api/vim.c-simstep-e90fe967-7096-4e2a-a379-5da61500f5ad": {
			"path": "src/nvim/api/vim.c-simstep-e90fe967-7096-4e2a-a379-5da61500f5ad",
			"fileName": "vim.c",
			"wiki": "A remote client, such as a plugin or external tool, decides to execute a piece of Lua code within Neovim. It invokes the `nvim_exec_lua` API function, providing the Lua code as a string and any arguments. This is a primary mechanism for extending Neovim's functionality.",
			"cellName": "Lua Flow: Client Initiates Lua Execution - vim.c:L508-516",
			"cellId": "31e11097-71a3-4628-a17e-03bcd497f17a",
			"visible": true,
			"startLine": 508,
			"endLine": 516,
			"parentCellId": "6dc96ed4-5374-4d39-97e8-f84e6912f0c9",
			"parentPath": "src/nvim/api/vim.c"
		},
		"fff81b0f-701d-42b5-b480-35ba647a110b": {
			"path": "fff81b0f-701d-42b5-b480-35ba647a110b",
			"fileName": "fff81b0f-701d-42b5-b480-35ba647a110b",
			"cellName": "Lua Flow: RPC Request Dispatch - gen_api_dispatch.lua:L489-501",
			"cellId": "fff81b0f-701d-42b5-b480-35ba647a110b",
			"visible": true,
			"parentCellId": "4b4eb64a-101c-4009-941e-c6f336d94ff0"
		},
		"src/gen/gen_api_dispatch.lua-simstep-8ae7f84a-1a1b-4322-b57f-b46112a80606": {
			"path": "src/gen/gen_api_dispatch.lua-simstep-8ae7f84a-1a1b-4322-b57f-b46112a80606",
			"fileName": "gen_api_dispatch.lua",
			"wiki": "The Neovim server receives and unpacks the RPC request. The dispatcher identifies the method as `nvim_exec_lua` and routes it to the corresponding C implementation. This involves decoding the arguments from the request message.",
			"cellName": "Lua Flow: RPC Request Dispatch - gen_api_dispatch.lua:L489-501",
			"cellId": "fff81b0f-701d-42b5-b480-35ba647a110b",
			"visible": true,
			"startLine": 489,
			"endLine": 501,
			"parentCellId": "4b4eb64a-101c-4009-941e-c6f336d94ff0",
			"parentPath": "src/gen/gen_api_dispatch.lua"
		},
		"85a2b631-046a-4d2e-9688-b377359baf28": {
			"path": "85a2b631-046a-4d2e-9688-b377359baf28",
			"fileName": "85a2b631-046a-4d2e-9688-b377359baf28",
			"cellName": "Lua Flow: Core Lua Execution - executor.c:L1539-1570",
			"cellId": "85a2b631-046a-4d2e-9688-b377359baf28",
			"visible": true,
			"parentCellId": "2504cc8a-889d-4471-9d56-2b97a6275447"
		},
		"src/nvim/lua/executor.c-simstep-b4ea1d34-c777-4eef-99a2-055ab46ebae3": {
			"path": "src/nvim/lua/executor.c-simstep-b4ea1d34-c777-4eef-99a2-055ab46ebae3",
			"fileName": "executor.c",
			"wiki": "The `nlua_exec` function compiles the Lua string into a chunk, pushes any arguments onto the Lua stack, and executes it in a protected environment using `nlua_pcall`. The script interacts with the Neovim API and produces a return value.",
			"cellName": "Lua Flow: Core Lua Execution - executor.c:L1539-1570",
			"cellId": "85a2b631-046a-4d2e-9688-b377359baf28",
			"visible": true,
			"startLine": 1539,
			"endLine": 1570,
			"parentCellId": "2504cc8a-889d-4471-9d56-2b97a6275447",
			"parentPath": "src/nvim/lua/executor.c"
		},
		"4fbea5b8-b765-4807-b632-8b786d0a0d70": {
			"path": "4fbea5b8-b765-4807-b632-8b786d0a0d70",
			"fileName": "4fbea5b8-b765-4807-b632-8b786d0a0d70",
			"cellName": "Lua Flow: RPC Response Preparation - channel.c:L52-56",
			"cellId": "4fbea5b8-b765-4807-b632-8b786d0a0d70",
			"visible": true,
			"parentCellId": "043e230c-2dcd-42ad-be8f-d32dd9d140f0"
		},
		"src/nvim/msgpack_rpc/channel.c-simstep-a1524e46-90af-42d0-932d-0409e297ac6a": {
			"path": "src/nvim/msgpack_rpc/channel.c-simstep-a1524e46-90af-42d0-932d-0409e297ac6a",
			"fileName": "channel.c",
			"wiki": "The resulting `Object` is packaged into an RPC response message. This response includes the ID of the original request, ensuring the client can match the response to its request.",
			"cellName": "Lua Flow: RPC Response Preparation - channel.c:L52-56",
			"cellId": "4fbea5b8-b765-4807-b632-8b786d0a0d70",
			"visible": true,
			"startLine": 52,
			"endLine": 56,
			"parentCellId": "043e230c-2dcd-42ad-be8f-d32dd9d140f0",
			"parentPath": "src/nvim/msgpack_rpc/channel.c"
		},
		"46f86789-0248-4b10-bead-693655638e6c": {
			"path": "46f86789-0248-4b10-bead-693655638e6c",
			"fileName": "46f86789-0248-4b10-bead-693655638e6c",
			"cellName": "RPC Flow: Client Subscribes to Buffer Events - buffer.c:L157-165",
			"cellId": "46f86789-0248-4b10-bead-693655638e6c",
			"visible": true,
			"parentCellId": "770e342b-bb36-468b-b859-cbf415542d91"
		},
		"src/nvim/api/buffer.c-simstep-0d69d455-ba83-4959-9cb2-45699a974fd0": {
			"path": "src/nvim/api/buffer.c-simstep-0d69d455-ba83-4959-9cb2-45699a974fd0",
			"fileName": "buffer.c",
			"wiki": "A remote plugin or UI client calls `nvim_buf_attach` to register for notifications about changes to a specific buffer. This allows the client to stay in sync with the buffer's content without constant polling.",
			"cellName": "RPC Flow: Client Subscribes to Buffer Events - buffer.c:L157-165",
			"cellId": "46f86789-0248-4b10-bead-693655638e6c",
			"visible": true,
			"startLine": 157,
			"endLine": 165,
			"parentCellId": "770e342b-bb36-468b-b859-cbf415542d91",
			"parentPath": "src/nvim/api/buffer.c"
		},
		"e426ac26-0c5f-452f-95ef-0bc4d3155e13": {
			"path": "e426ac26-0c5f-452f-95ef-0bc4d3155e13",
			"fileName": "e426ac26-0c5f-452f-95ef-0bc4d3155e13",
			"cellName": "RPC Flow: Channel Registration for Updates - buffer_updates.c:L25-40",
			"cellId": "e426ac26-0c5f-452f-95ef-0bc4d3155e13",
			"visible": true,
			"parentCellId": "1bc9a917-6299-4cd3-89c5-f72aba8a049b"
		},
		"src/nvim/buffer_updates.c-simstep-b658af9c-ebd9-494e-b291-212321993faa": {
			"path": "src/nvim/buffer_updates.c-simstep-b658af9c-ebd9-494e-b291-212321993faa",
			"fileName": "buffer_updates.c",
			"wiki": "Neovim's `nvim_buf_attach` implementation calls `buf_updates_register`, which adds the client's unique `channel_id` to an internal list of subscribers for that buffer. Neovim now knows to forward changes for this buffer to this client.",
			"cellName": "RPC Flow: Channel Registration for Updates - buffer_updates.c:L25-40",
			"cellId": "e426ac26-0c5f-452f-95ef-0bc4d3155e13",
			"visible": true,
			"startLine": 25,
			"endLine": 40,
			"parentCellId": "1bc9a917-6299-4cd3-89c5-f72aba8a049b",
			"parentPath": "src/nvim/buffer_updates.c"
		},
		"5dc1c1a8-b187-4f36-b145-1ff67f3f0491": {
			"path": "5dc1c1a8-b187-4f36-b145-1ff67f3f0491",
			"fileName": "5dc1c1a8-b187-4f36-b145-1ff67f3f0491",
			"cellName": "RPC Flow: Notification Message Creation - channel.c:L111-119",
			"cellId": "5dc1c1a8-b187-4f36-b145-1ff67f3f0491",
			"visible": true,
			"parentCellId": "043e230c-2dcd-42ad-be8f-d32dd9d140f0"
		},
		"src/nvim/msgpack_rpc/channel.c-simstep-ca2f44d1-d6e3-466d-89eb-002ddce8c542": {
			"path": "src/nvim/msgpack_rpc/channel.c-simstep-ca2f44d1-d6e3-466d-89eb-002ddce8c542",
			"fileName": "channel.c",
			"wiki": "For each subscribed channel, the `rpc_send_event` function is invoked. It constructs a MessagePack-RPC notification message (type 2) containing the event name (`nvim_buf_lines_event`) and detailed parameters about the buffer change.",
			"cellName": "RPC Flow: Notification Message Creation - channel.c:L111-119",
			"cellId": "5dc1c1a8-b187-4f36-b145-1ff67f3f0491",
			"visible": true,
			"startLine": 111,
			"endLine": 119,
			"parentCellId": "043e230c-2dcd-42ad-be8f-d32dd9d140f0",
			"parentPath": "src/nvim/msgpack_rpc/channel.c"
		},
		"482a08e2-311f-426b-966a-80fe2545beec": {
			"path": "482a08e2-311f-426b-966a-80fe2545beec",
			"fileName": "482a08e2-311f-426b-966a-80fe2545beec",
			"cellName": "RPC Flow: Client Processes Event - events.c:L32-48",
			"cellId": "482a08e2-311f-426b-966a-80fe2545beec",
			"visible": true,
			"parentCellId": "ffc21c72-aa11-4a85-829b-250f0719530b"
		},
		"src/nvim/api/events.c-simstep-b29b725a-05a6-4330-b933-4b5840467ce4": {
			"path": "src/nvim/api/events.c-simstep-b29b725a-05a6-4330-b933-4b5840467ce4",
			"fileName": "events.c",
			"wiki": "The remote client receives the `nvim_buf_lines_event` notification. It deserializes the message and uses the provided data to update its own state or UI, reflecting the change made within Neovim.",
			"cellName": "RPC Flow: Client Processes Event - events.c:L32-48",
			"cellId": "482a08e2-311f-426b-966a-80fe2545beec",
			"visible": true,
			"startLine": 32,
			"endLine": 48,
			"parentCellId": "ffc21c72-aa11-4a85-829b-250f0719530b",
			"parentPath": "src/nvim/api/events.c"
		},
		"c4370b54-f066-4dd4-b415-a34ea80dece1": {
			"path": "c4370b54-f066-4dd4-b415-a34ea80dece1",
			"fileName": "c4370b54-f066-4dd4-b415-a34ea80dece1",
			"cellName": "Lua Flow:\nRPC Request\nTransmission",
			"cellId": "c4370b54-f066-4dd4-b415-a34ea80dece1",
			"visible": true,
			"parentCellId": "d6a60112-6bc4-4474-8997-f4458fcc3328"
		},
		"generated-edge-simstep-6edc8b6c-ad0d-4b49-9d4f-ff2a5541fc12-c4370b54-f066-4dd4-b415-a34ea80dece1": {
			"path": "generated-edge-simstep-6edc8b6c-ad0d-4b49-9d4f-ff2a5541fc12-c4370b54-f066-4dd4-b415-a34ea80dece1",
			"fileName": "vim.c",
			"cellName": "Lua Flow: RPC Request Transmission",
			"cellId": "c4370b54-f066-4dd4-b415-a34ea80dece1",
			"visible": true,
			"startLine": 43,
			"endLine": 65,
			"parentPath": "src/nvim/api/vim.c"
		},
		"18624e15-0ced-41b9-95df-80fc52ad2372": {
			"path": "18624e15-0ced-41b9-95df-80fc52ad2372",
			"fileName": "18624e15-0ced-41b9-95df-80fc52ad2372",
			"cellName": "Lua Flow:\nInvocation of\nLua Executor",
			"cellId": "18624e15-0ced-41b9-95df-80fc52ad2372",
			"visible": true,
			"parentCellId": "d6a60112-6bc4-4474-8997-f4458fcc3328"
		},
		"generated-edge-simstep-25537fc1-ca1f-4165-ab60-a95291896749-18624e15-0ced-41b9-95df-80fc52ad2372": {
			"path": "generated-edge-simstep-25537fc1-ca1f-4165-ab60-a95291896749-18624e15-0ced-41b9-95df-80fc52ad2372",
			"fileName": "gen_api_dispatch.lua",
			"cellName": "Lua Flow: Invocation of Lua Executor",
			"cellId": "18624e15-0ced-41b9-95df-80fc52ad2372",
			"visible": true,
			"startLine": 512,
			"endLine": 513,
			"parentPath": "src/gen/gen_api_dispatch.lua"
		},
		"b1fd5e98-d66d-4c75-9d33-f83579123e5f": {
			"path": "b1fd5e98-d66d-4c75-9d33-f83579123e5f",
			"fileName": "b1fd5e98-d66d-4c75-9d33-f83579123e5f",
			"cellName": "Lua Flow:\nResult Conversion",
			"cellId": "b1fd5e98-d66d-4c75-9d33-f83579123e5f",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245"
		},
		"generated-edge-simstep-60ab6c21-5fbe-4b3f-827c-ba58ef4822a8-b1fd5e98-d66d-4c75-9d33-f83579123e5f": {
			"path": "generated-edge-simstep-60ab6c21-5fbe-4b3f-827c-ba58ef4822a8-b1fd5e98-d66d-4c75-9d33-f83579123e5f",
			"fileName": "executor.c",
			"cellName": "Lua Flow: Result Conversion",
			"cellId": "b1fd5e98-d66d-4c75-9d33-f83579123e5f",
			"visible": true,
			"startLine": 1570,
			"endLine": 1570,
			"parentPath": "src/nvim/lua/executor.c"
		},
		"bf182636-f4f4-4bfb-a7a4-554cc41c8581": {
			"path": "bf182636-f4f4-4bfb-a7a4-554cc41c8581",
			"fileName": "bf182636-f4f4-4bfb-a7a4-554cc41c8581",
			"cellName": "Lua Flow:\nRPC Response\nto Client",
			"cellId": "bf182636-f4f4-4bfb-a7a4-554cc41c8581",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245"
		},
		"generated-edge-simstep-380198f0-45b1-4d1a-8c80-0009eebec9f3-bf182636-f4f4-4bfb-a7a4-554cc41c8581": {
			"path": "generated-edge-simstep-380198f0-45b1-4d1a-8c80-0009eebec9f3-bf182636-f4f4-4bfb-a7a4-554cc41c8581",
			"fileName": "channel.c",
			"cellName": "Lua Flow: RPC Response to Client",
			"cellId": "bf182636-f4f4-4bfb-a7a4-554cc41c8581",
			"visible": true,
			"startLine": 111,
			"endLine": 121,
			"parentPath": "src/nvim/msgpack_rpc/channel.c"
		},
		"c04837e6-8337-4bea-8515-40e0a03f4142": {
			"path": "c04837e6-8337-4bea-8515-40e0a03f4142",
			"fileName": "c04837e6-8337-4bea-8515-40e0a03f4142",
			"cellName": "RPC Flow:\nRPC Request\nfor Subscription",
			"cellId": "c04837e6-8337-4bea-8515-40e0a03f4142",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245"
		},
		"generated-edge-simstep-6d5e5c2b-9cfb-4004-b761-37a44ad6d3ba-c04837e6-8337-4bea-8515-40e0a03f4142": {
			"path": "generated-edge-simstep-6d5e5c2b-9cfb-4004-b761-37a44ad6d3ba-c04837e6-8337-4bea-8515-40e0a03f4142",
			"fileName": "buffer.c",
			"cellName": "RPC Flow: RPC Request for Subscription",
			"cellId": "c04837e6-8337-4bea-8515-40e0a03f4142",
			"visible": true,
			"startLine": 43,
			"endLine": 65,
			"parentPath": "src/nvim/api/buffer.c"
		},
		"a94f68c5-32d9-43da-905d-bc6447da521c": {
			"path": "a94f68c5-32d9-43da-905d-bc6447da521c",
			"fileName": "a94f68c5-32d9-43da-905d-bc6447da521c",
			"cellName": "RPC Flow:\nBuffer Change\nEvent Triggered",
			"cellId": "a94f68c5-32d9-43da-905d-bc6447da521c",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245"
		},
		"generated-edge-simstep-adcaaaaa-777b-45f5-b480-33caf014d0cb-a94f68c5-32d9-43da-905d-bc6447da521c": {
			"path": "generated-edge-simstep-adcaaaaa-777b-45f5-b480-33caf014d0cb-a94f68c5-32d9-43da-905d-bc6447da521c",
			"fileName": "buffer_updates.c",
			"cellName": "RPC Flow: Buffer Change Event Triggered",
			"cellId": "a94f68c5-32d9-43da-905d-bc6447da521c",
			"visible": true,
			"startLine": 242,
			"endLine": 250,
			"parentPath": "src/nvim/buffer_updates.c"
		},
		"59aeeb9e-643a-4601-8a22-39c6e11be803": {
			"path": "59aeeb9e-643a-4601-8a22-39c6e11be803",
			"fileName": "59aeeb9e-643a-4601-8a22-39c6e11be803",
			"cellName": "RPC Flow:\nNotification Transmitted\nto Client",
			"cellId": "59aeeb9e-643a-4601-8a22-39c6e11be803",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245"
		},
		"generated-edge-simstep-bec04672-ed73-4355-b5f1-9d50d4645de4-59aeeb9e-643a-4601-8a22-39c6e11be803": {
			"path": "generated-edge-simstep-bec04672-ed73-4355-b5f1-9d50d4645de4-59aeeb9e-643a-4601-8a22-39c6e11be803",
			"fileName": "channel.c",
			"cellName": "RPC Flow: Notification Transmitted to Client",
			"cellId": "59aeeb9e-643a-4601-8a22-39c6e11be803",
			"visible": true,
			"startLine": 111,
			"endLine": 121,
			"parentPath": "src/nvim/msgpack_rpc/channel.c"
		},
		"d70166f9-1da5-433d-884b-384ff4d58776": {
			"path": "d70166f9-1da5-433d-884b-384ff4d58776",
			"fileName": "d70166f9-1da5-433d-884b-384ff4d58776",
			"cellName": "drawscreen.c",
			"cellId": "d70166f9-1da5-433d-884b-384ff4d58776",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245"
		},
		"542a18b2-cf80-43f4-925a-89bb18c92962": {
			"path": "542a18b2-cf80-43f4-925a-89bb18c92962",
			"fileName": "542a18b2-cf80-43f4-925a-89bb18c92962",
			"cellName": "treesitter.lua",
			"cellId": "542a18b2-cf80-43f4-925a-89bb18c92962",
			"visible": true,
			"parentCellId": "c851f0f3-ad8b-4337-b109-5813415e3dd0"
		},
		"803fa254-ad17-4d23-add4-b6ebfc965164": {
			"path": "803fa254-ad17-4d23-add4-b6ebfc965164",
			"fileName": "803fa254-ad17-4d23-add4-b6ebfc965164",
			"cellName": "treesitter",
			"cellId": "803fa254-ad17-4d23-add4-b6ebfc965164",
			"visible": true,
			"parentCellId": "c851f0f3-ad8b-4337-b109-5813415e3dd0"
		},
		"cc9f7eb2-fe91-4acf-984b-22486f94d4f1": {
			"path": "cc9f7eb2-fe91-4acf-984b-22486f94d4f1",
			"fileName": "cc9f7eb2-fe91-4acf-984b-22486f94d4f1",
			"cellName": "highlighter.lua",
			"cellId": "cc9f7eb2-fe91-4acf-984b-22486f94d4f1",
			"visible": true,
			"parentCellId": "803fa254-ad17-4d23-add4-b6ebfc965164"
		},
		"7aa38225-a4b8-4f1d-9141-12e9852e4e34": {
			"path": "7aa38225-a4b8-4f1d-9141-12e9852e4e34",
			"fileName": "7aa38225-a4b8-4f1d-9141-12e9852e4e34",
			"cellName": "Initiate Tree-sitter Highlighting - treesitter.lua:L448-459",
			"cellId": "7aa38225-a4b8-4f1d-9141-12e9852e4e34",
			"visible": true,
			"parentCellId": "542a18b2-cf80-43f4-925a-89bb18c92962"
		},
		"runtime/lua/vim/treesitter.lua-simstep-2ce887f3-1c98-4e7c-86ca-933fcc495bde": {
			"path": "runtime/lua/vim/treesitter.lua-simstep-2ce887f3-1c98-4e7c-86ca-933fcc495bde",
			"fileName": "treesitter.lua",
			"wiki": "A user or a filetype plugin triggers Tree-sitter highlighting for a specific buffer, typically by calling `vim.treesitter.start()`. This function serves as the main entry point to activate the Tree-sitter engine for the specified buffer and language.",
			"cellName": "Initiate Tree-sitter Highlighting - treesitter.lua:L448-459",
			"cellId": "7aa38225-a4b8-4f1d-9141-12e9852e4e34",
			"visible": true,
			"startLine": 448,
			"endLine": 459,
			"parentCellId": "542a18b2-cf80-43f4-925a-89bb18c92962",
			"parentPath": "runtime/lua/vim/treesitter.lua"
		},
		"93970937-dacb-4c62-9725-9ad01d11a22b": {
			"path": "93970937-dacb-4c62-9725-9ad01d11a22b",
			"fileName": "93970937-dacb-4c62-9725-9ad01d11a22b",
			"cellName": "Get or Create Parser - treesitter.lua:L79-110",
			"cellId": "93970937-dacb-4c62-9725-9ad01d11a22b",
			"visible": true,
			"parentCellId": "542a18b2-cf80-43f4-925a-89bb18c92962"
		},
		"runtime/lua/vim/treesitter.lua-simstep-b106e0a3-768d-4282-9ec6-deb881ed3a1f": {
			"path": "runtime/lua/vim/treesitter.lua-simstep-b106e0a3-768d-4282-9ec6-deb881ed3a1f",
			"fileName": "treesitter.lua",
			"wiki": "`get_parser` checks if a parser for the given buffer already exists in a cache. If not, it creates a new `LanguageTree` object, which involves finding and loading the compiled parser library (e.g., a `.so` or `.wasm` file) for the requested language from the runtime path.",
			"cellName": "Get or Create Parser - treesitter.lua:L79-110",
			"cellId": "93970937-dacb-4c62-9725-9ad01d11a22b",
			"visible": true,
			"startLine": 79,
			"endLine": 110,
			"parentCellId": "542a18b2-cf80-43f4-925a-89bb18c92962",
			"parentPath": "runtime/lua/vim/treesitter.lua"
		},
		"faf022ed-202f-4486-a745-9879dddddd64": {
			"path": "faf022ed-202f-4486-a745-9879dddddd64",
			"fileName": "faf022ed-202f-4486-a745-9879dddddd64",
			"cellName": "Create Highlighter - treesitter.lua:L458",
			"cellId": "faf022ed-202f-4486-a745-9879dddddd64",
			"visible": true,
			"parentCellId": "542a18b2-cf80-43f4-925a-89bb18c92962"
		},
		"runtime/lua/vim/treesitter.lua-simstep-a3288e50-6bde-43b0-bc27-3c65c895f56b": {
			"path": "runtime/lua/vim/treesitter.lua-simstep-a3288e50-6bde-43b0-bc27-3c65c895f56b",
			"fileName": "treesitter.lua",
			"wiki": "Back in the `start` function, a new highlighter object is instantiated using the acquired parser. This object will manage the highlighting process.",
			"cellName": "Create Highlighter - treesitter.lua:L458",
			"cellId": "faf022ed-202f-4486-a745-9879dddddd64",
			"visible": true,
			"startLine": 458,
			"endLine": 458,
			"parentCellId": "542a18b2-cf80-43f4-925a-89bb18c92962",
			"parentPath": "runtime/lua/vim/treesitter.lua"
		},
		"4557371b-3e9f-4a57-964a-a28fd8585a02": {
			"path": "4557371b-3e9f-4a57-964a-a28fd8585a02",
			"fileName": "4557371b-3e9f-4a57-964a-a28fd8585a02",
			"cellName": "Load Highlighting Query - highlighter.lua:L270-279",
			"cellId": "4557371b-3e9f-4a57-964a-a28fd8585a02",
			"visible": true,
			"parentCellId": "cc9f7eb2-fe91-4acf-984b-22486f94d4f1"
		},
		"runtime/lua/vim/treesitter/highlighter.lua-simstep-337810a2-50ef-4efc-b86b-493e5700c80f": {
			"path": "runtime/lua/vim/treesitter/highlighter.lua-simstep-337810a2-50ef-4efc-b86b-493e5700c80f",
			"fileName": "highlighter.lua",
			"wiki": "When highlighting is needed (e.g., on a redraw), the highlighter fetches the corresponding query file (e.g., `highlights.scm`) for the language. This is done via `vim.treesitter.query.get`, which reads the file and parses it into a query object.",
			"cellName": "Load Highlighting Query - highlighter.lua:L270-279",
			"cellId": "4557371b-3e9f-4a57-964a-a28fd8585a02",
			"visible": true,
			"startLine": 270,
			"endLine": 279,
			"parentCellId": "cc9f7eb2-fe91-4acf-984b-22486f94d4f1",
			"parentPath": "runtime/lua/vim/treesitter/highlighter.lua"
		},
		"976474cd-262a-4313-a059-c0248bc26b98": {
			"path": "976474cd-262a-4313-a059-c0248bc26b98",
			"fileName": "976474cd-262a-4313-a059-c0248bc26b98",
			"cellName": "Parse Buffer and Iterate Captures - highlighter.lua:L390-407",
			"cellId": "976474cd-262a-4313-a059-c0248bc26b98",
			"visible": true,
			"parentCellId": "cc9f7eb2-fe91-4acf-984b-22486f94d4f1"
		},
		"runtime/lua/vim/treesitter/highlighter.lua-simstep-7d7d67ad-119f-499e-9186-2a977659976b": {
			"path": "runtime/lua/vim/treesitter/highlighter.lua-simstep-7d7d67ad-119f-499e-9186-2a977659976b",
			"fileName": "highlighter.lua",
			"wiki": "Triggered by a redraw event, the decoration provider invokes the highlighter. The highlighter first ensures the buffer is parsed, creating a syntax tree. It then uses the loaded query to iterate over all matching nodes (captures) in the tree within the visible range.",
			"cellName": "Parse Buffer and Iterate Captures - highlighter.lua:L390-407",
			"cellId": "976474cd-262a-4313-a059-c0248bc26b98",
			"visible": true,
			"startLine": 390,
			"endLine": 407,
			"parentCellId": "cc9f7eb2-fe91-4acf-984b-22486f94d4f1",
			"parentPath": "runtime/lua/vim/treesitter/highlighter.lua"
		},
		"a743a49c-b55c-4563-ad38-b2b69b47642e": {
			"path": "a743a49c-b55c-4563-ad38-b2b69b47642e",
			"fileName": "a743a49c-b55c-4563-ad38-b2b69b47642e",
			"cellName": "UI Renders Highlights - drawscreen.c:L1",
			"cellId": "a743a49c-b55c-4563-ad38-b2b69b47642e",
			"visible": true,
			"parentCellId": "d70166f9-1da5-433d-884b-384ff4d58776"
		},
		"src/nvim/drawscreen.c-simstep-34f99a2f-a13a-4e89-a5d8-c7e64326c236": {
			"path": "src/nvim/drawscreen.c-simstep-34f99a2f-a13a-4e89-a5d8-c7e64326c236",
			"fileName": "drawscreen.c",
			"wiki": "Neovim's UI compositor processes the extmarks set by the highlighter. It retrieves the styling information for each highlight group (e.g., 'Type' is blue) and renders the text with the appropriate colors and attributes in the user's terminal or GUI.",
			"cellName": "UI Renders Highlights - drawscreen.c:L1",
			"cellId": "a743a49c-b55c-4563-ad38-b2b69b47642e",
			"visible": true,
			"startLine": 1,
			"endLine": 1,
			"parentCellId": "d70166f9-1da5-433d-884b-384ff4d58776",
			"parentPath": "src/nvim/drawscreen.c"
		},
		"6b5b5667-53fe-46bd-a0c8-113bd6acf036": {
			"path": "6b5b5667-53fe-46bd-a0c8-113bd6acf036",
			"fileName": "6b5b5667-53fe-46bd-a0c8-113bd6acf036",
			"cellName": "Request Parser",
			"cellId": "6b5b5667-53fe-46bd-a0c8-113bd6acf036",
			"visible": true,
			"parentCellId": "542a18b2-cf80-43f4-925a-89bb18c92962"
		},
		"generated-edge-simstep-5dba9709-8b53-4522-a226-1255977972e2-6b5b5667-53fe-46bd-a0c8-113bd6acf036": {
			"path": "generated-edge-simstep-5dba9709-8b53-4522-a226-1255977972e2-6b5b5667-53fe-46bd-a0c8-113bd6acf036",
			"fileName": "treesitter.lua",
			"cellName": "Request Parser",
			"cellId": "6b5b5667-53fe-46bd-a0c8-113bd6acf036",
			"visible": true,
			"startLine": 457,
			"endLine": 457,
			"parentPath": "runtime/lua/vim/treesitter.lua"
		},
		"c982b52f-3fbc-4b47-9bf1-7ca1b1bae9be": {
			"path": "c982b52f-3fbc-4b47-9bf1-7ca1b1bae9be",
			"fileName": "c982b52f-3fbc-4b47-9bf1-7ca1b1bae9be",
			"cellName": "Return Parser\nObject",
			"cellId": "c982b52f-3fbc-4b47-9bf1-7ca1b1bae9be",
			"visible": true,
			"parentCellId": "542a18b2-cf80-43f4-925a-89bb18c92962"
		},
		"generated-edge-simstep-530b9af3-8047-4f6c-91e5-701c96342342-c982b52f-3fbc-4b47-9bf1-7ca1b1bae9be": {
			"path": "generated-edge-simstep-530b9af3-8047-4f6c-91e5-701c96342342-c982b52f-3fbc-4b47-9bf1-7ca1b1bae9be",
			"fileName": "treesitter.lua",
			"cellName": "Return Parser Object",
			"cellId": "c982b52f-3fbc-4b47-9bf1-7ca1b1bae9be",
			"visible": true,
			"startLine": 109,
			"endLine": 109,
			"parentPath": "runtime/lua/vim/treesitter.lua"
		},
		"e3d6dd51-b944-4735-8529-14e3983629fc": {
			"path": "e3d6dd51-b944-4735-8529-14e3983629fc",
			"fileName": "e3d6dd51-b944-4735-8529-14e3983629fc",
			"cellName": "Initialize Highlighter\nState",
			"cellId": "e3d6dd51-b944-4735-8529-14e3983629fc",
			"visible": true,
			"parentCellId": "c851f0f3-ad8b-4337-b109-5813415e3dd0"
		},
		"generated-edge-simstep-e6ebf4a4-da88-40bf-b8de-f0c56ef6348e-e3d6dd51-b944-4735-8529-14e3983629fc": {
			"path": "generated-edge-simstep-e6ebf4a4-da88-40bf-b8de-f0c56ef6348e-e3d6dd51-b944-4735-8529-14e3983629fc",
			"fileName": "treesitter.lua",
			"cellName": "Initialize Highlighter State",
			"cellId": "e3d6dd51-b944-4735-8529-14e3983629fc",
			"visible": true,
			"startLine": 82,
			"endLine": 95,
			"parentPath": "runtime/lua/vim/treesitter.lua"
		},
		"88fd2a96-8449-40d8-a0d0-316a2165218a": {
			"path": "88fd2a96-8449-40d8-a0d0-316a2165218a",
			"fileName": "88fd2a96-8449-40d8-a0d0-316a2165218a",
			"cellName": "Return Parsed\nQuery",
			"cellId": "88fd2a96-8449-40d8-a0d0-316a2165218a",
			"visible": true,
			"parentCellId": "cc9f7eb2-fe91-4acf-984b-22486f94d4f1"
		},
		"generated-edge-simstep-98d1a2a4-a75c-4e5e-b766-25dedda3d53b-88fd2a96-8449-40d8-a0d0-316a2165218a": {
			"path": "generated-edge-simstep-98d1a2a4-a75c-4e5e-b766-25dedda3d53b-88fd2a96-8449-40d8-a0d0-316a2165218a",
			"fileName": "highlighter.lua",
			"cellName": "Return Parsed Query",
			"cellId": "88fd2a96-8449-40d8-a0d0-316a2165218a",
			"visible": true,
			"startLine": 23,
			"endLine": 23,
			"parentPath": "runtime/lua/vim/treesitter/highlighter.lua"
		},
		"4cb73b91-a5c3-4c64-b0f0-fe8eba752b22": {
			"path": "4cb73b91-a5c3-4c64-b0f0-fe8eba752b22",
			"fileName": "4cb73b91-a5c3-4c64-b0f0-fe8eba752b22",
			"cellName": "Apply Highlight\nExtmark",
			"cellId": "4cb73b91-a5c3-4c64-b0f0-fe8eba752b22",
			"visible": true
		},
		"generated-edge-simstep-bc86d8cf-ccf7-4600-a925-84771a4a0ee3-4cb73b91-a5c3-4c64-b0f0-fe8eba752b22": {
			"path": "generated-edge-simstep-bc86d8cf-ccf7-4600-a925-84771a4a0ee3-4cb73b91-a5c3-4c64-b0f0-fe8eba752b22",
			"fileName": "highlighter.lua",
			"cellName": "Apply Highlight Extmark",
			"cellId": "4cb73b91-a5c3-4c64-b0f0-fe8eba752b22",
			"visible": true,
			"startLine": 446,
			"endLine": 459,
			"parentPath": "runtime/lua/vim/treesitter/highlighter.lua"
		},
		"8578861f-8170-4a8a-9974-0142b8687f15": {
			"path": "8578861f-8170-4a8a-9974-0142b8687f15",
			"fileName": "8578861f-8170-4a8a-9974-0142b8687f15",
			"cellName": "ui_client.c",
			"cellId": "8578861f-8170-4a8a-9974-0142b8687f15",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245"
		},
		"763b600d-b62e-4a11-b879-9e4529d1d127": {
			"path": "763b600d-b62e-4a11-b879-9e4529d1d127",
			"fileName": "763b600d-b62e-4a11-b879-9e4529d1d127",
			"cellName": "tui",
			"cellId": "763b600d-b62e-4a11-b879-9e4529d1d127",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245"
		},
		"75816457-6537-45f4-9f6f-b99311adeb07": {
			"path": "75816457-6537-45f4-9f6f-b99311adeb07",
			"fileName": "75816457-6537-45f4-9f6f-b99311adeb07",
			"cellName": "ui.c",
			"cellId": "75816457-6537-45f4-9f6f-b99311adeb07",
			"visible": true,
			"parentCellId": "4030d70f-0fed-4a0f-8778-d844f56b88f7"
		},
		"1c885fa8-a209-4898-99d8-421d28e73253": {
			"path": "1c885fa8-a209-4898-99d8-421d28e73253",
			"fileName": "1c885fa8-a209-4898-99d8-421d28e73253",
			"cellName": "unpacker.c",
			"cellId": "1c885fa8-a209-4898-99d8-421d28e73253",
			"visible": true,
			"parentCellId": "4926e922-21e0-43d4-99c5-888a53fd1496"
		},
		"acb15131-a0a0-4b55-8a5c-74da55812314": {
			"path": "acb15131-a0a0-4b55-8a5c-74da55812314",
			"fileName": "acb15131-a0a0-4b55-8a5c-74da55812314",
			"cellName": "tui.c",
			"cellId": "acb15131-a0a0-4b55-8a5c-74da55812314",
			"visible": true,
			"parentCellId": "763b600d-b62e-4a11-b879-9e4529d1d127"
		},
		"eb988e14-0f6e-4a6c-b3a0-20009c1358bb": {
			"path": "eb988e14-0f6e-4a6c-b3a0-20009c1358bb",
			"fileName": "eb988e14-0f6e-4a6c-b3a0-20009c1358bb",
			"cellName": "input.c",
			"cellId": "eb988e14-0f6e-4a6c-b3a0-20009c1358bb",
			"visible": true,
			"parentCellId": "763b600d-b62e-4a11-b879-9e4529d1d127"
		},
		"d2058d49-5713-40ad-aa79-7f0a87d825e7": {
			"path": "d2058d49-5713-40ad-aa79-7f0a87d825e7",
			"fileName": "d2058d49-5713-40ad-aa79-7f0a87d825e7",
			"cellName": "TUI Startup: Main Entry Point - main.c:L336-344",
			"cellId": "d2058d49-5713-40ad-aa79-7f0a87d825e7",
			"visible": true,
			"parentCellId": "daae3417-8258-49a6-a129-53b01c2aaa30"
		},
		"src/nvim/main.c-simstep-bd547437-aeee-4b1b-a24a-91af1ee23455": {
			"path": "src/nvim/main.c-simstep-bd547437-aeee-4b1b-a24a-91af1ee23455",
			"fileName": "main.c",
			"wiki": "Neovim is launched from the command line. The `main` function determines that a built-in Terminal UI (TUI) is needed. It prepares to launch a separate Neovim server process that the TUI will connect to.",
			"cellName": "TUI Startup: Main Entry Point - main.c:L336-344",
			"cellId": "d2058d49-5713-40ad-aa79-7f0a87d825e7",
			"visible": true,
			"startLine": 336,
			"endLine": 344,
			"parentCellId": "daae3417-8258-49a6-a129-53b01c2aaa30",
			"parentPath": "src/nvim/main.c"
		},
		"739cc0c2-efa4-4397-b7a6-0cf371bac1a9": {
			"path": "739cc0c2-efa4-4397-b7a6-0cf371bac1a9",
			"fileName": "739cc0c2-efa4-4397-b7a6-0cf371bac1a9",
			"cellName": "TUI Client Initialization - ui_client.c:L163-166",
			"cellId": "739cc0c2-efa4-4397-b7a6-0cf371bac1a9",
			"visible": true,
			"parentCellId": "8578861f-8170-4a8a-9974-0142b8687f15"
		},
		"src/nvim/ui_client.c-simstep-f51d4fdd-ccd9-485e-8d82-a073f5e2ee79": {
			"path": "src/nvim/ui_client.c-simstep-f51d4fdd-ccd9-485e-8d82-a073f5e2ee79",
			"fileName": "ui_client.c",
			"wiki": "The original process, now designated as the UI client, enters its main run loop. It initializes the terminal by calling `tui_start` to set up terminal attributes and screen size, then prepares to attach to the server.",
			"cellName": "TUI Client Initialization - ui_client.c:L163-166",
			"cellId": "739cc0c2-efa4-4397-b7a6-0cf371bac1a9",
			"visible": true,
			"startLine": 163,
			"endLine": 166,
			"parentCellId": "8578861f-8170-4a8a-9974-0142b8687f15",
			"parentPath": "src/nvim/ui_client.c"
		},
		"064b054f-eb44-46f6-bb51-d2c517892272": {
			"path": "064b054f-eb44-46f6-bb51-d2c517892272",
			"fileName": "064b054f-eb44-46f6-bb51-d2c517892272",
			"cellName": "Server Receives Attach Request - ui.c:L156-177",
			"cellId": "064b054f-eb44-46f6-bb51-d2c517892272",
			"visible": true,
			"parentCellId": "75816457-6537-45f4-9f6f-b99311adeb07"
		},
		"src/nvim/api/ui.c-simstep-af3845c8-ab94-4da5-b1e7-04372753c599": {
			"path": "src/nvim/api/ui.c-simstep-af3845c8-ab94-4da5-b1e7-04372753c599",
			"fileName": "ui.c",
			"wiki": "The Neovim server receives the `nvim_ui_attach` call. It registers the client channel as an active UI, adjusts its internal grid size to match the client's dimensions, and unblocks its own startup sequence, allowing it to load user configurations and files.",
			"cellName": "Server Receives Attach Request - ui.c:L156-177",
			"cellId": "064b054f-eb44-46f6-bb51-d2c517892272",
			"visible": true,
			"startLine": 156,
			"endLine": 177,
			"parentCellId": "75816457-6537-45f4-9f6f-b99311adeb07",
			"parentPath": "src/nvim/api/ui.c"
		},
		"637d4bcb-6409-494b-a9b0-57d561789aa6": {
			"path": "637d4bcb-6409-494b-a9b0-57d561789aa6",
			"fileName": "637d4bcb-6409-494b-a9b0-57d561789aa6",
			"cellName": "Client Receives and Dispatches Redraw Events - unpacker.c:L418-426",
			"cellId": "637d4bcb-6409-494b-a9b0-57d561789aa6",
			"visible": true,
			"parentCellId": "1c885fa8-a209-4898-99d8-421d28e73253"
		},
		"src/nvim/msgpack_rpc/unpacker.c-simstep-29d0f4f4-e4c6-4dba-b7d4-d1f45c37a1da": {
			"path": "src/nvim/msgpack_rpc/unpacker.c-simstep-29d0f4f4-e4c6-4dba-b7d4-d1f45c37a1da",
			"fileName": "unpacker.c",
			"wiki": "The client's RPC layer receives the 'redraw' events. The msgpack unpacker has an optimized path to parse these events and efficiently look up the corresponding handler function (e.g., `ui_client_event_grid_resize`) using a pre-generated hash table.",
			"cellName": "Client Receives and Dispatches Redraw Events - unpacker.c:L418-426",
			"cellId": "637d4bcb-6409-494b-a9b0-57d561789aa6",
			"visible": true,
			"startLine": 418,
			"endLine": 426,
			"parentCellId": "1c885fa8-a209-4898-99d8-421d28e73253",
			"parentPath": "src/nvim/msgpack_rpc/unpacker.c"
		},
		"3caca7f9-b3a0-40c6-b966-caf1225e1b63": {
			"path": "3caca7f9-b3a0-40c6-b966-caf1225e1b63",
			"fileName": "3caca7f9-b3a0-40c6-b966-caf1225e1b63",
			"cellName": "TUI Renders the Screen - tui.c:L921-936",
			"cellId": "3caca7f9-b3a0-40c6-b966-caf1225e1b63",
			"visible": true,
			"parentCellId": "acb15131-a0a0-4b55-8a5c-74da55812314"
		},
		"src/nvim/tui/tui.c-simstep-ceb51e25-a97d-4cd8-ab64-1a5c96cdf406": {
			"path": "src/nvim/tui/tui.c-simstep-ceb51e25-a97d-4cd8-ab64-1a5c96cdf406",
			"fileName": "tui.c",
			"wiki": "The `tui.c` rendering function uses the terminfo database to generate and write the correct control sequences (escape codes) to stdout, which moves the cursor, changes colors, and prints characters to the terminal, updating what the user sees.",
			"cellName": "TUI Renders the Screen - tui.c:L921-936",
			"cellId": "3caca7f9-b3a0-40c6-b966-caf1225e1b63",
			"visible": true,
			"startLine": 921,
			"endLine": 936,
			"parentCellId": "acb15131-a0a0-4b55-8a5c-74da55812314",
			"parentPath": "src/nvim/tui/tui.c"
		},
		"80844e97-be3f-47e7-a830-5577cffe4fd8": {
			"path": "80844e97-be3f-47e7-a830-5577cffe4fd8",
			"fileName": "80844e97-be3f-47e7-a830-5577cffe4fd8",
			"cellName": "User Provides Input - input.c:L39-50",
			"cellId": "80844e97-be3f-47e7-a830-5577cffe4fd8",
			"visible": true,
			"parentCellId": "eb988e14-0f6e-4a6c-b3a0-20009c1358bb"
		},
		"src/nvim/tui/input.c-simstep-e7e73eee-1300-4377-b62b-1c992d2960ec": {
			"path": "src/nvim/tui/input.c-simstep-e7e73eee-1300-4377-b62b-1c992d2960ec",
			"fileName": "input.c",
			"wiki": "The TUI input loop continuously reads from stdin. It parses terminal escape sequences to recognize special keys (like arrow keys or function keys) and UTF-8 characters.",
			"cellName": "User Provides Input - input.c:L39-50",
			"cellId": "80844e97-be3f-47e7-a830-5577cffe4fd8",
			"visible": true,
			"startLine": 39,
			"endLine": 50,
			"parentCellId": "eb988e14-0f6e-4a6c-b3a0-20009c1358bb",
			"parentPath": "src/nvim/tui/input.c"
		},
		"fe447fc0-f2c4-4a83-a198-c416b698f099": {
			"path": "fe447fc0-f2c4-4a83-a198-c416b698f099",
			"fileName": "fe447fc0-f2c4-4a83-a198-c416b698f099",
			"cellName": "Server Processes Input and Updates State - normal.c:L525-532",
			"cellId": "fe447fc0-f2c4-4a83-a198-c416b698f099",
			"visible": true,
			"parentCellId": "518c0162-31c6-4815-b119-eaa40b16f756"
		},
		"src/nvim/normal.c-simstep-42cde6a0-47ec-4b89-9ec0-8d82e2532167": {
			"path": "src/nvim/normal.c-simstep-42cde6a0-47ec-4b89-9ec0-8d82e2532167",
			"fileName": "normal.c",
			"wiki": "The Neovim server receives the `nvim_input` call. The input is fed into the editor's state machine, which executes the corresponding action (e.g., inserting a character, moving the cursor). This change in state invalidates parts of the screen, queuing up a new redraw cycle.",
			"cellName": "Server Processes Input and Updates State - normal.c:L525-532",
			"cellId": "fe447fc0-f2c4-4a83-a198-c416b698f099",
			"visible": true,
			"startLine": 525,
			"endLine": 532,
			"parentCellId": "518c0162-31c6-4815-b119-eaa40b16f756",
			"parentPath": "src/nvim/normal.c"
		},
		"7b1257bc-c084-4eec-8ca2-65ba9874666a": {
			"path": "7b1257bc-c084-4eec-8ca2-65ba9874666a",
			"fileName": "7b1257bc-c084-4eec-8ca2-65ba9874666a",
			"cellName": "Process Fork\nand Channel\nCreation",
			"cellId": "7b1257bc-c084-4eec-8ca2-65ba9874666a",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245"
		},
		"generated-edge-simstep-4b389c9e-933e-44db-b5aa-f3f1148b3769-7b1257bc-c084-4eec-8ca2-65ba9874666a": {
			"path": "generated-edge-simstep-4b389c9e-933e-44db-b5aa-f3f1148b3769-7b1257bc-c084-4eec-8ca2-65ba9874666a",
			"fileName": "main.c",
			"cellName": "Process Fork and Channel Creation",
			"cellId": "7b1257bc-c084-4eec-8ca2-65ba9874666a",
			"visible": true,
			"startLine": 49,
			"endLine": 62,
			"parentPath": "src/nvim/main.c"
		},
		"b2046855-5406-44fb-958e-a9e19d8e129a": {
			"path": "b2046855-5406-44fb-958e-a9e19d8e129a",
			"fileName": "b2046855-5406-44fb-958e-a9e19d8e129a",
			"cellName": "Client Sends\n`nvim_ui_attach` RPC\nCall",
			"cellId": "b2046855-5406-44fb-958e-a9e19d8e129a",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245"
		},
		"generated-edge-simstep-c358cd0e-60dc-40fe-9bac-f2e5d8400c03-b2046855-5406-44fb-958e-a9e19d8e129a": {
			"path": "generated-edge-simstep-c358cd0e-60dc-40fe-9bac-f2e5d8400c03-b2046855-5406-44fb-958e-a9e19d8e129a",
			"fileName": "ui_client.c",
			"cellName": "Client Sends `nvim_ui_attach` RPC Call",
			"cellId": "b2046855-5406-44fb-958e-a9e19d8e129a",
			"visible": true,
			"startLine": 122,
			"endLine": 122,
			"parentPath": "src/nvim/ui_client.c"
		},
		"ba8de695-e9cb-4c92-9a0b-fb69c242c2fc": {
			"path": "ba8de695-e9cb-4c92-9a0b-fb69c242c2fc",
			"fileName": "ba8de695-e9cb-4c92-9a0b-fb69c242c2fc",
			"cellName": "Server Sends\nInitial Redraw\nEvents",
			"cellId": "ba8de695-e9cb-4c92-9a0b-fb69c242c2fc",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245"
		},
		"generated-edge-simstep-74a1c33c-43c0-448f-9906-3a4178dd3a31-ba8de695-e9cb-4c92-9a0b-fb69c242c2fc": {
			"path": "generated-edge-simstep-74a1c33c-43c0-448f-9906-3a4178dd3a31-ba8de695-e9cb-4c92-9a0b-fb69c242c2fc",
			"fileName": "ui.c",
			"cellName": "Server Sends Initial Redraw Events",
			"cellId": "ba8de695-e9cb-4c92-9a0b-fb69c242c2fc",
			"visible": true,
			"startLine": 70,
			"endLine": 80,
			"parentPath": "src/nvim/api/ui.c"
		},
		"c5715033-dc43-4006-bd6d-9397f73c9bc8": {
			"path": "c5715033-dc43-4006-bd6d-9397f73c9bc8",
			"fileName": "c5715033-dc43-4006-bd6d-9397f73c9bc8",
			"cellName": "Dispatch to\nTUI Rendering\nLogic",
			"cellId": "c5715033-dc43-4006-bd6d-9397f73c9bc8",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245"
		},
		"generated-edge-simstep-b3dd751d-c580-4842-97bd-9afa464993ee-c5715033-dc43-4006-bd6d-9397f73c9bc8": {
			"path": "generated-edge-simstep-b3dd751d-c580-4842-97bd-9afa464993ee-c5715033-dc43-4006-bd6d-9397f73c9bc8",
			"fileName": "unpacker.c",
			"cellName": "Dispatch to TUI Rendering Logic",
			"cellId": "c5715033-dc43-4006-bd6d-9397f73c9bc8",
			"visible": true,
			"startLine": 280,
			"endLine": 282,
			"parentPath": "src/nvim/msgpack_rpc/unpacker.c"
		},
		"72ec73c0-e19b-49c9-a503-7b578cdb2a39": {
			"path": "72ec73c0-e19b-49c9-a503-7b578cdb2a39",
			"fileName": "72ec73c0-e19b-49c9-a503-7b578cdb2a39",
			"cellName": "Client Sends\n`nvim_input` RPC\nCall",
			"cellId": "72ec73c0-e19b-49c9-a503-7b578cdb2a39",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245"
		},
		"generated-edge-simstep-68c05877-afb1-4b3c-840b-8c92f51136ec-72ec73c0-e19b-49c9-a503-7b578cdb2a39": {
			"path": "generated-edge-simstep-68c05877-afb1-4b3c-840b-8c92f51136ec-72ec73c0-e19b-49c9-a503-7b578cdb2a39",
			"fileName": "input.c",
			"cellName": "Client Sends `nvim_input` RPC Call",
			"cellId": "72ec73c0-e19b-49c9-a503-7b578cdb2a39",
			"visible": true,
			"startLine": 213,
			"endLine": 213,
			"parentPath": "src/nvim/tui/input.c"
		},
		"ff4fa952-81de-48aa-abfa-7e50dd6a72da": {
			"path": "ff4fa952-81de-48aa-abfa-7e50dd6a72da",
			"fileName": "ff4fa952-81de-48aa-abfa-7e50dd6a72da",
			"cellName": "None",
			"cellId": "ff4fa952-81de-48aa-abfa-7e50dd6a72da",
			"visible": true
		},
		"None": {
			"path": "None",
			"fileName": "None",
			"cellName": "None",
			"cellId": "ff4fa952-81de-48aa-abfa-7e50dd6a72da",
			"visible": true,
			"children": [
				"None-simstep-d2a22a49-5703-4f60-b612-15bd4cfb2dc0"
			]
		},
		"167aa0f6-b357-4338-b535-12f91d334c0e": {
			"path": "167aa0f6-b357-4338-b535-12f91d334c0e",
			"fileName": "167aa0f6-b357-4338-b535-12f91d334c0e",
			"cellName": "ex_docmd.c",
			"cellId": "167aa0f6-b357-4338-b535-12f91d334c0e",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245"
		},
		"8845d34c-e1ba-4e90-9d8f-e1390c8dc458": {
			"path": "8845d34c-e1ba-4e90-9d8f-e1390c8dc458",
			"fileName": "8845d34c-e1ba-4e90-9d8f-e1390c8dc458",
			"cellName": "terminal.c",
			"cellId": "8845d34c-e1ba-4e90-9d8f-e1390c8dc458",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245"
		},
		"c00488d0-c1e1-43a1-b816-b3744ac83b9f": {
			"path": "c00488d0-c1e1-43a1-b816-b3744ac83b9f",
			"fileName": "c00488d0-c1e1-43a1-b816-b3744ac83b9f",
			"cellName": "vterm",
			"cellId": "c00488d0-c1e1-43a1-b816-b3744ac83b9f",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245"
		},
		"ec73ace7-c209-4021-ae84-1dd9665a81cf": {
			"path": "ec73ace7-c209-4021-ae84-1dd9665a81cf",
			"fileName": "ec73ace7-c209-4021-ae84-1dd9665a81cf",
			"cellName": "screen.c",
			"cellId": "ec73ace7-c209-4021-ae84-1dd9665a81cf",
			"visible": true,
			"parentCellId": "c00488d0-c1e1-43a1-b816-b3744ac83b9f"
		},
		"d0580ce7-c403-4e51-9297-4989adc23028": {
			"path": "d0580ce7-c403-4e51-9297-4989adc23028",
			"fileName": "d0580ce7-c403-4e51-9297-4989adc23028",
			"cellName": "keyboard.c",
			"cellId": "d0580ce7-c403-4e51-9297-4989adc23028",
			"visible": true,
			"parentCellId": "c00488d0-c1e1-43a1-b816-b3744ac83b9f"
		},
		"66323267-7878-4c7d-a54e-faa10a9b9084": {
			"path": "66323267-7878-4c7d-a54e-faa10a9b9084",
			"fileName": "66323267-7878-4c7d-a54e-faa10a9b9084",
			"cellName": "User Executes `:terminal` Command - ex_docmd.c:L7913-7928",
			"cellId": "66323267-7878-4c7d-a54e-faa10a9b9084",
			"visible": true,
			"parentCellId": "167aa0f6-b357-4338-b535-12f91d334c0e"
		},
		"src/nvim/ex_docmd.c-simstep-36e59f38-15cc-431c-8640-a92071154959": {
			"path": "src/nvim/ex_docmd.c-simstep-36e59f38-15cc-431c-8640-a92071154959",
			"fileName": "ex_docmd.c",
			"wiki": "The user initiates the process by executing the `:terminal` Ex command. Neovim's command-line processor identifies this command and dispatches it to the `ex_terminal` function for handling.",
			"cellName": "User Executes `:terminal` Command - ex_docmd.c:L7913-7928",
			"cellId": "66323267-7878-4c7d-a54e-faa10a9b9084",
			"visible": true,
			"startLine": 7913,
			"endLine": 7928,
			"parentCellId": "167aa0f6-b357-4338-b535-12f91d334c0e",
			"parentPath": "src/nvim/ex_docmd.c"
		},
		"f3d78296-92bc-4f34-b368-b8bae4d007b2": {
			"path": "f3d78296-92bc-4f34-b368-b8bae4d007b2",
			"fileName": "f3d78296-92bc-4f34-b368-b8bae4d007b2",
			"cellName": "Initialize VTerm Instance - terminal.c:L442-456",
			"cellId": "f3d78296-92bc-4f34-b368-b8bae4d007b2",
			"visible": true,
			"parentCellId": "8845d34c-e1ba-4e90-9d8f-e1390c8dc458"
		},
		"src/nvim/terminal.c-simstep-82b5e0c0-1920-412d-beb0-b48d28562f8f": {
			"path": "src/nvim/terminal.c-simstep-82b5e0c0-1920-412d-beb0-b48d28562f8f",
			"fileName": "terminal.c",
			"wiki": "`terminal_open` orchestrates the setup. It creates a `Terminal` struct to manage the session, then instantiates the core `libvterm` emulator (`vterm_new`). It obtains the state and screen handles from `libvterm` and registers a set of callbacks. These callbacks are crucial as they link `libvterm`'s abstract screen updates back to Neovim's concrete buffer manipulation.",
			"cellName": "Initialize VTerm Instance - terminal.c:L442-456",
			"cellId": "f3d78296-92bc-4f34-b368-b8bae4d007b2",
			"visible": true,
			"startLine": 442,
			"endLine": 456,
			"parentCellId": "8845d34c-e1ba-4e90-9d8f-e1390c8dc458",
			"parentPath": "src/nvim/terminal.c"
		},
		"1c36f471-98cb-4227-82e5-8c03c8ef4bd8": {
			"path": "1c36f471-98cb-4227-82e5-8c03c8ef4bd8",
			"fileName": "1c36f471-98cb-4227-82e5-8c03c8ef4bd8",
			"cellName": "Process Data in VTerm Emulator - terminal.c:L1175-1184",
			"cellId": "1c36f471-98cb-4227-82e5-8c03c8ef4bd8",
			"visible": true,
			"parentCellId": "8845d34c-e1ba-4e90-9d8f-e1390c8dc458"
		},
		"src/nvim/terminal.c-simstep-287eeff7-3ed4-448f-8d07-0c2c6e67d5e5": {
			"path": "src/nvim/terminal.c-simstep-287eeff7-3ed4-448f-8d07-0c2c6e67d5e5",
			"fileName": "terminal.c",
			"wiki": "The raw byte stream from the PTY is fed into the `libvterm` parser via `vterm_input_write`. The parser interprets the stream, distinguishing between printable text and control sequences. It updates its internal model of the terminal screen, including character grids, colors, and cursor position. This processing triggers internal callbacks that modify the VTerm screen state.",
			"cellName": "Process Data in VTerm Emulator - terminal.c:L1175-1184",
			"cellId": "1c36f471-98cb-4227-82e5-8c03c8ef4bd8",
			"visible": true,
			"startLine": 1175,
			"endLine": 1184,
			"parentCellId": "8845d34c-e1ba-4e90-9d8f-e1390c8dc458",
			"parentPath": "src/nvim/terminal.c"
		},
		"4b86a0d0-4891-412e-9225-fd7ad36c85e1": {
			"path": "4b86a0d0-4891-412e-9225-fd7ad36c85e1",
			"fileName": "4b86a0d0-4891-412e-9225-fd7ad36c85e1",
			"cellName": "Render VTerm Screen to Neovim Buffer - terminal.c:L2278-2351",
			"cellId": "4b86a0d0-4891-412e-9225-fd7ad36c85e1",
			"visible": true,
			"parentCellId": "8845d34c-e1ba-4e90-9d8f-e1390c8dc458"
		},
		"src/nvim/terminal.c-simstep-42d54e9c-9ec8-4255-a575-4998f3ca24a1": {
			"path": "src/nvim/terminal.c-simstep-42d54e9c-9ec8-4255-a575-4998f3ca24a1",
			"fileName": "terminal.c",
			"wiki": "The `term_damage` callback receives the damaged rectangle and marks those screen rows as invalid, scheduling a deferred refresh. During the refresh, `refresh_screen` iterates over the invalid area, fetching cell data (characters, attributes, colors) from `libvterm` via `fetch_cell`. It then translates this information into text and highlight data, updating the content and appearance of the Neovim buffer to match the terminal's state.",
			"cellName": "Render VTerm Screen to Neovim Buffer - terminal.c:L2278-2351",
			"cellId": "4b86a0d0-4891-412e-9225-fd7ad36c85e1",
			"visible": true,
			"startLine": 2278,
			"endLine": 2351,
			"parentCellId": "8845d34c-e1ba-4e90-9d8f-e1390c8dc458",
			"parentPath": "src/nvim/terminal.c"
		},
		"86594b87-1e11-4579-afc4-1ea1e00eb9a0": {
			"path": "86594b87-1e11-4579-afc4-1ea1e00eb9a0",
			"fileName": "86594b87-1e11-4579-afc4-1ea1e00eb9a0",
			"cellName": "Convert Keypress to Byte Sequence - keyboard.c:L24-88",
			"cellId": "86594b87-1e11-4579-afc4-1ea1e00eb9a0",
			"visible": true,
			"parentCellId": "d0580ce7-c403-4e51-9297-4989adc23028"
		},
		"src/nvim/vterm/keyboard.c-simstep-03602d2f-aa8f-4926-92fb-167fffd3ad26": {
			"path": "src/nvim/vterm/keyboard.c-simstep-03602d2f-aa8f-4926-92fb-167fffd3ad26",
			"fileName": "keyboard.c",
			"wiki": "The `terminal_send_key` function takes the Neovim key code and uses `libvterm`'s keyboard functions (`vterm_keyboard_unichar` or `vterm_keyboard_key`). These functions convert the abstract keypress into the raw byte sequence that a physical terminal would send, such as the character itself or a complex escape code for a function key.",
			"cellName": "Convert Keypress to Byte Sequence - keyboard.c:L24-88",
			"cellId": "86594b87-1e11-4579-afc4-1ea1e00eb9a0",
			"visible": true,
			"startLine": 24,
			"endLine": 88,
			"parentCellId": "d0580ce7-c403-4e51-9297-4989adc23028",
			"parentPath": "src/nvim/vterm/keyboard.c"
		},
		"d13bafa9-23dd-461c-b089-beb67e67a085": {
			"path": "d13bafa9-23dd-461c-b089-beb67e67a085",
			"fileName": "d13bafa9-23dd-461c-b089-beb67e67a085",
			"cellName": "Shell Processes Input - None:L0",
			"cellId": "d13bafa9-23dd-461c-b089-beb67e67a085",
			"visible": true,
			"parentCellId": "ff4fa952-81de-48aa-abfa-7e50dd6a72da"
		},
		"None-simstep-d2a22a49-5703-4f60-b612-15bd4cfb2dc0": {
			"path": "None-simstep-d2a22a49-5703-4f60-b612-15bd4cfb2dc0",
			"fileName": "None",
			"wiki": "The shell process (e.g., `bash`) running on the slave side of the PTY reads the byte sequence from its standard input. It interprets this input as if it were typed on a real terminal, executing the command (`ls`) and generating new output. This output is then written back to the PTY, restarting the data flow cycle.",
			"cellName": "Shell Processes Input - None:L0",
			"cellId": "d13bafa9-23dd-461c-b089-beb67e67a085",
			"visible": true,
			"parentCellId": "ff4fa952-81de-48aa-abfa-7e50dd6a72da",
			"parentPath": "None"
		},
		"11236c9f-7d26-47af-bd4e-492373cf7248": {
			"path": "11236c9f-7d26-47af-bd4e-492373cf7248",
			"fileName": "11236c9f-7d26-47af-bd4e-492373cf7248",
			"cellName": "Trigger Terminal\nInitialization",
			"cellId": "11236c9f-7d26-47af-bd4e-492373cf7248",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245"
		},
		"generated-edge-simstep-36f31f11-7759-4bf0-96c2-b375fa87b19b-11236c9f-7d26-47af-bd4e-492373cf7248": {
			"path": "generated-edge-simstep-36f31f11-7759-4bf0-96c2-b375fa87b19b-11236c9f-7d26-47af-bd4e-492373cf7248",
			"fileName": "ex_docmd.c",
			"cellName": "Trigger Terminal Initialization",
			"cellId": "11236c9f-7d26-47af-bd4e-492373cf7248",
			"visible": true,
			"startLine": 1098,
			"endLine": 1098,
			"parentPath": "src/nvim/ex_docmd.c"
		},
		"200b032e-e435-4ef6-a2f2-bdc22f9e39f3": {
			"path": "200b032e-e435-4ef6-a2f2-bdc22f9e39f3",
			"fileName": "200b032e-e435-4ef6-a2f2-bdc22f9e39f3",
			"cellName": "PTY Emits\nData",
			"cellId": "200b032e-e435-4ef6-a2f2-bdc22f9e39f3",
			"visible": true,
			"parentCellId": "8845d34c-e1ba-4e90-9d8f-e1390c8dc458"
		},
		"generated-edge-simstep-60b5122a-a154-4ee4-a21c-4d48bcac2ff7-200b032e-e435-4ef6-a2f2-bdc22f9e39f3": {
			"path": "generated-edge-simstep-60b5122a-a154-4ee4-a21c-4d48bcac2ff7-200b032e-e435-4ef6-a2f2-bdc22f9e39f3",
			"fileName": "terminal.c",
			"cellName": "PTY Emits Data",
			"cellId": "200b032e-e435-4ef6-a2f2-bdc22f9e39f3",
			"visible": true,
			"startLine": 1162,
			"endLine": 1162,
			"parentPath": "src/nvim/terminal.c"
		},
		"5cbbd26c-671e-4ee2-84a1-9896eebab5da": {
			"path": "5cbbd26c-671e-4ee2-84a1-9896eebab5da",
			"fileName": "5cbbd26c-671e-4ee2-84a1-9896eebab5da",
			"cellName": "VTerm Screen\nDamage Notification",
			"cellId": "5cbbd26c-671e-4ee2-84a1-9896eebab5da",
			"visible": true,
			"parentCellId": "8845d34c-e1ba-4e90-9d8f-e1390c8dc458"
		},
		"generated-edge-simstep-f31d6198-2ea5-4353-81c4-3785742f5c64-5cbbd26c-671e-4ee2-84a1-9896eebab5da": {
			"path": "generated-edge-simstep-f31d6198-2ea5-4353-81c4-3785742f5c64-5cbbd26c-671e-4ee2-84a1-9896eebab5da",
			"fileName": "terminal.c",
			"cellName": "VTerm Screen Damage Notification",
			"cellId": "5cbbd26c-671e-4ee2-84a1-9896eebab5da",
			"visible": true,
			"startLine": 103,
			"endLine": 105,
			"parentPath": "src/nvim/terminal.c"
		},
		"5097f44b-0d1a-4410-9299-eee71fa9f5fd": {
			"path": "5097f44b-0d1a-4410-9299-eee71fa9f5fd",
			"fileName": "5097f44b-0d1a-4410-9299-eee71fa9f5fd",
			"cellName": "User Types\nin Terminal",
			"cellId": "5097f44b-0d1a-4410-9299-eee71fa9f5fd",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245"
		},
		"generated-edge-simstep-5b7a2baf-9571-4221-9c9d-257245ca99fa-5097f44b-0d1a-4410-9299-eee71fa9f5fd": {
			"path": "generated-edge-simstep-5b7a2baf-9571-4221-9c9d-257245ca99fa-5097f44b-0d1a-4410-9299-eee71fa9f5fd",
			"fileName": "terminal.c",
			"cellName": "User Types in Terminal",
			"cellId": "5097f44b-0d1a-4410-9299-eee71fa9f5fd",
			"visible": true,
			"startLine": 1145,
			"endLine": 1145,
			"parentPath": "src/nvim/terminal.c"
		},
		"75f4916a-1203-48f2-8979-315a523f1d20": {
			"path": "75f4916a-1203-48f2-8979-315a523f1d20",
			"fileName": "75f4916a-1203-48f2-8979-315a523f1d20",
			"cellName": "Send Byte\nSequence to\nPTY",
			"cellId": "75f4916a-1203-48f2-8979-315a523f1d20",
			"visible": true
		},
		"generated-edge-simstep-c0a71715-b4b1-489a-8307-38a04362ebe4-75f4916a-1203-48f2-8979-315a523f1d20": {
			"path": "generated-edge-simstep-c0a71715-b4b1-489a-8307-38a04362ebe4-75f4916a-1203-48f2-8979-315a523f1d20",
			"fileName": "keyboard.c",
			"cellName": "Send Byte Sequence to PTY",
			"cellId": "75f4916a-1203-48f2-8979-315a523f1d20",
			"visible": true,
			"startLine": 1073,
			"endLine": 1077,
			"parentPath": "src/nvim/vterm/keyboard.c"
		},
		"de04d0f9-b63d-4791-a845-19c24d9fcf9b": {
			"path": "de04d0f9-b63d-4791-a845-19c24d9fcf9b",
			"fileName": "de04d0f9-b63d-4791-a845-19c24d9fcf9b",
			"cellName": "core",
			"cellId": "de04d0f9-b63d-4791-a845-19c24d9fcf9b",
			"visible": true,
			"parentCellId": "b4c81f3b-f7a8-48c1-a806-f4f685fda7d1"
		},
		"b4185b59-5067-4365-922a-5ad077381cd6": {
			"path": "b4185b59-5067-4365-922a-5ad077381cd6",
			"fileName": "b4185b59-5067-4365-922a-5ad077381cd6",
			"cellName": "eval.lua",
			"cellId": "b4185b59-5067-4365-922a-5ad077381cd6",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245"
		},
		"042d484f-3bcd-4f24-878d-22a640843dbf": {
			"path": "042d484f-3bcd-4f24-878d-22a640843dbf",
			"fileName": "042d484f-3bcd-4f24-878d-22a640843dbf",
			"cellName": "eval",
			"cellId": "042d484f-3bcd-4f24-878d-22a640843dbf",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245"
		},
		"20fcfc79-9ca0-4d2e-b076-0fe710245289": {
			"path": "20fcfc79-9ca0-4d2e-b076-0fe710245289",
			"fileName": "20fcfc79-9ca0-4d2e-b076-0fe710245289",
			"cellName": "channel.c",
			"cellId": "20fcfc79-9ca0-4d2e-b076-0fe710245289",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245"
		},
		"6bbecf0c-33f3-4e39-8222-2d1c0afce663": {
			"path": "6bbecf0c-33f3-4e39-8222-2d1c0afce663",
			"fileName": "6bbecf0c-33f3-4e39-8222-2d1c0afce663",
			"cellName": "job_spec.lua",
			"cellId": "6bbecf0c-33f3-4e39-8222-2d1c0afce663",
			"visible": true,
			"parentCellId": "de04d0f9-b63d-4791-a845-19c24d9fcf9b"
		},
		"d77ec535-eb4c-4752-a7f5-6e51b52f0e71": {
			"path": "d77ec535-eb4c-4752-a7f5-6e51b52f0e71",
			"fileName": "d77ec535-eb4c-4752-a7f5-6e51b52f0e71",
			"cellName": "funcs.c",
			"cellId": "d77ec535-eb4c-4752-a7f5-6e51b52f0e71",
			"visible": true,
			"parentCellId": "042d484f-3bcd-4f24-878d-22a640843dbf"
		},
		"47f9e9b7-d4b7-49f7-8157-a5ae44bbe279": {
			"path": "47f9e9b7-d4b7-49f7-8157-a5ae44bbe279",
			"fileName": "47f9e9b7-d4b7-49f7-8157-a5ae44bbe279",
			"cellName": "User Initiates Asynchronous Job - job_spec.lua:L319",
			"cellId": "47f9e9b7-d4b7-49f7-8157-a5ae44bbe279",
			"visible": true,
			"parentCellId": "6bbecf0c-33f3-4e39-8222-2d1c0afce663"
		},
		"test/functional/core/job_spec.lua-simstep-eaaca010-42e5-4cce-aef6-fa32b3b82b6e": {
			"path": "test/functional/core/job_spec.lua-simstep-eaaca010-42e5-4cce-aef6-fa32b3b82b6e",
			"fileName": "job_spec.lua",
			"wiki": "A user script, in this case a Lua test script, calls the `jobstart()` function to spawn an external `cat` process. It provides the command to execute and a dictionary of options, including an `on_stdout` callback function to handle the process's standard output.",
			"cellName": "User Initiates Asynchronous Job - job_spec.lua:L319",
			"cellId": "47f9e9b7-d4b7-49f7-8157-a5ae44bbe279",
			"visible": true,
			"startLine": 319,
			"endLine": 319,
			"parentCellId": "6bbecf0c-33f3-4e39-8222-2d1c0afce663",
			"parentPath": "test/functional/core/job_spec.lua"
		},
		"e0741b89-dca2-427b-8632-74ddd0c749a9": {
			"path": "e0741b89-dca2-427b-8632-74ddd0c749a9",
			"fileName": "e0741b89-dca2-427b-8632-74ddd0c749a9",
			"cellName": "C-level Job Creation - funcs.c:L3872-4067",
			"cellId": "e0741b89-dca2-427b-8632-74ddd0c749a9",
			"visible": true,
			"parentCellId": "d77ec535-eb4c-4752-a7f5-6e51b52f0e71"
		},
		"src/nvim/eval/funcs.c-simstep-aedec869-e86a-432a-bfd6-ace49b1a815e": {
			"path": "src/nvim/eval/funcs.c-simstep-aedec869-e86a-432a-bfd6-ace49b1a815e",
			"fileName": "funcs.c",
			"wiki": "The C function `f_jobstart` is executed. It parses the options, validates them, prepares callback handlers using `common_job_callbacks`, and then calls `channel_job_start` to handle the low-level process and channel creation.",
			"cellName": "C-level Job Creation - funcs.c:L3872-4067",
			"cellId": "e0741b89-dca2-427b-8632-74ddd0c749a9",
			"visible": true,
			"startLine": 3872,
			"endLine": 4067,
			"parentCellId": "d77ec535-eb4c-4752-a7f5-6e51b52f0e71",
			"parentPath": "src/nvim/eval/funcs.c"
		},
		"7931c951-7161-4ac6-9dca-153a999780ea": {
			"path": "7931c951-7161-4ac6-9dca-153a999780ea",
			"fileName": "7931c951-7161-4ac6-9dca-153a999780ea",
			"cellName": "Process Spawning and Stream Setup - channel.c:L355-456",
			"cellId": "7931c951-7161-4ac6-9dca-153a999780ea",
			"visible": true,
			"parentCellId": "20fcfc79-9ca0-4d2e-b076-0fe710245289"
		},
		"src/nvim/channel.c-simstep-854ff8f5-8f8a-4698-9668-18eb81c62445": {
			"path": "src/nvim/channel.c-simstep-854ff8f5-8f8a-4698-9668-18eb81c62445",
			"fileName": "channel.c",
			"wiki": "The `channel_job_start` function allocates a `Channel` struct, spawns the external `cat` process using libuv, and initializes I/O streams for stdin, stdout, and stderr. It then starts listening for data on stdout by calling `rstream_start` with `on_channel_data` as the data handler.",
			"cellName": "Process Spawning and Stream Setup - channel.c:L355-456",
			"cellId": "7931c951-7161-4ac6-9dca-153a999780ea",
			"visible": true,
			"startLine": 355,
			"endLine": 456,
			"parentCellId": "20fcfc79-9ca0-4d2e-b076-0fe710245289",
			"parentPath": "src/nvim/channel.c"
		},
		"ff421c80-1416-4bdf-8ab5-fb3bb3a21a1f": {
			"path": "ff421c80-1416-4bdf-8ab5-fb3bb3a21a1f",
			"fileName": "ff421c80-1416-4bdf-8ab5-fb3bb3a21a1f",
			"cellName": "Job Processes Input and Writes to Stdout - channel.c:L575-645",
			"cellId": "ff421c80-1416-4bdf-8ab5-fb3bb3a21a1f",
			"visible": true,
			"parentCellId": "20fcfc79-9ca0-4d2e-b076-0fe710245289"
		},
		"src/nvim/channel.c-simstep-50982715-7e99-41eb-ad7a-444adf002b76": {
			"path": "src/nvim/channel.c-simstep-50982715-7e99-41eb-ad7a-444adf002b76",
			"fileName": "channel.c",
			"wiki": "The `cat` process reads the data from its stdin (`abc\\n`) and echoes it to its standard output. This data is now available for Neovim to read from the corresponding pipe.",
			"cellName": "Job Processes Input and Writes to Stdout - channel.c:L575-645",
			"cellId": "ff421c80-1416-4bdf-8ab5-fb3bb3a21a1f",
			"visible": true,
			"startLine": 575,
			"endLine": 645,
			"parentCellId": "20fcfc79-9ca0-4d2e-b076-0fe710245289",
			"parentPath": "src/nvim/channel.c"
		},
		"52556006-bb10-4851-8d08-3f8bfcf9ecdb": {
			"path": "52556006-bb10-4851-8d08-3f8bfcf9ecdb",
			"fileName": "52556006-bb10-4851-8d08-3f8bfcf9ecdb",
			"cellName": "Data Reception and Callback Scheduling - channel.c:L668-693",
			"cellId": "52556006-bb10-4851-8d08-3f8bfcf9ecdb",
			"visible": true,
			"parentCellId": "20fcfc79-9ca0-4d2e-b076-0fe710245289"
		},
		"src/nvim/channel.c-simstep-8cb74844-a3b5-47ab-bf0b-70ac8cae0f2e": {
			"path": "src/nvim/channel.c-simstep-8cb74844-a3b5-47ab-bf0b-70ac8cae0f2e",
			"fileName": "channel.c",
			"wiki": "Neovim's event loop detects the incoming data on the stdout pipe. It invokes `on_channel_data`, which calls `on_channel_output` to process the raw byte stream, split it into lines, and then schedule `on_channel_event` to run on the main loop via `schedule_channel_event`.",
			"cellName": "Data Reception and Callback Scheduling - channel.c:L668-693",
			"cellId": "52556006-bb10-4851-8d08-3f8bfcf9ecdb",
			"visible": true,
			"startLine": 668,
			"endLine": 693,
			"parentCellId": "20fcfc79-9ca0-4d2e-b076-0fe710245289",
			"parentPath": "src/nvim/channel.c"
		},
		"b8e65988-6335-4647-b8fa-24d7ff9e16ff": {
			"path": "b8e65988-6335-4647-b8fa-24d7ff9e16ff",
			"fileName": "b8e65988-6335-4647-b8fa-24d7ff9e16ff",
			"cellName": "User Callback Invocation - channel.c:L777-823",
			"cellId": "b8e65988-6335-4647-b8fa-24d7ff9e16ff",
			"visible": true,
			"parentCellId": "20fcfc79-9ca0-4d2e-b076-0fe710245289"
		},
		"src/nvim/channel.c-simstep-8f80b898-11ed-4b06-ac47-1c81e36fd8e7": {
			"path": "src/nvim/channel.c-simstep-8f80b898-11ed-4b06-ac47-1c81e36fd8e7",
			"fileName": "channel.c",
			"wiki": "The main loop executes the `on_channel_event` function. This function calls `channel_reader_callbacks`, which in turn calls `channel_callback_call` to finally execute the user-provided `on_stdout` callback in the scripting environment.",
			"cellName": "User Callback Invocation - channel.c:L777-823",
			"cellId": "b8e65988-6335-4647-b8fa-24d7ff9e16ff",
			"visible": true,
			"startLine": 777,
			"endLine": 823,
			"parentCellId": "20fcfc79-9ca0-4d2e-b076-0fe710245289",
			"parentPath": "src/nvim/channel.c"
		},
		"dd67a7c9-97d7-45d2-8e8d-6dd1492aa6c9": {
			"path": "dd67a7c9-97d7-45d2-8e8d-6dd1492aa6c9",
			"fileName": "dd67a7c9-97d7-45d2-8e8d-6dd1492aa6c9",
			"cellName": "Execute on_stdout Callback - job_spec.lua:L55-59",
			"cellId": "dd67a7c9-97d7-45d2-8e8d-6dd1492aa6c9",
			"visible": true,
			"parentCellId": "6bbecf0c-33f3-4e39-8222-2d1c0afce663"
		},
		"test/functional/core/job_spec.lua-simstep-e7b85c33-fd85-47cb-8ecb-a0d12c8f7a8e": {
			"path": "test/functional/core/job_spec.lua-simstep-e7b85c33-fd85-47cb-8ecb-a0d12c8f7a8e",
			"fileName": "job_spec.lua",
			"wiki": "The user's `on_stdout` callback function (named `OnEvent` in the example) is executed. It receives the channel ID, the data from stdout as a list of strings, and the event name. In this example, it sends an RPC notification back to the test runner to assert the output was received correctly.",
			"cellName": "Execute on_stdout Callback - job_spec.lua:L55-59",
			"cellId": "dd67a7c9-97d7-45d2-8e8d-6dd1492aa6c9",
			"visible": true,
			"startLine": 55,
			"endLine": 59,
			"parentCellId": "6bbecf0c-33f3-4e39-8222-2d1c0afce663",
			"parentPath": "test/functional/core/job_spec.lua"
		},
		"c48bd66b-41f7-4337-b9cf-b5f88da890d1": {
			"path": "c48bd66b-41f7-4337-b9cf-b5f88da890d1",
			"fileName": "c48bd66b-41f7-4337-b9cf-b5f88da890d1",
			"cellName": "Vimscript/Lua to\nC Bridge",
			"cellId": "c48bd66b-41f7-4337-b9cf-b5f88da890d1",
			"visible": true
		},
		"generated-edge-simstep-103a1597-6de0-406e-96b9-9fca9a9c5115-c48bd66b-41f7-4337-b9cf-b5f88da890d1": {
			"path": "generated-edge-simstep-103a1597-6de0-406e-96b9-9fca9a9c5115-c48bd66b-41f7-4337-b9cf-b5f88da890d1",
			"fileName": "job_spec.lua",
			"cellName": "Vimscript/Lua to C Bridge",
			"cellId": "c48bd66b-41f7-4337-b9cf-b5f88da890d1",
			"visible": true,
			"startLine": 6122,
			"endLine": 6149,
			"parentPath": "test/functional/core/job_spec.lua"
		},
		"bf20c421-9fc3-49ce-9c99-2c60de4276de": {
			"path": "bf20c421-9fc3-49ce-9c99-2c60de4276de",
			"fileName": "bf20c421-9fc3-49ce-9c99-2c60de4276de",
			"cellName": "Passing Job\nDetails to\nChannel Manager",
			"cellId": "bf20c421-9fc3-49ce-9c99-2c60de4276de",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245"
		},
		"generated-edge-simstep-62e6b30c-49b3-419c-8deb-8aea8a8bc143-bf20c421-9fc3-49ce-9c99-2c60de4276de": {
			"path": "generated-edge-simstep-62e6b30c-49b3-419c-8deb-8aea8a8bc143-bf20c421-9fc3-49ce-9c99-2c60de4276de",
			"fileName": "funcs.c",
			"cellName": "Passing Job Details to Channel Manager",
			"cellId": "bf20c421-9fc3-49ce-9c99-2c60de4276de",
			"visible": true,
			"startLine": 4010,
			"endLine": 4012,
			"parentPath": "src/nvim/eval/funcs.c"
		},
		"119b18a8-cd31-4000-802d-3e74a806de24": {
			"path": "119b18a8-cd31-4000-802d-3e74a806de24",
			"fileName": "119b18a8-cd31-4000-802d-3e74a806de24",
			"cellName": "User Sends\nData to\nJob's Stdin",
			"cellId": "119b18a8-cd31-4000-802d-3e74a806de24",
			"visible": true,
			"parentCellId": "20fcfc79-9ca0-4d2e-b076-0fe710245289"
		},
		"generated-edge-simstep-6ba113f7-7e4f-405b-ade9-f411aa541633-119b18a8-cd31-4000-802d-3e74a806de24": {
			"path": "generated-edge-simstep-6ba113f7-7e4f-405b-ade9-f411aa541633-119b18a8-cd31-4000-802d-3e74a806de24",
			"fileName": "channel.c",
			"cellName": "User Sends Data to Job's Stdin",
			"cellId": "119b18a8-cd31-4000-802d-3e74a806de24",
			"visible": true,
			"startLine": 321,
			"endLine": 321,
			"parentPath": "src/nvim/channel.c"
		},
		"b3b70102-09b0-468f-b689-19b4430d8095": {
			"path": "b3b70102-09b0-468f-b689-19b4430d8095",
			"fileName": "b3b70102-09b0-468f-b689-19b4430d8095",
			"cellName": "Data Transmitted\nfrom Job\nto Neovim",
			"cellId": "b3b70102-09b0-468f-b689-19b4430d8095",
			"visible": true,
			"parentCellId": "20fcfc79-9ca0-4d2e-b076-0fe710245289"
		},
		"generated-edge-simstep-c9cc507e-1487-433a-a333-1eb5675ea9c8-b3b70102-09b0-468f-b689-19b4430d8095": {
			"path": "generated-edge-simstep-c9cc507e-1487-433a-a333-1eb5675ea9c8-b3b70102-09b0-468f-b689-19b4430d8095",
			"fileName": "channel.c",
			"cellName": "Data Transmitted from Job to Neovim",
			"cellId": "b3b70102-09b0-468f-b689-19b4430d8095",
			"visible": true,
			"startLine": 433,
			"endLine": 434,
			"parentPath": "src/nvim/channel.c"
		},
		"fc039d57-f1ee-4b21-bf72-c349a5f09c05": {
			"path": "fc039d57-f1ee-4b21-bf72-c349a5f09c05",
			"fileName": "fc039d57-f1ee-4b21-bf72-c349a5f09c05",
			"cellName": "Data Propagation\nto Main\nLoop",
			"cellId": "fc039d57-f1ee-4b21-bf72-c349a5f09c05",
			"visible": true,
			"parentCellId": "20fcfc79-9ca0-4d2e-b076-0fe710245289"
		},
		"generated-edge-simstep-791f5139-40d2-4d59-941c-0bcdef01a513-fc039d57-f1ee-4b21-bf72-c349a5f09c05": {
			"path": "generated-edge-simstep-791f5139-40d2-4d59-941c-0bcdef01a513-fc039d57-f1ee-4b21-bf72-c349a5f09c05",
			"fileName": "channel.c",
			"cellName": "Data Propagation to Main Loop",
			"cellId": "fc039d57-f1ee-4b21-bf72-c349a5f09c05",
			"visible": true,
			"startLine": 696,
			"endLine": 704,
			"parentPath": "src/nvim/channel.c"
		},
		"4831c9a5-b950-4eba-be29-d11fd0d886d1": {
			"path": "4831c9a5-b950-4eba-be29-d11fd0d886d1",
			"fileName": "4831c9a5-b950-4eba-be29-d11fd0d886d1",
			"cellName": "C to\nVimscript/Lua Bridge",
			"cellId": "4831c9a5-b950-4eba-be29-d11fd0d886d1",
			"visible": true
		},
		"generated-edge-simstep-8b4a9eea-0998-4d38-b614-26dfed71dca7-4831c9a5-b950-4eba-be29-d11fd0d886d1": {
			"path": "generated-edge-simstep-8b4a9eea-0998-4d38-b614-26dfed71dca7-4831c9a5-b950-4eba-be29-d11fd0d886d1",
			"fileName": "channel.c",
			"cellName": "C to Vimscript/Lua Bridge",
			"cellId": "4831c9a5-b950-4eba-be29-d11fd0d886d1",
			"visible": true,
			"startLine": 55,
			"endLine": 59,
			"parentPath": "src/nvim/channel.c"
		},
		"5ed19d61-b36f-4e7e-92d4-44d9cff8557d": {
			"path": "5ed19d61-b36f-4e7e-92d4-44d9cff8557d",
			"fileName": "5ed19d61-b36f-4e7e-92d4-44d9cff8557d",
			"cellName": "ex_cmds.lua",
			"cellId": "5ed19d61-b36f-4e7e-92d4-44d9cff8557d",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245"
		},
		"f9b33e30-d2b7-431f-bb0d-7c471ad2a424": {
			"path": "f9b33e30-d2b7-431f-bb0d-7c471ad2a424",
			"fileName": "f9b33e30-d2b7-431f-bb0d-7c471ad2a424",
			"cellName": "runtime.c",
			"cellId": "f9b33e30-d2b7-431f-bb0d-7c471ad2a424",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245"
		},
		"12f119a2-b00d-4406-b448-72ee123e040a": {
			"path": "12f119a2-b00d-4406-b448-72ee123e040a",
			"fileName": "12f119a2-b00d-4406-b448-72ee123e040a",
			"cellName": "eval.c",
			"cellId": "12f119a2-b00d-4406-b448-72ee123e040a",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245"
		},
		"d796ed6c-23d7-4b7e-bda2-1b111eae56f0": {
			"path": "d796ed6c-23d7-4b7e-bda2-1b111eae56f0",
			"fileName": "d796ed6c-23d7-4b7e-bda2-1b111eae56f0",
			"cellName": "vimscript.c",
			"cellId": "d796ed6c-23d7-4b7e-bda2-1b111eae56f0",
			"visible": true,
			"parentCellId": "4030d70f-0fed-4a0f-8778-d844f56b88f7"
		},
		"214dc308-877b-49e3-b633-c5cce30f8c77": {
			"path": "214dc308-877b-49e3-b633-c5cce30f8c77",
			"fileName": "214dc308-877b-49e3-b633-c5cce30f8c77",
			"cellName": "API Call to Execute Vimscript - vimscript.c:L136-142",
			"cellId": "214dc308-877b-49e3-b633-c5cce30f8c77",
			"visible": true,
			"parentCellId": "d796ed6c-23d7-4b7e-bda2-1b111eae56f0"
		},
		"src/nvim/api/vimscript.c-simstep-1f86bd67-1f46-4692-a8a6-07d602732c45": {
			"path": "src/nvim/api/vimscript.c-simstep-1f86bd67-1f46-4692-a8a6-07d602732c45",
			"fileName": "vimscript.c",
			"wiki": "The execution of a Vimscript command is initiated through an API call, for example from a plugin or external tool. The `nvim_command` function serves as an entry point, taking a string containing the Ex command to be executed.",
			"cellName": "API Call to Execute Vimscript - vimscript.c:L136-142",
			"cellId": "214dc308-877b-49e3-b633-c5cce30f8c77",
			"visible": true,
			"startLine": 136,
			"endLine": 142,
			"parentCellId": "d796ed6c-23d7-4b7e-bda2-1b111eae56f0",
			"parentPath": "src/nvim/api/vimscript.c"
		},
		"4d776b34-6826-44ed-89bb-850cb3a2b5b7": {
			"path": "4d776b34-6826-44ed-89bb-850cb3a2b5b7",
			"fileName": "4d776b34-6826-44ed-89bb-850cb3a2b5b7",
			"cellName": "Core Command Processing - ex_docmd.c:L373-376",
			"cellId": "4d776b34-6826-44ed-89bb-850cb3a2b5b7",
			"visible": true,
			"parentCellId": "167aa0f6-b357-4338-b535-12f91d334c0e"
		},
		"src/nvim/ex_docmd.c-simstep-2457a8c1-7c83-4d28-9732-9a8321da9eca": {
			"path": "src/nvim/ex_docmd.c-simstep-2457a8c1-7c83-4d28-9732-9a8321da9eca",
			"fileName": "ex_docmd.c",
			"wiki": "The `do_cmdline_cmd` function is a wrapper that calls the main command processing function, `do_cmdline`. This central function is responsible for parsing the command string, identifying the command, and dispatching it to the appropriate handler.",
			"cellName": "Core Command Processing - ex_docmd.c:L373-376",
			"cellId": "4d776b34-6826-44ed-89bb-850cb3a2b5b7",
			"visible": true,
			"startLine": 373,
			"endLine": 376,
			"parentCellId": "167aa0f6-b357-4338-b535-12f91d334c0e",
			"parentPath": "src/nvim/ex_docmd.c"
		},
		"9c795b05-0144-41ba-acb2-be2f7205c35f": {
			"path": "9c795b05-0144-41ba-acb2-be2f7205c35f",
			"fileName": "9c795b05-0144-41ba-acb2-be2f7205c35f",
			"cellName": "Execute `:source` Command - runtime.c:L1866-1869",
			"cellId": "9c795b05-0144-41ba-acb2-be2f7205c35f",
			"visible": true,
			"parentCellId": "f9b33e30-d2b7-431f-bb0d-7c471ad2a424"
		},
		"src/nvim/runtime.c-simstep-a9c1483a-e524-4548-938f-1e858991fb17": {
			"path": "src/nvim/runtime.c-simstep-a9c1483a-e524-4548-938f-1e858991fb17",
			"fileName": "runtime.c",
			"wiki": "The `ex_source` function handles the `:source` command. It takes the file path provided as an argument and initiates the process of reading and executing the script file.",
			"cellName": "Execute `:source` Command - runtime.c:L1866-1869",
			"cellId": "9c795b05-0144-41ba-acb2-be2f7205c35f",
			"visible": true,
			"startLine": 1866,
			"endLine": 1869,
			"parentCellId": "f9b33e30-d2b7-431f-bb0d-7c471ad2a424",
			"parentPath": "src/nvim/runtime.c"
		},
		"f0c576ca-6f38-4f81-b475-0afc425c8e55": {
			"path": "f0c576ca-6f38-4f81-b475-0afc425c8e55",
			"fileName": "f0c576ca-6f38-4f81-b475-0afc425c8e55",
			"cellName": "Executing Script Line - funcs.c:L1495",
			"cellId": "f0c576ca-6f38-4f81-b475-0afc425c8e55",
			"visible": true,
			"parentCellId": "d77ec535-eb4c-4752-a7f5-6e51b52f0e71"
		},
		"src/nvim/eval/funcs.c-simstep-87627dcb-783c-4f41-bb38-8de49d48016d": {
			"path": "src/nvim/eval/funcs.c-simstep-87627dcb-783c-4f41-bb38-8de49d48016d",
			"fileName": "funcs.c",
			"wiki": "Each line read from the sourced script, such as 'call MyPluginFunc()', is executed by recursively calling the central command processor, `do_cmdline_cmd`, which will parse and dispatch the `:call` command.",
			"cellName": "Executing Script Line - funcs.c:L1495",
			"cellId": "f0c576ca-6f38-4f81-b475-0afc425c8e55",
			"visible": true,
			"startLine": 1495,
			"endLine": 1495,
			"parentCellId": "d77ec535-eb4c-4752-a7f5-6e51b52f0e71",
			"parentPath": "src/nvim/eval/funcs.c"
		},
		"79938310-92f3-492d-a5e5-eb0bc4d5741b": {
			"path": "79938310-92f3-492d-a5e5-eb0bc4d5741b",
			"fileName": "79938310-92f3-492d-a5e5-eb0bc4d5741b",
			"cellName": "Core Expression Evaluation - eval.c:L1-5",
			"cellId": "79938310-92f3-492d-a5e5-eb0bc4d5741b",
			"visible": true,
			"parentCellId": "12f119a2-b00d-4406-b448-72ee123e040a"
		},
		"src/nvim/eval.c-simstep-0712ca23-aeff-4f04-b68b-42a5bc59f0d7": {
			"path": "src/nvim/eval.c-simstep-0712ca23-aeff-4f04-b68b-42a5bc59f0d7",
			"fileName": "eval.c",
			"wiki": "The `eval0` function, and the `eval1` through `eval7` functions it calls, form a recursive-descent parser that interprets the Vimscript expression. It handles function calls, variable lookups, operators, and literals to compute the final result, forming the heart of Vimscript compatibility.",
			"cellName": "Core Expression Evaluation - eval.c:L1-5",
			"cellId": "79938310-92f3-492d-a5e5-eb0bc4d5741b",
			"visible": true,
			"startLine": 1,
			"endLine": 5,
			"parentCellId": "12f119a2-b00d-4406-b448-72ee123e040a",
			"parentPath": "src/nvim/eval.c"
		},
		"b45e90f1-db79-4bd1-a1a7-b256fdafde6d": {
			"path": "b45e90f1-db79-4bd1-a1a7-b256fdafde6d",
			"fileName": "b45e90f1-db79-4bd1-a1a7-b256fdafde6d",
			"cellName": "Passing Command\nString to\nExecutor",
			"cellId": "b45e90f1-db79-4bd1-a1a7-b256fdafde6d",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245"
		},
		"generated-edge-simstep-1486590b-d67c-407d-99d5-572f84a8be49-b45e90f1-db79-4bd1-a1a7-b256fdafde6d": {
			"path": "generated-edge-simstep-1486590b-d67c-407d-99d5-572f84a8be49-b45e90f1-db79-4bd1-a1a7-b256fdafde6d",
			"fileName": "vimscript.c",
			"cellName": "Passing Command String to Executor",
			"cellId": "b45e90f1-db79-4bd1-a1a7-b256fdafde6d",
			"visible": true,
			"startLine": 140,
			"endLine": 140,
			"parentPath": "src/nvim/api/vimscript.c"
		},
		"311fdd15-bcbd-4e83-a181-e46232837504": {
			"path": "311fdd15-bcbd-4e83-a181-e46232837504",
			"fileName": "311fdd15-bcbd-4e83-a181-e46232837504",
			"cellName": "Dispatch to\nCommand Handler",
			"cellId": "311fdd15-bcbd-4e83-a181-e46232837504",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245"
		},
		"generated-edge-simstep-84534a40-54c0-4e79-ab6c-99047722e648-311fdd15-bcbd-4e83-a181-e46232837504": {
			"path": "generated-edge-simstep-84534a40-54c0-4e79-ab6c-99047722e648-311fdd15-bcbd-4e83-a181-e46232837504",
			"fileName": "ex_docmd.c",
			"cellName": "Dispatch to Command Handler",
			"cellId": "311fdd15-bcbd-4e83-a181-e46232837504",
			"visible": true,
			"startLine": 2552,
			"endLine": 2558,
			"parentPath": "src/nvim/ex_docmd.c"
		},
		"9f62d16b-da91-42ab-8ec0-ddb2ae29d8bc": {
			"path": "9f62d16b-da91-42ab-8ec0-ddb2ae29d8bc",
			"fileName": "9f62d16b-da91-42ab-8ec0-ddb2ae29d8bc",
			"cellName": "Reading Script\nFile Line\nby Line",
			"cellId": "9f62d16b-da91-42ab-8ec0-ddb2ae29d8bc",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245"
		},
		"generated-edge-simstep-276c5788-3c39-4f4d-99ad-0dfa57c95e7b-9f62d16b-da91-42ab-8ec0-ddb2ae29d8bc": {
			"path": "generated-edge-simstep-276c5788-3c39-4f4d-99ad-0dfa57c95e7b-9f62d16b-da91-42ab-8ec0-ddb2ae29d8bc",
			"fileName": "runtime.c",
			"cellName": "Reading Script File Line by Line",
			"cellId": "9f62d16b-da91-42ab-8ec0-ddb2ae29d8bc",
			"visible": true,
			"startLine": 1868,
			"endLine": 1868,
			"parentPath": "src/nvim/runtime.c"
		},
		"2b165210-c766-43e8-8f7a-dffb18f42866": {
			"path": "2b165210-c766-43e8-8f7a-dffb18f42866",
			"fileName": "2b165210-c766-43e8-8f7a-dffb18f42866",
			"cellName": "Passing Expression\nto Evaluator",
			"cellId": "2b165210-c766-43e8-8f7a-dffb18f42866",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245"
		},
		"generated-edge-simstep-4e920e03-135d-4e4f-a4e1-22c3e69ac694-2b165210-c766-43e8-8f7a-dffb18f42866": {
			"path": "generated-edge-simstep-4e920e03-135d-4e4f-a4e1-22c3e69ac694-2b165210-c766-43e8-8f7a-dffb18f42866",
			"fileName": "funcs.c",
			"cellName": "Passing Expression to Evaluator",
			"cellId": "2b165210-c766-43e8-8f7a-dffb18f42866",
			"visible": true,
			"startLine": 166,
			"endLine": 166,
			"parentPath": "src/nvim/eval/funcs.c"
		},
		"c61bd152-dcea-427a-b0b9-0691812637d8": {
			"path": "c61bd152-dcea-427a-b0b9-0691812637d8",
			"fileName": "c61bd152-dcea-427a-b0b9-0691812637d8",
			"cellName": "window.c",
			"cellId": "c61bd152-dcea-427a-b0b9-0691812637d8",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245"
		},
		"f429c250-0493-40e0-9440-54177c9eaf4c": {
			"path": "f429c250-0493-40e0-9440-54177c9eaf4c",
			"fileName": "f429c250-0493-40e0-9440-54177c9eaf4c",
			"cellName": "Window Splitting Flow: Execute Split Command - ex_docmd.c:L5476-5478",
			"cellId": "f429c250-0493-40e0-9440-54177c9eaf4c",
			"visible": true,
			"parentCellId": "167aa0f6-b357-4338-b535-12f91d334c0e"
		},
		"src/nvim/ex_docmd.c-simstep-09103307-3564-4428-88ea-68f85c5a11e7": {
			"path": "src/nvim/ex_docmd.c-simstep-09103307-3564-4428-88ea-68f85c5a11e7",
			"fileName": "ex_docmd.c",
			"wiki": "The user initiates a window split by executing a command like `:split` or `:vsplit`. The command is parsed, and the core windowing logic is invoked to handle the split operation.",
			"cellName": "Window Splitting Flow: Execute Split Command - ex_docmd.c:L5476-5478",
			"cellId": "f429c250-0493-40e0-9440-54177c9eaf4c",
			"visible": true,
			"startLine": 5476,
			"endLine": 5478,
			"parentCellId": "167aa0f6-b357-4338-b535-12f91d334c0e",
			"parentPath": "src/nvim/ex_docmd.c"
		},
		"3ae7a6d9-1459-4042-9034-c90226a6240c": {
			"path": "3ae7a6d9-1459-4042-9034-c90226a6240c",
			"fileName": "3ae7a6d9-1459-4042-9034-c90226a6240c",
			"cellName": "Window Splitting Flow: Create New Window - window.c:L1030-1038",
			"cellId": "3ae7a6d9-1459-4042-9034-c90226a6240c",
			"visible": true,
			"parentCellId": "c61bd152-dcea-427a-b0b9-0691812637d8"
		},
		"src/nvim/window.c-simstep-ede6f7ce-ff71-4955-a1ee-759d468b14ba": {
			"path": "src/nvim/window.c-simstep-ede6f7ce-ff71-4955-a1ee-759d468b14ba",
			"fileName": "window.c",
			"wiki": "The `win_split` function orchestrates the creation of a new window. It calls `win_split_ins` which allocates memory for the new window structure, links it into the window layout tree, and calculates the dimensions for both the old and new windows.",
			"cellName": "Window Splitting Flow: Create New Window - window.c:L1030-1038",
			"cellId": "3ae7a6d9-1459-4042-9034-c90226a6240c",
			"visible": true,
			"startLine": 1030,
			"endLine": 1038,
			"parentCellId": "c61bd152-dcea-427a-b0b9-0691812637d8",
			"parentPath": "src/nvim/window.c"
		},
		"b6a93422-d237-4b2c-a516-66573c166c14": {
			"path": "b6a93422-d237-4b2c-a516-66573c166c14",
			"fileName": "b6a93422-d237-4b2c-a516-66573c166c14",
			"cellName": "Window Splitting Flow: Focus New Window and Trigger Autocommands - window.c:L4969-4974",
			"cellId": "b6a93422-d237-4b2c-a516-66573c166c14",
			"visible": true,
			"parentCellId": "c61bd152-dcea-427a-b0b9-0691812637d8"
		},
		"src/nvim/window.c-simstep-93f995ef-1a38-48c1-96a1-08044a13ca4f": {
			"path": "src/nvim/window.c-simstep-93f995ef-1a38-48c1-96a1-08044a13ca4f",
			"fileName": "window.c",
			"wiki": "The `win_enter_ext` function handles the complex process of changing the active window. It updates the global `curwin` pointer, and triggers a sequence of autocommands: `WinLeave` and `BufLeave` for the old window, followed by `WinEnter` and `BufEnter` for the new one. This allows plugins to react to window layout changes.",
			"cellName": "Window Splitting Flow: Focus New Window and Trigger Autocommands - window.c:L4969-4974",
			"cellId": "b6a93422-d237-4b2c-a516-66573c166c14",
			"visible": true,
			"startLine": 4969,
			"endLine": 4974,
			"parentCellId": "c61bd152-dcea-427a-b0b9-0691812637d8",
			"parentPath": "src/nvim/window.c"
		},
		"3181d556-f0cf-4a23-be2d-37bcf7e696a2": {
			"path": "3181d556-f0cf-4a23-be2d-37bcf7e696a2",
			"fileName": "3181d556-f0cf-4a23-be2d-37bcf7e696a2",
			"cellName": "Tab Switching Flow: Keystroke Processing - normal.c:L5675-5679",
			"cellId": "3181d556-f0cf-4a23-be2d-37bcf7e696a2",
			"visible": true,
			"parentCellId": "518c0162-31c6-4815-b119-eaa40b16f756"
		},
		"src/nvim/normal.c-simstep-fdfba2d4-9a1d-4d6d-8699-3368ea7f2ce1": {
			"path": "src/nvim/normal.c-simstep-fdfba2d4-9a1d-4d6d-8699-3368ea7f2ce1",
			"fileName": "normal.c",
			"wiki": "The user presses a key combination like `gt` to switch to the next tab page. The normal mode command processor identifies the keystroke and calls the appropriate function to handle tab navigation.",
			"cellName": "Tab Switching Flow: Keystroke Processing - normal.c:L5675-5679",
			"cellId": "3181d556-f0cf-4a23-be2d-37bcf7e696a2",
			"visible": true,
			"startLine": 5675,
			"endLine": 5679,
			"parentCellId": "518c0162-31c6-4815-b119-eaa40b16f756",
			"parentPath": "src/nvim/normal.c"
		},
		"42890fde-b233-4d8a-8d22-466d3fb364b0": {
			"path": "42890fde-b233-4d8a-8d22-466d3fb364b0",
			"fileName": "42890fde-b233-4d8a-8d22-466d3fb364b0",
			"cellName": "Tab Switching Flow: Switch Active Tab Page - window.c:L4636-4652",
			"cellId": "42890fde-b233-4d8a-8d22-466d3fb364b0",
			"visible": true,
			"parentCellId": "c61bd152-dcea-427a-b0b9-0691812637d8"
		},
		"src/nvim/window.c-simstep-f73213a7-afc2-436d-8760-49676497d7e0": {
			"path": "src/nvim/window.c-simstep-f73213a7-afc2-436d-8760-49676497d7e0",
			"fileName": "window.c",
			"wiki": "The `goto_tabpage` function finds the target tab page and calls `goto_tabpage_tp` to perform the switch. This involves triggering `TabLeave` autocommands, updating the global `curtab` pointer to the new tab page, and then calling `win_enter_ext` to focus the main window within that new tab.",
			"cellName": "Tab Switching Flow: Switch Active Tab Page - window.c:L4636-4652",
			"cellId": "42890fde-b233-4d8a-8d22-466d3fb364b0",
			"visible": true,
			"startLine": 4636,
			"endLine": 4652,
			"parentCellId": "c61bd152-dcea-427a-b0b9-0691812637d8",
			"parentPath": "src/nvim/window.c"
		},
		"404214da-428b-49fb-83f8-d1e3a93fc15e": {
			"path": "404214da-428b-49fb-83f8-d1e3a93fc15e",
			"fileName": "404214da-428b-49fb-83f8-d1e3a93fc15e",
			"cellName": "Tab Switching Flow: Focus Window and Trigger Autocommands - window.c:L4969-4974",
			"cellId": "404214da-428b-49fb-83f8-d1e3a93fc15e",
			"visible": true,
			"parentCellId": "c61bd152-dcea-427a-b0b9-0691812637d8"
		},
		"src/nvim/window.c-simstep-9295a909-2af8-4f26-8a06-027a48c2764f": {
			"path": "src/nvim/window.c-simstep-9295a909-2af8-4f26-8a06-027a48c2764f",
			"fileName": "window.c",
			"wiki": "The `win_enter_ext` function manages the context switch. It triggers `WinLeave`/`BufLeave` for the window in the old tab, and `WinEnter`/`BufEnter` for the window in the new tab. Crucially, it also detects that the tab page has changed and triggers the `TabEnter` autocommand.",
			"cellName": "Tab Switching Flow: Focus Window and Trigger Autocommands - window.c:L4969-4974",
			"cellId": "404214da-428b-49fb-83f8-d1e3a93fc15e",
			"visible": true,
			"startLine": 4969,
			"endLine": 4974,
			"parentCellId": "c61bd152-dcea-427a-b0b9-0691812637d8",
			"parentPath": "src/nvim/window.c"
		},
		"992a8c59-0ac5-4caf-8281-b2350262c5dd": {
			"path": "992a8c59-0ac5-4caf-8281-b2350262c5dd",
			"fileName": "992a8c59-0ac5-4caf-8281-b2350262c5dd",
			"cellName": "Window Focus Flow: Command Execution - window.c:L5133-5146",
			"cellId": "992a8c59-0ac5-4caf-8281-b2350262c5dd",
			"visible": true,
			"parentCellId": "c61bd152-dcea-427a-b0b9-0691812637d8"
		},
		"src/nvim/window.c-simstep-53db624a-1c7f-490c-950f-7a6c769446c4": {
			"path": "src/nvim/window.c-simstep-53db624a-1c7f-490c-950f-7a6c769446c4",
			"fileName": "window.c",
			"wiki": "The user changes focus to a different window, for example by pressing `CTRL-W j` or by clicking in another window. The input is processed, the target window is identified, and `win_enter` is called to perform the focus change.",
			"cellName": "Window Focus Flow: Command Execution - window.c:L5133-5146",
			"cellId": "992a8c59-0ac5-4caf-8281-b2350262c5dd",
			"visible": true,
			"startLine": 5133,
			"endLine": 5146,
			"parentCellId": "c61bd152-dcea-427a-b0b9-0691812637d8",
			"parentPath": "src/nvim/window.c"
		},
		"7d80f3a4-fc27-4bf6-831f-251d437ae594": {
			"path": "7d80f3a4-fc27-4bf6-831f-251d437ae594",
			"fileName": "7d80f3a4-fc27-4bf6-831f-251d437ae594",
			"cellName": "Window Focus Flow: Change Focus and Trigger Autocommands - window.c:L4969-4974",
			"cellId": "7d80f3a4-fc27-4bf6-831f-251d437ae594",
			"visible": true,
			"parentCellId": "c61bd152-dcea-427a-b0b9-0691812637d8"
		},
		"src/nvim/window.c-simstep-012ef29c-1b5d-48c8-b22a-89b00092f74e": {
			"path": "src/nvim/window.c-simstep-012ef29c-1b5d-48c8-b22a-89b00092f74e",
			"fileName": "window.c",
			"wiki": "The `win_enter_ext` function is called to handle the window focus change. It updates `curwin`, and triggers the `WinLeave`/`BufLeave` autocommands for the previously active window and `WinEnter`/`BufEnter` for the newly focused window. The UI is then updated to reflect the change, such as by moving the cursor and highlighting the new active status line.",
			"cellName": "Window Focus Flow: Change Focus and Trigger Autocommands - window.c:L4969-4974",
			"cellId": "7d80f3a4-fc27-4bf6-831f-251d437ae594",
			"visible": true,
			"startLine": 4969,
			"endLine": 4974,
			"parentCellId": "c61bd152-dcea-427a-b0b9-0691812637d8",
			"parentPath": "src/nvim/window.c"
		},
		"9e0bf39e-f266-4d9a-9c03-0d22b7ce12fb": {
			"path": "9e0bf39e-f266-4d9a-9c03-0d22b7ce12fb",
			"fileName": "9e0bf39e-f266-4d9a-9c03-0d22b7ce12fb",
			"cellName": "Window Splitting\nFlow: Data\nto Splitting\nLogic",
			"cellId": "9e0bf39e-f266-4d9a-9c03-0d22b7ce12fb",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245"
		},
		"generated-edge-simstep-a50368ba-3026-4949-9850-040fea7d5ea2-9e0bf39e-f266-4d9a-9c03-0d22b7ce12fb": {
			"path": "generated-edge-simstep-a50368ba-3026-4949-9850-040fea7d5ea2-9e0bf39e-f266-4d9a-9c03-0d22b7ce12fb",
			"fileName": "ex_docmd.c",
			"cellName": "Window Splitting Flow: Data to Splitting Logic",
			"cellId": "9e0bf39e-f266-4d9a-9c03-0d22b7ce12fb",
			"visible": true,
			"startLine": 5477,
			"endLine": 5477,
			"parentPath": "src/nvim/ex_docmd.c"
		},
		"ead144be-ab0f-4248-ad7f-e5fb30eec014": {
			"path": "ead144be-ab0f-4248-ad7f-e5fb30eec014",
			"fileName": "ead144be-ab0f-4248-ad7f-e5fb30eec014",
			"cellName": "Window Splitting\nFlow: Pass\nNew Window\nto Focus",
			"cellId": "ead144be-ab0f-4248-ad7f-e5fb30eec014",
			"visible": true,
			"parentCellId": "c61bd152-dcea-427a-b0b9-0691812637d8"
		},
		"generated-edge-simstep-168b0668-7eb4-4476-9283-ff1ee1b503e5-ead144be-ab0f-4248-ad7f-e5fb30eec014": {
			"path": "generated-edge-simstep-168b0668-7eb4-4476-9283-ff1ee1b503e5-ead144be-ab0f-4248-ad7f-e5fb30eec014",
			"fileName": "window.c",
			"cellName": "Window Splitting Flow: Pass New Window to Focus",
			"cellId": "ead144be-ab0f-4248-ad7f-e5fb30eec014",
			"visible": true,
			"startLine": 1573,
			"endLine": 1575,
			"parentPath": "src/nvim/window.c"
		},
		"4b443096-05fe-4898-9296-98eb5db2ae29": {
			"path": "4b443096-05fe-4898-9296-98eb5db2ae29",
			"fileName": "4b443096-05fe-4898-9296-98eb5db2ae29",
			"cellName": "Tab Switching\nFlow: Data\nto Tab\nNavigation Logic",
			"cellId": "4b443096-05fe-4898-9296-98eb5db2ae29",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245"
		},
		"generated-edge-simstep-9a41d88b-7b69-41fd-993a-1a519ef61c5e-4b443096-05fe-4898-9296-98eb5db2ae29": {
			"path": "generated-edge-simstep-9a41d88b-7b69-41fd-993a-1a519ef61c5e-4b443096-05fe-4898-9296-98eb5db2ae29",
			"fileName": "normal.c",
			"cellName": "Tab Switching Flow: Data to Tab Navigation Logic",
			"cellId": "4b443096-05fe-4898-9296-98eb5db2ae29",
			"visible": true,
			"startLine": 5677,
			"endLine": 5677,
			"parentPath": "src/nvim/normal.c"
		},
		"50e97e8d-bb86-4a46-b410-42d0b2f46057": {
			"path": "50e97e8d-bb86-4a46-b410-42d0b2f46057",
			"fileName": "50e97e8d-bb86-4a46-b410-42d0b2f46057",
			"cellName": "Tab Switching\nFlow: Pass\nNew Window\nto Focus",
			"cellId": "50e97e8d-bb86-4a46-b410-42d0b2f46057",
			"visible": true,
			"parentCellId": "c61bd152-dcea-427a-b0b9-0691812637d8"
		},
		"generated-edge-simstep-fc05e133-dad0-4a77-ab39-c3552475cae4-50e97e8d-bb86-4a46-b410-42d0b2f46057": {
			"path": "generated-edge-simstep-fc05e133-dad0-4a77-ab39-c3552475cae4-50e97e8d-bb86-4a46-b410-42d0b2f46057",
			"fileName": "window.c",
			"cellName": "Tab Switching Flow: Pass New Window to Focus",
			"cellId": "50e97e8d-bb86-4a46-b410-42d0b2f46057",
			"visible": true,
			"startLine": 4521,
			"endLine": 4524,
			"parentPath": "src/nvim/window.c"
		},
		"13c0d90e-f6aa-4a24-bc82-47075b8c930c": {
			"path": "13c0d90e-f6aa-4a24-bc82-47075b8c930c",
			"fileName": "13c0d90e-f6aa-4a24-bc82-47075b8c930c",
			"cellName": "Window Focus\nFlow: Data\nto Focus\nLogic",
			"cellId": "13c0d90e-f6aa-4a24-bc82-47075b8c930c",
			"visible": true,
			"parentCellId": "c61bd152-dcea-427a-b0b9-0691812637d8"
		},
		"generated-edge-simstep-9b4aed79-8301-42c1-a047-e3c67385bda2-13c0d90e-f6aa-4a24-bc82-47075b8c930c": {
			"path": "generated-edge-simstep-9b4aed79-8301-42c1-a047-e3c67385bda2-13c0d90e-f6aa-4a24-bc82-47075b8c930c",
			"fileName": "window.c",
			"cellName": "Window Focus Flow: Data to Focus Logic",
			"cellId": "13c0d90e-f6aa-4a24-bc82-47075b8c930c",
			"visible": true,
			"startLine": 4956,
			"endLine": 4958,
			"parentPath": "src/nvim/window.c"
		},
		"4c9bbdcc-7533-41c0-b3b0-55ccef072e58": {
			"path": "4c9bbdcc-7533-41c0-b3b0-55ccef072e58",
			"fileName": "4c9bbdcc-7533-41c0-b3b0-55ccef072e58",
			"cellName": "shada.c",
			"cellId": "4c9bbdcc-7533-41c0-b3b0-55ccef072e58",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245"
		},
		"740ed89d-5e3a-495f-9de6-ba4011e07460": {
			"path": "740ed89d-5e3a-495f-9de6-ba4011e07460",
			"fileName": "740ed89d-5e3a-495f-9de6-ba4011e07460",
			"cellName": "Flow: Load Session - Step 1: Neovim Startup - main.c:L500-502",
			"cellId": "740ed89d-5e3a-495f-9de6-ba4011e07460",
			"visible": true,
			"parentCellId": "daae3417-8258-49a6-a129-53b01c2aaa30"
		},
		"src/nvim/main.c-simstep-db84dff7-c246-409f-9d89-49b95e2ea413": {
			"path": "src/nvim/main.c-simstep-db84dff7-c246-409f-9d89-49b95e2ea413",
			"fileName": "main.c",
			"wiki": "During the startup process, Neovim prepares to restore the previous session by reading the ShaDa (Shared Data) file. This is initiated from the main function.",
			"cellName": "Flow: Load Session - Step 1: Neovim Startup - main.c:L500-502",
			"cellId": "740ed89d-5e3a-495f-9de6-ba4011e07460",
			"visible": true,
			"startLine": 500,
			"endLine": 502,
			"parentCellId": "daae3417-8258-49a6-a129-53b01c2aaa30",
			"parentPath": "src/nvim/main.c"
		},
		"f96cb115-a054-4c97-8c4f-26c71ac71018": {
			"path": "f96cb115-a054-4c97-8c4f-26c71ac71018",
			"fileName": "f96cb115-a054-4c97-8c4f-26c71ac71018",
			"cellName": "Flow: Load Session - Step 3: Execute `shada_read_everything` - shada.c:L2887-2891",
			"cellId": "f96cb115-a054-4c97-8c4f-26c71ac71018",
			"visible": true,
			"parentCellId": "4c9bbdcc-7533-41c0-b3b0-55ccef072e58"
		},
		"src/nvim/shada.c-simstep-68470baa-c67e-427a-845b-0da191047596": {
			"path": "src/nvim/shada.c-simstep-68470baa-c67e-427a-845b-0da191047596",
			"fileName": "shada.c",
			"wiki": "The `shada_read_everything` function in `shada.c` is executed. It acts as a wrapper, setting the appropriate flags to read all relevant session data (info, marks, history, etc.) and calling the core `shada_read_file` function.",
			"cellName": "Flow: Load Session - Step 3: Execute `shada_read_everything` - shada.c:L2887-2891",
			"cellId": "f96cb115-a054-4c97-8c4f-26c71ac71018",
			"visible": true,
			"startLine": 2887,
			"endLine": 2891,
			"parentCellId": "4c9bbdcc-7533-41c0-b3b0-55ccef072e58",
			"parentPath": "src/nvim/shada.c"
		},
		"4d394212-6e1c-4cfb-b01a-edf7219aa619": {
			"path": "4d394212-6e1c-4cfb-b01a-edf7219aa619",
			"fileName": "4d394212-6e1c-4cfb-b01a-edf7219aa619",
			"cellName": "Flow: Load Session - Step 5: Parse Data and Restore State - shada.c:L2887-2891",
			"cellId": "4d394212-6e1c-4cfb-b01a-edf7219aa619",
			"visible": true,
			"parentCellId": "4c9bbdcc-7533-41c0-b3b0-55ccef072e58"
		},
		"src/nvim/shada.c-simstep-c711debd-7b2b-4545-8e35-0ff796b2b17c": {
			"path": "src/nvim/shada.c-simstep-c711debd-7b2b-4545-8e35-0ff796b2b17c",
			"fileName": "shada.c",
			"wiki": "The MessagePack data read from the file is deserialized. The parsed information is used to populate Neovim's internal state, restoring items like command history, search history, registers, marks, and the buffer list.",
			"cellName": "Flow: Load Session - Step 5: Parse Data and Restore State - shada.c:L2887-2891",
			"cellId": "4d394212-6e1c-4cfb-b01a-edf7219aa619",
			"visible": true,
			"startLine": 2887,
			"endLine": 2891,
			"parentCellId": "4c9bbdcc-7533-41c0-b3b0-55ccef072e58",
			"parentPath": "src/nvim/shada.c"
		},
		"00ea5702-7d96-4367-b992-361fb1209d10": {
			"path": "00ea5702-7d96-4367-b992-361fb1209d10",
			"fileName": "00ea5702-7d96-4367-b992-361fb1209d10",
			"cellName": "Flow: Load Session - Step 7: Startup Continues - main.c:L504-507",
			"cellId": "00ea5702-7d96-4367-b992-361fb1209d10",
			"visible": true,
			"parentCellId": "daae3417-8258-49a6-a129-53b01c2aaa30"
		},
		"src/nvim/main.c-simstep-24440508-8c7b-4e59-a317-cd461ea1ef2e": {
			"path": "src/nvim/main.c-simstep-24440508-8c7b-4e59-a317-cd461ea1ef2e",
			"fileName": "main.c",
			"wiki": "With the session state restored, the Neovim startup process continues, eventually presenting the user with their previous editing environment.",
			"cellName": "Flow: Load Session - Step 7: Startup Continues - main.c:L504-507",
			"cellId": "00ea5702-7d96-4367-b992-361fb1209d10",
			"visible": true,
			"startLine": 504,
			"endLine": 507,
			"parentCellId": "daae3417-8258-49a6-a129-53b01c2aaa30",
			"parentPath": "src/nvim/main.c"
		},
		"fb6bf2d4-5a8f-47df-b923-7a36870d3745": {
			"path": "fb6bf2d4-5a8f-47df-b923-7a36870d3745",
			"fileName": "fb6bf2d4-5a8f-47df-b923-7a36870d3745",
			"cellName": "Flow: Save Session - Step 1: Neovim Shutdown - main.c:L781-785",
			"cellId": "fb6bf2d4-5a8f-47df-b923-7a36870d3745",
			"visible": true,
			"parentCellId": "daae3417-8258-49a6-a129-53b01c2aaa30"
		},
		"src/nvim/main.c-simstep-c5571808-e2ec-47fc-a5de-9df864d59c28": {
			"path": "src/nvim/main.c-simstep-c5571808-e2ec-47fc-a5de-9df864d59c28",
			"fileName": "main.c",
			"wiki": "During a clean exit, Neovim prepares to persist the current session state (registers, history, marks, etc.) to the ShaDa file. This is one of the final steps before the process terminates.",
			"cellName": "Flow: Save Session - Step 1: Neovim Shutdown - main.c:L781-785",
			"cellId": "fb6bf2d4-5a8f-47df-b923-7a36870d3745",
			"visible": true,
			"startLine": 781,
			"endLine": 785,
			"parentCellId": "daae3417-8258-49a6-a129-53b01c2aaa30",
			"parentPath": "src/nvim/main.c"
		},
		"0c76e84d-8bce-42fb-8fe9-b7fcb367652c": {
			"path": "0c76e84d-8bce-42fb-8fe9-b7fcb367652c",
			"fileName": "0c76e84d-8bce-42fb-8fe9-b7fcb367652c",
			"cellName": "Flow: Save Session - Step 3: Execute `shada_write_file` - shada.c:L2686-2690",
			"cellId": "0c76e84d-8bce-42fb-8fe9-b7fcb367652c",
			"visible": true,
			"parentCellId": "4c9bbdcc-7533-41c0-b3b0-55ccef072e58"
		},
		"src/nvim/shada.c-simstep-4d4095e8-155c-485b-829e-3fee86027fcb": {
			"path": "src/nvim/shada.c-simstep-4d4095e8-155c-485b-829e-3fee86027fcb",
			"fileName": "shada.c",
			"wiki": "The `shada_write_file` function in `shada.c` is executed. It orchestrates the process of collecting all session data, creating a temporary file, and writing the data.",
			"cellName": "Flow: Save Session - Step 3: Execute `shada_write_file` - shada.c:L2686-2690",
			"cellId": "0c76e84d-8bce-42fb-8fe9-b7fcb367652c",
			"visible": true,
			"startLine": 2686,
			"endLine": 2690,
			"parentCellId": "4c9bbdcc-7533-41c0-b3b0-55ccef072e58",
			"parentPath": "src/nvim/shada.c"
		},
		"bd389178-8e76-4b0c-8185-5d361c46f242": {
			"path": "bd389178-8e76-4b0c-8185-5d361c46f242",
			"fileName": "bd389178-8e76-4b0c-8185-5d361c46f242",
			"cellName": "Flow: Save Session - Step 5: Serialize and Write Data - shada.c:L2727-2728",
			"cellId": "bd389178-8e76-4b0c-8185-5d361c46f242",
			"visible": true,
			"parentCellId": "4c9bbdcc-7533-41c0-b3b0-55ccef072e58"
		},
		"src/nvim/shada.c-simstep-6d6d7f55-fb2e-4dbd-b996-bf17a8df685d": {
			"path": "src/nvim/shada.c-simstep-6d6d7f55-fb2e-4dbd-b996-bf17a8df685d",
			"fileName": "shada.c",
			"wiki": "The collected session data is serialized into the MessagePack format and written sequentially into the temporary file.",
			"cellName": "Flow: Save Session - Step 5: Serialize and Write Data - shada.c:L2727-2728",
			"cellId": "bd389178-8e76-4b0c-8185-5d361c46f242",
			"visible": true,
			"startLine": 2727,
			"endLine": 2728,
			"parentCellId": "4c9bbdcc-7533-41c0-b3b0-55ccef072e58",
			"parentPath": "src/nvim/shada.c"
		},
		"0a55535d-59e2-4a2a-9a10-ed967406be4c": {
			"path": "0a55535d-59e2-4a2a-9a10-ed967406be4c",
			"fileName": "0a55535d-59e2-4a2a-9a10-ed967406be4c",
			"cellName": "Flow: Save Session - Step 7: Shutdown Continues - main.c:L787-790",
			"cellId": "0a55535d-59e2-4a2a-9a10-ed967406be4c",
			"visible": true,
			"parentCellId": "daae3417-8258-49a6-a129-53b01c2aaa30"
		},
		"src/nvim/main.c-simstep-4e39780d-ae85-48aa-b6a1-18c6ee1f1c42": {
			"path": "src/nvim/main.c-simstep-4e39780d-ae85-48aa-b6a1-18c6ee1f1c42",
			"fileName": "main.c",
			"wiki": "After successfully persisting the session state, Neovim continues its shutdown procedure and exits.",
			"cellName": "Flow: Save Session - Step 7: Shutdown Continues - main.c:L787-790",
			"cellId": "0a55535d-59e2-4a2a-9a10-ed967406be4c",
			"visible": true,
			"startLine": 787,
			"endLine": 790,
			"parentCellId": "daae3417-8258-49a6-a129-53b01c2aaa30",
			"parentPath": "src/nvim/main.c"
		},
		"f0b0406b-2704-4638-a274-af3587bf8124": {
			"path": "f0b0406b-2704-4638-a274-af3587bf8124",
			"fileName": "f0b0406b-2704-4638-a274-af3587bf8124",
			"cellName": "Flow: Load\nSession -\nStep 2:\nCall to\nRead ShaDa\nFile",
			"cellId": "f0b0406b-2704-4638-a274-af3587bf8124",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245"
		},
		"generated-edge-simstep-a2e55f12-9ca4-4a8b-a997-3e38d1e89043-f0b0406b-2704-4638-a274-af3587bf8124": {
			"path": "generated-edge-simstep-a2e55f12-9ca4-4a8b-a997-3e38d1e89043-f0b0406b-2704-4638-a274-af3587bf8124",
			"fileName": "main.c",
			"cellName": "Flow: Load Session - Step 2: Call to Read ShaDa File",
			"cellId": "f0b0406b-2704-4638-a274-af3587bf8124",
			"visible": true,
			"startLine": 501,
			"endLine": 501,
			"parentPath": "src/nvim/main.c"
		},
		"c47938c7-97a4-4c2e-8f02-795503afdb74": {
			"path": "c47938c7-97a4-4c2e-8f02-795503afdb74",
			"fileName": "c47938c7-97a4-4c2e-8f02-795503afdb74",
			"cellName": "Flow: Load\nSession -\nStep 4:\nData Read\nfrom File\nSystem",
			"cellId": "c47938c7-97a4-4c2e-8f02-795503afdb74",
			"visible": true,
			"parentCellId": "4c9bbdcc-7533-41c0-b3b0-55ccef072e58"
		},
		"generated-edge-simstep-41dbb30b-51d1-4b5c-9722-89eba53b9085-c47938c7-97a4-4c2e-8f02-795503afdb74": {
			"path": "generated-edge-simstep-41dbb30b-51d1-4b5c-9722-89eba53b9085-c47938c7-97a4-4c2e-8f02-795503afdb74",
			"fileName": "shada.c",
			"cellName": "Flow: Load Session - Step 4: Data Read from File System",
			"cellId": "c47938c7-97a4-4c2e-8f02-795503afdb74",
			"visible": true,
			"startLine": 2888,
			"endLine": 2888,
			"parentPath": "src/nvim/shada.c"
		},
		"e0b2d40c-02cc-46ac-99ee-863d04cddf64": {
			"path": "e0b2d40c-02cc-46ac-99ee-863d04cddf64",
			"fileName": "e0b2d40c-02cc-46ac-99ee-863d04cddf64",
			"cellName": "Flow: Load\nSession -\nStep 6:\nSession State\nRestored",
			"cellId": "e0b2d40c-02cc-46ac-99ee-863d04cddf64",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245"
		},
		"generated-edge-simstep-95f365fa-0c74-4ce1-b3c1-7a52c1109915-e0b2d40c-02cc-46ac-99ee-863d04cddf64": {
			"path": "generated-edge-simstep-95f365fa-0c74-4ce1-b3c1-7a52c1109915-e0b2d40c-02cc-46ac-99ee-863d04cddf64",
			"fileName": "shada.c",
			"cellName": "Flow: Load Session - Step 6: Session State Restored",
			"cellId": "e0b2d40c-02cc-46ac-99ee-863d04cddf64",
			"visible": true,
			"startLine": 502,
			"endLine": 502,
			"parentPath": "src/nvim/shada.c"
		},
		"c14a0744-ebe3-4b4e-b700-651811c24bd5": {
			"path": "c14a0744-ebe3-4b4e-b700-651811c24bd5",
			"fileName": "c14a0744-ebe3-4b4e-b700-651811c24bd5",
			"cellName": "Flow: Save\nSession -\nStep 2:\nCall to\nWrite ShaDa\nFile",
			"cellId": "c14a0744-ebe3-4b4e-b700-651811c24bd5",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245"
		},
		"generated-edge-simstep-0deb9a60-984c-41f3-a543-da8b82f5d471-c14a0744-ebe3-4b4e-b700-651811c24bd5": {
			"path": "generated-edge-simstep-0deb9a60-984c-41f3-a543-da8b82f5d471-c14a0744-ebe3-4b4e-b700-651811c24bd5",
			"fileName": "main.c",
			"cellName": "Flow: Save Session - Step 2: Call to Write ShaDa File",
			"cellId": "c14a0744-ebe3-4b4e-b700-651811c24bd5",
			"visible": true,
			"startLine": 784,
			"endLine": 784,
			"parentPath": "src/nvim/main.c"
		},
		"e42db962-cf80-495a-b05a-31ae87aeacd0": {
			"path": "e42db962-cf80-495a-b05a-31ae87aeacd0",
			"fileName": "e42db962-cf80-495a-b05a-31ae87aeacd0",
			"cellName": "Flow: Save\nSession -\nStep 4:\nCreate Temporary\nFile",
			"cellId": "e42db962-cf80-495a-b05a-31ae87aeacd0",
			"visible": true,
			"parentCellId": "4c9bbdcc-7533-41c0-b3b0-55ccef072e58"
		},
		"generated-edge-simstep-c5d68fbd-e725-44d3-990a-c2860aa0017b-e42db962-cf80-495a-b05a-31ae87aeacd0": {
			"path": "generated-edge-simstep-c5d68fbd-e725-44d3-990a-c2860aa0017b-e42db962-cf80-495a-b05a-31ae87aeacd0",
			"fileName": "shada.c",
			"cellName": "Flow: Save Session - Step 4: Create Temporary File",
			"cellId": "e42db962-cf80-495a-b05a-31ae87aeacd0",
			"visible": true,
			"startLine": 2709,
			"endLine": 2713,
			"parentPath": "src/nvim/shada.c"
		},
		"0d99bf65-8e28-4184-96a7-ef5670aa76b3": {
			"path": "0d99bf65-8e28-4184-96a7-ef5670aa76b3",
			"fileName": "0d99bf65-8e28-4184-96a7-ef5670aa76b3",
			"cellName": "Flow: Save\nSession -\nStep 6:\nAtomic Rename\nOperation",
			"cellId": "0d99bf65-8e28-4184-96a7-ef5670aa76b3",
			"visible": true,
			"parentCellId": "3e82ef51-0ca1-4920-9642-822b9ab36245"
		},
		"generated-edge-simstep-de56f49b-be1d-40e0-84b9-dc5e0393ef63-0d99bf65-8e28-4184-96a7-ef5670aa76b3": {
			"path": "generated-edge-simstep-de56f49b-be1d-40e0-84b9-dc5e0393ef63-0d99bf65-8e28-4184-96a7-ef5670aa76b3",
			"fileName": "shada.c",
			"cellName": "Flow: Save Session - Step 6: Atomic Rename Operation",
			"cellId": "0d99bf65-8e28-4184-96a7-ef5670aa76b3",
			"visible": true,
			"startLine": 2855,
			"endLine": 2856,
			"parentPath": "src/nvim/shada.c"
		}
	},
	"simulations": {
		"Core Modal Text Editing": {
			"name": "Core Modal Text Editing",
			"simSteps": [
				{
					"simStepId": "6cd87cb0-6e59-4149-819b-1f71b053ea56",
					"diagramNodeId": "fc227316-19fc-4c6b-858f-c5a2258e6038",
					"simStepLabel": "Startup & Enter Normal Mode",
					"simStepDescription": "Neovim starts. The `main` function initializes the editor and enters the main loop for Normal mode by calling `normal_enter`. The core Normal mode loop (`normal_cmd`) begins, waiting for user input.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/nvim/main.c",
						"startLine": "656",
						"endLine": "656",
						"relevantVariables": [
							"normal_enter"
						]
					},
					"inputDataExample": "{\"args\": [\"nvim\"]}",
					"outputDataExample": "{\"state\": \"Normal Mode\"}"
				},
				{
					"simStepId": "97f9849d-f37d-462d-9154-86af0bc326f3",
					"diagramNodeId": "fe1e3d63-c1dd-4302-9c49-44ebd7bab5a6",
					"simStepLabel": "Input: 'i'",
					"simStepDescription": "The user presses 'i' to enter Insert mode. This character is read from the input buffer to be processed by the Normal mode command loop.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/nvim/normal.c",
						"startLine": "514",
						"endLine": "514",
						"relevantVariables": [
							"normal_enter"
						]
					},
					"inputDataExample": "{\"key\": \"i\"}",
					"outputDataExample": "{\"key\": \"i\"}"
				},
				{
					"simStepId": "ce3da800-2568-4ad4-b612-180379aaff6d",
					"diagramNodeId": "2c454cce-3d53-4ccd-8aad-bfb51ff68f2a",
					"simStepLabel": "Process 'i' Command to Enter Insert Mode",
					"simStepDescription": "The `normal_cmd` loop identifies 'i' as a command to start insertion by looking it up in `nv_cmds`. It calls the associated function `nv_edit`, which then calls `edit()` to switch the editor to Insert mode.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/nvim/normal.c",
						"startLine": "1245",
						"endLine": "1246",
						"relevantVariables": [
							"nv_cmds",
							"s->idx",
							"cmd_func",
							"s->ca"
						]
					},
					"inputDataExample": "{\"command_char\": \"i\"}",
					"outputDataExample": "{\"new_state\": \"Insert Mode\"}"
				},
				{
					"simStepId": "56d29906-e346-4deb-8233-ed01b8e2aa43",
					"diagramNodeId": "d1f3cad6-6d29-4445-84a0-0495f39cfda5",
					"simStepLabel": "Input: User Types Text",
					"simStepDescription": "In Insert mode, the user types 'Hello'. These keystrokes are read from the input buffer by the `edit()` loop.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/nvim/edit.c",
						"startLine": "1661",
						"endLine": "1661",
						"relevantVariables": [
							"c",
							"safe_vgetc"
						]
					},
					"inputDataExample": "{\"keystrokes\": \"Hello\"}",
					"outputDataExample": "{\"keystrokes\": \"Hello\"}"
				},
				{
					"simStepId": "9ba3df3f-324c-41ca-9dbd-7937612366b7",
					"diagramNodeId": "02a5eb0d-7779-4aa6-a386-2b0c7b32599c",
					"simStepLabel": "Insert Text into Buffer",
					"simStepDescription": "The `edit()` loop processes each character of 'Hello', calling functions to insert the text into the current buffer at the cursor's position.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/nvim/edit.c",
						"startLine": "2648",
						"endLine": "2651",
						"relevantVariables": [
							"ins_plain_char"
						]
					},
					"inputDataExample": "{\"text_to_insert\": \"Hello\"}",
					"outputDataExample": "{\"buffer_content\": \"Hello\", \"cursor_position\": 5}"
				},
				{
					"simStepId": "ce7bff20-72b5-4831-8b30-d545d67e90ec",
					"diagramNodeId": "5a19ec83-0c62-4f00-b056-a07cec0c77a6",
					"simStepLabel": "Input: '<Esc>'",
					"simStepDescription": "The user presses the Escape key to exit Insert mode. This key is read by the `edit()` loop.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/nvim/edit.c",
						"startLine": "1661",
						"endLine": "1661",
						"relevantVariables": [
							"c",
							"safe_vgetc"
						]
					},
					"inputDataExample": "{\"key\": \"<Esc>\"}",
					"outputDataExample": "{\"key\": \"<Esc>\"}"
				},
				{
					"simStepId": "ba30f07d-998c-4d61-95f2-cf0cfa3da97c",
					"diagramNodeId": "20677a8e-f78e-4d90-b121-327ccef83669",
					"simStepLabel": "Process Escape and Exit Insert Mode",
					"simStepDescription": "The `edit()` loop handles the `<Esc>` key, which terminates Insert mode and causes the `edit()` function to return, passing control back to the Normal mode loop.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/nvim/edit.c",
						"startLine": "1670",
						"endLine": "1678",
						"relevantVariables": [
							"K_ESC"
						]
					},
					"inputDataExample": "{\"key\": \"<Esc>\"}",
					"outputDataExample": "{\"new_state\": \"Normal Mode\"}"
				},
				{
					"simStepId": "c71c533b-e734-4cbd-91c5-6b0d7243c82a",
					"diagramNodeId": "8765ad01-0c30-40ab-8037-fa7a2f7dfcf0",
					"simStepLabel": "Input: 'h'",
					"simStepDescription": "Back in Normal mode, the user presses 'h' to move left. The key is read by the `normal_cmd()` loop.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/nvim/normal.c",
						"startLine": "514",
						"endLine": "514",
						"relevantVariables": [
							"normal_enter"
						]
					},
					"inputDataExample": "{\"key\": \"h\"}",
					"outputDataExample": "{\"key\": \"h\"}"
				},
				{
					"simStepId": "29866267-f701-4727-927f-d97d94001177",
					"diagramNodeId": "b88cd60a-114c-4aa0-99ae-e71447500e62",
					"simStepLabel": "Process 'h' and Move Cursor",
					"simStepDescription": "The `normal_cmd` loop identifies 'h' as a cursor motion command and calls `nv_left`. This function updates the cursor's column position, moving it one character to the left.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/nvim/normal.c",
						"startLine": "3242",
						"endLine": "3252",
						"relevantVariables": [
							"nv_cursormove",
							"oneleft"
						]
					},
					"inputDataExample": "{\"command_char\": \"h\", \"cursor_before\": {\"row\": 1, \"col\": 5}}",
					"outputDataExample": "{\"cursor_after\": {\"row\": 1, \"col\": 4}}"
				}
			],
			"description": "<ul><li>This is the fundamental Vim-like modal editing experience, which is the primary reason users choose Neovim</li><li>It encompasses:</li></ul>- Normal mode for navigation and text manipulation using commands and motions<ul><li>- Insert mode for typing text</li><li>- Visual mode for selecting text blocks to operate on</li><li>- The command-line for executing Ex commands</li></ul>",
			"simulationNodesAndEdges": {
				"fc227316-19fc-4c6b-858f-c5a2258e6038": {
					"simStepIds": [
						"6cd87cb0-6e59-4149-819b-1f71b053ea56"
					]
				},
				"2c454cce-3d53-4ccd-8aad-bfb51ff68f2a": {
					"simStepIds": [
						"ce3da800-2568-4ad4-b612-180379aaff6d"
					]
				},
				"02a5eb0d-7779-4aa6-a386-2b0c7b32599c": {
					"simStepIds": [
						"9ba3df3f-324c-41ca-9dbd-7937612366b7"
					]
				},
				"20677a8e-f78e-4d90-b121-327ccef83669": {
					"simStepIds": [
						"ba30f07d-998c-4d61-95f2-cf0cfa3da97c"
					]
				},
				"b88cd60a-114c-4aa0-99ae-e71447500e62": {
					"simStepIds": [
						"29866267-f701-4727-927f-d97d94001177"
					]
				},
				"fe1e3d63-c1dd-4302-9c49-44ebd7bab5a6": {
					"simStepIds": [
						"97f9849d-f37d-462d-9154-86af0bc326f3"
					]
				},
				"d1f3cad6-6d29-4445-84a0-0495f39cfda5": {
					"simStepIds": [
						"56d29906-e346-4deb-8233-ed01b8e2aa43"
					]
				},
				"5a19ec83-0c62-4f00-b056-a07cec0c77a6": {
					"simStepIds": [
						"ce7bff20-72b5-4831-8b30-d545d67e90ec"
					]
				},
				"8765ad01-0c30-40ab-8037-fa7a2f7dfcf0": {
					"simStepIds": [
						"c71c533b-e734-4cbd-91c5-6b0d7243c82a"
					]
				}
			},
			"isAIGenerated": true,
			"keywords": "normal_enter, nv_cmds, edit",
			"generationPrompt": "Core Modal Text Editing",
			"generationKeywords": "normal_enter, nv_cmds, edit"
		},
		"LSP Integration for IDE-like Features": {
			"name": "LSP Integration for IDE-like Features",
			"simSteps": [
				{
					"simStepId": "7285d70b-8e21-4aa6-90b8-4626e8d15fce",
					"diagramNodeId": "e293cc75-5e20-4786-8bd5-3ead6698bac2",
					"simStepLabel": "LSP Flow: User Initiates LSP Client",
					"simStepDescription": "A user's configuration or a manual command triggers `vim.lsp.start` to launch and configure a language server. This function is the primary entry point for creating and managing LSP clients, handling either the creation of a new client or the reuse of an existing one that matches the project's root directory and server name.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "runtime/lua/vim/lsp.lua",
						"startLine": "660",
						"endLine": "663",
						"relevantVariables": [
							"lsp.start",
							"config",
							"opts"
						]
					},
					"inputDataExample": "{\"config\": {\"name\": \"pylsp\", \"cmd\": [\"pylsp\"], \"root_dir\": \"/home/user/my-python-project\"}, \"opts\": {\"bufnr\": 1}}",
					"outputDataExample": "{\"client_id\": 1}"
				},
				{
					"simStepId": "991e652b-dec8-4511-9657-040f168c1f1e",
					"diagramNodeId": "37af7ff0-4bcd-403d-9163-e048b49ba847",
					"simStepLabel": "LSP Flow: Configuration Data Flow",
					"simStepDescription": "The configuration object containing the server's command, name, and other settings is passed internally to the client creation and initialization logic.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "runtime/lua/vim/lsp/client.lua",
						"startLine": "35",
						"endLine": "43",
						"relevantVariables": [
							"vim.lsp.ClientConfig"
						]
					},
					"inputDataExample": "{\"config\": {\"name\": \"pylsp\", \"cmd\": [\"pylsp\"], \"root_dir\": \"/home/user/my-python-project\"}}",
					"outputDataExample": "{\"config\": {\"name\": \"pylsp\", \"cmd\": [\"pylsp\"], \"root_dir\": \"/home/user/my-python-project\"}}"
				},
				{
					"simStepId": "260ab1a1-c622-4a14-bd33-cf9a1cf5f83c",
					"diagramNodeId": "e0ce6135-616a-4bd8-8342-4d89d1a3639d",
					"simStepLabel": "LSP Flow: Client Initialization and Handshake",
					"simStepDescription": "The client starts the language server executable and establishes a connection. It then performs the LSP initialization handshake by sending an `initialize` request with the client's capabilities (e.g., support for snippets) and processes the server's response containing its own capabilities.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "runtime/lua/vim/lsp/client.lua",
						"startLine": "726",
						"endLine": "732",
						"relevantVariables": [
							"Client:request",
							"method",
							"params",
							"handler"
						]
					},
					"inputDataExample": "{\"clientCapabilities\": {\"textDocument\": {\"completion\": {\"completionItem\": {\"snippetSupport\": true}}}}}",
					"outputDataExample": "{\"serverCapabilities\": {\"completionProvider\": {\"triggerCharacters\": [\".\"]}, \"definitionProvider\": true}}"
				},
				{
					"simStepId": "c91b6617-1f87-4eb0-9c2d-e158c33d22ad",
					"diagramNodeId": "b84506f1-1881-4b72-9130-976d8f9f4dc0",
					"simStepLabel": "LSP Flow: Send `textDocument/didOpen` Notification",
					"simStepDescription": "Once initialized and attached to a buffer, the client sends a `textDocument/didOpen` notification to the server. This notification includes the document's URI, language, and its full content, allowing the server to begin analysis.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "runtime/lua/vim/lsp/client.lua",
						"startLine": "1051",
						"endLine": "1055",
						"relevantVariables": [
							"Client:_text_document_did_open_handler"
						]
					},
					"inputDataExample": "{\"jsonrpc\": \"2.0\", \"method\": \"textDocument/didOpen\", \"params\": {\"textDocument\": {\"uri\": \"file:///home/user/my-python-project/main.py\", \"languageId\": \"python\", \"version\": 1, \"text\": \"import os\\n\\ndef main():\\n    print(os.getcwd())\\n\"}}}",
					"outputDataExample": "{\"jsonrpc\": \"2.0\", \"method\": \"textDocument/didOpen\", \"params\": {\"textDocument\": {\"uri\": \"file:///home/user/my-python-project/main.py\", \"languageId\": \"python\", \"version\": 1, \"text\": \"import os\\n\\ndef main():\\n    print(os.getcwd())\\n\"}}}"
				},
				{
					"simStepId": "33be5e65-fed2-40c8-8efb-07b9cc952325",
					"diagramNodeId": "f095a9dc-2d06-437b-93aa-3a7dd3ed833f",
					"simStepLabel": "LSP Flow: Server Analyzes Document and Publishes Diagnostics",
					"simStepDescription": "The language server, running as a separate process, receives the document content and performs static analysis. If any errors or warnings are found, it sends a `textDocument/publishDiagnostics` notification back to Neovim, which then displays them in the editor.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "test/functional/plugin/lsp/diagnostic_spec.lua",
						"startLine": "535",
						"endLine": "549",
						"relevantVariables": [
							"vim.lsp.diagnostic.on_diagnostic"
						]
					},
					"inputDataExample": "{\"jsonrpc\": \"2.0\", \"method\": \"textDocument/publishDiagnostics\", \"params\": {\"uri\": \"file:///home/user/project/main.py\", \"diagnostics\": [{\"range\": {\"start\": {\"line\": 2, \"character\": 4}, \"end\": {\"line\": 2, \"character\": 8}}, \"message\": \"Undefined variable 'prin'\", \"severity\": 1}]}}",
					"outputDataExample": "{}"
				},
				{
					"simStepId": "96875ef8-e9b3-4a79-bcf9-36d53942e9a8",
					"diagramNodeId": "45325d38-b4bd-4abf-bbac-e3412106c58d",
					"simStepLabel": "LSP Flow: User Triggers 'Go to Definition'",
					"simStepDescription": "The user presses a keymap that invokes `vim.lsp.buf.definition()`. This action gathers the current buffer and cursor position, preparing them as parameters for a `textDocument/definition` request.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "runtime/lua/vim/lsp/buf.lua",
						"startLine": "195",
						"endLine": "218",
						"relevantVariables": [
							"definition",
							"lsp.buf_request_all"
						]
					},
					"inputDataExample": "{\"cursor_position\": {\"line\": 3, \"character\": 10}, \"bufnr\": 1}",
					"outputDataExample": "{\"cursor_position\": {\"line\": 3, \"character\": 10}, \"bufnr\": 1}"
				},
				{
					"simStepId": "1aa5f8e4-cfa3-4a67-af6f-017ce5243174",
					"diagramNodeId": "4bca555a-8aaa-4a0a-911c-c9888268799d",
					"simStepLabel": "LSP Flow: `buf_request_all` Dispatches Request",
					"simStepDescription": "The `vim.lsp.buf_request_all` function sends a request to all clients attached to the buffer that support the method ('textDocument/definition'). This architecture allows multiple servers to respond to the same request, with a handler function aggregating the results.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "runtime/lua/vim/lsp.lua",
						"startLine": "1250",
						"endLine": "1254",
						"relevantVariables": [
							"lsp.buf_request_all",
							"bufnr",
							"method",
							"params",
							"handler"
						]
					},
					"inputDataExample": "{\"bufnr\": 1, \"method\": \"textDocument/definition\", \"params\": {\"textDocument\": {\"uri\": \"file:///.../main.py\"}, \"position\": {\"line\": 3, \"character\": 10}}}",
					"outputDataExample": "{\"results\": {\"1\": {\"result\": {\"uri\": \"file:///.../os.pyi\", \"range\": {\"start\": {\"line\": 1, \"character\": 1}}}}}}"
				},
				{
					"simStepId": "1c87e4cd-3060-479a-b444-c6231b81416a",
					"diagramNodeId": "1f01c4c8-b7af-43de-b0b0-90fe2b54c7f4",
					"simStepLabel": "LSP Flow: Server Responds with Definition Location",
					"simStepDescription": "The language server processes the 'go to definition' request and sends a response containing the location (URI and range) of the symbol's definition. This data is transmitted back to the Neovim client.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "runtime/lua/vim/lsp.lua",
						"startLine": "1251",
						"endLine": "1251",
						"relevantVariables": [
							"handler",
							"results"
						]
					},
					"inputDataExample": "{\"jsonrpc\": \"2.0\", \"id\": 2, \"result\": {\"uri\": \"file:///usr/lib/python3.10/os.pyi\", \"range\": {\"start\": {\"line\": 100, \"character\": 4}, \"end\": {\"line\": 100, \"character\": 11}}}}",
					"outputDataExample": "{\"jsonrpc\": \"2.0\", \"id\": 2, \"result\": {\"uri\": \"file:///usr/lib/python3.10/os.pyi\", \"range\": {\"start\": {\"line\": 100, \"character\": 4}, \"end\": {\"line\": 100, \"character\": 11}}}}"
				},
				{
					"simStepId": "bd6ae996-e127-46cb-b8a3-ef60eb19bd3c",
					"diagramNodeId": "bf73463f-8a85-4599-a168-942be8f9397a",
					"simStepLabel": "LSP Flow: Neovim Jumps to Definition",
					"simStepDescription": "The client's handler receives the response. The default `textDocument/definition` handler processes the location data and executes commands to open the target file and move the cursor to the specified range, effectively 'jumping' to the definition.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "runtime/lua/vim/lsp/handlers.lua",
						"startLine": "377",
						"endLine": "380",
						"relevantVariables": [
							"M['textDocument/definition']",
							"util.jump_to_location"
						]
					},
					"inputDataExample": "{\"location\": {\"uri\": \"file:///usr/lib/python3.10/os.pyi\", \"range\": {\"start\": {\"line\": 100, \"character\": 4}, \"end\": {\"line\": 100, \"character\": 11}}}}",
					"outputDataExample": "{\"status\": \"jump_successful\"}"
				}
			],
			"description": "<ul><li>Neovim acts as a client for the Language Server Protocol (LSP), providing modern IDE features directly within the editor</li><li>This dramatically enhances developer productivity by offering:</li></ul>- Intelligent, context-aware code completion<ul><li>- Real-time diagnostics (errors and warnings)</li><li>- Go-to-definition, find references, and hover information</li><li>- Code actions for refactoring and quick fixes</li></ul>",
			"simulationNodesAndEdges": {
				"e293cc75-5e20-4786-8bd5-3ead6698bac2": {
					"simStepIds": [
						"7285d70b-8e21-4aa6-90b8-4626e8d15fce"
					]
				},
				"e0ce6135-616a-4bd8-8342-4d89d1a3639d": {
					"simStepIds": [
						"260ab1a1-c622-4a14-bd33-cf9a1cf5f83c"
					]
				},
				"f095a9dc-2d06-437b-93aa-3a7dd3ed833f": {
					"simStepIds": [
						"33be5e65-fed2-40c8-8efb-07b9cc952325"
					]
				},
				"4bca555a-8aaa-4a0a-911c-c9888268799d": {
					"simStepIds": [
						"1aa5f8e4-cfa3-4a67-af6f-017ce5243174"
					]
				},
				"bf73463f-8a85-4599-a168-942be8f9397a": {
					"simStepIds": [
						"bd6ae996-e127-46cb-b8a3-ef60eb19bd3c"
					]
				},
				"37af7ff0-4bcd-403d-9163-e048b49ba847": {
					"simStepIds": [
						"991e652b-dec8-4511-9657-040f168c1f1e"
					]
				},
				"b84506f1-1881-4b72-9130-976d8f9f4dc0": {
					"simStepIds": [
						"c91b6617-1f87-4eb0-9c2d-e158c33d22ad"
					]
				},
				"45325d38-b4bd-4abf-bbac-e3412106c58d": {
					"simStepIds": [
						"96875ef8-e9b3-4a79-bcf9-36d53942e9a8"
					]
				},
				"1f01c4c8-b7af-43de-b0b0-90fe2b54c7f4": {
					"simStepIds": [
						"1c87e4cd-3060-479a-b444-c6231b81416a"
					]
				}
			},
			"isAIGenerated": true,
			"keywords": "vim.lsp.start, buf_request_all, textDocument/didOpen",
			"generationPrompt": "LSP Integration for IDE-like Features",
			"generationKeywords": "vim.lsp.start, buf_request_all, textDocument/didOpen"
		},
		"Extensibility via Lua and Remote Plugins (RPC)": {
			"name": "Extensibility via Lua and Remote Plugins (RPC)",
			"simSteps": [
				{
					"simStepId": "e90fe967-7096-4e2a-a379-5da61500f5ad",
					"diagramNodeId": "31e11097-71a3-4628-a17e-03bcd497f17a",
					"simStepLabel": "Lua Flow: Client Initiates Lua Execution",
					"simStepDescription": "A remote client, such as a plugin or external tool, decides to execute a piece of Lua code within Neovim. It invokes the `nvim_exec_lua` API function, providing the Lua code as a string and any arguments. This is a primary mechanism for extending Neovim's functionality.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/nvim/api/vim.c",
						"startLine": "508",
						"endLine": "516",
						"relevantVariables": [
							"nvim_exec_lua",
							"nlua_exec"
						]
					},
					"inputDataExample": "{\"code\": \"return vim.api.nvim_get_option_value('tabstop', {})\", \"args\": []}",
					"outputDataExample": "{\"result\": 8}"
				},
				{
					"simStepId": "6edc8b6c-ad0d-4b49-9d4f-ff2a5541fc12",
					"diagramNodeId": "c4370b54-f066-4dd4-b415-a34ea80dece1",
					"simStepLabel": "Lua Flow: RPC Request Transmission",
					"simStepDescription": "The client's API call is serialized into a MessagePack-RPC request message. This message is sent over the established communication channel (e.g., stdio, socket) to the Neovim instance. The request is uniquely identified by an ID to correlate the response.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/nvim/msgpack_rpc/channel.c",
						"startLine": "43",
						"endLine": "65",
						"relevantVariables": [
							"log_request"
						]
					},
					"inputDataExample": "{\"type\": 0, \"request_id\": 1, \"method\": \"nvim_exec_lua\", \"params\": [\"return vim.api.nvim_get_option_value('tabstop', {})\", []]}",
					"outputDataExample": "{\"type\": 0, \"request_id\": 1, \"method\": \"nvim_exec_lua\", \"params\": [\"return vim.api.nvim_get_option_value('tabstop', {})\", []]}"
				},
				{
					"simStepId": "8ae7f84a-1a1b-4322-b57f-b46112a80606",
					"diagramNodeId": "fff81b0f-701d-42b5-b480-35ba647a110b",
					"simStepLabel": "Lua Flow: RPC Request Dispatch",
					"simStepDescription": "The Neovim server receives and unpacks the RPC request. The dispatcher identifies the method as `nvim_exec_lua` and routes it to the corresponding C implementation. This involves decoding the arguments from the request message.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/gen/gen_api_dispatch.lua",
						"startLine": "489",
						"endLine": "501",
						"relevantVariables": [
							"handle_nvim_exec_lua"
						]
					},
					"inputDataExample": "{\"method\": \"nvim_exec_lua\", \"params\": [\"return vim.api.nvim_get_option_value('tabstop', {})\", []]}",
					"outputDataExample": "{\"function_call\": \"nvim_exec_lua(...)\"}"
				},
				{
					"simStepId": "25537fc1-ca1f-4165-ab60-a95291896749",
					"diagramNodeId": "18624e15-0ced-41b9-95df-80fc52ad2372",
					"simStepLabel": "Lua Flow: Invocation of Lua Executor",
					"simStepDescription": "The `nvim_exec_lua` C function acts as a bridge, passing the Lua code and its arguments from the API layer to Neovim's internal Lua execution engine.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/nvim/api/vim.c",
						"startLine": "512",
						"endLine": "513",
						"relevantVariables": [
							"nlua_exec"
						]
					},
					"inputDataExample": "{\"code\": \"return vim.api.nvim_get_option_value('tabstop', {})\", \"args\": []}",
					"outputDataExample": "{\"code\": \"return vim.api.nvim_get_option_value('tabstop', {})\", \"args\": []}"
				},
				{
					"simStepId": "b4ea1d34-c777-4eef-99a2-055ab46ebae3",
					"diagramNodeId": "85a2b631-046a-4d2e-9688-b377359baf28",
					"simStepLabel": "Lua Flow: Core Lua Execution",
					"simStepDescription": "The `nlua_exec` function compiles the Lua string into a chunk, pushes any arguments onto the Lua stack, and executes it in a protected environment using `nlua_pcall`. The script interacts with the Neovim API and produces a return value.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/nvim/lua/executor.c",
						"startLine": "1539",
						"endLine": "1570",
						"relevantVariables": [
							"nlua_exec",
							"luaL_loadbuffer",
							"nlua_pcall"
						]
					},
					"inputDataExample": "{\"code\": \"return vim.api.nvim_get_option_value('tabstop', {})\", \"args\": []}",
					"outputDataExample": "8 (on Lua stack)"
				},
				{
					"simStepId": "60ab6c21-5fbe-4b3f-827c-ba58ef4822a8",
					"diagramNodeId": "b1fd5e98-d66d-4c75-9d33-f83579123e5f",
					"simStepLabel": "Lua Flow: Result Conversion",
					"simStepDescription": "The value returned from the Lua script, which resides on the Lua stack, is converted into Neovim's generic `Object` representation. This allows the value to be serialized for the RPC response.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/nvim/lua/executor.c",
						"startLine": "1570",
						"endLine": "1570",
						"relevantVariables": [
							"nlua_call_pop_retval"
						]
					},
					"inputDataExample": "8 (Lua number)",
					"outputDataExample": "{\"type\": \"kObjectTypeInteger\", \"data\": {\"integer\": 8}}"
				},
				{
					"simStepId": "a1524e46-90af-42d0-932d-0409e297ac6a",
					"diagramNodeId": "4fbea5b8-b765-4807-b632-8b786d0a0d70",
					"simStepLabel": "Lua Flow: RPC Response Preparation",
					"simStepDescription": "The resulting `Object` is packaged into an RPC response message. This response includes the ID of the original request, ensuring the client can match the response to its request.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/nvim/msgpack_rpc/channel.c",
						"startLine": "52",
						"endLine": "56",
						"relevantVariables": [
							"log_response"
						]
					},
					"inputDataExample": "{\"result_object\": {\"type\": \"kObjectTypeInteger\", \"data\": {\"integer\": 8}}}",
					"outputDataExample": "{\"type\": 1, \"request_id\": 1, \"error\": null, \"result\": 8}"
				},
				{
					"simStepId": "380198f0-45b1-4d1a-8c80-0009eebec9f3",
					"diagramNodeId": "bf182636-f4f4-4bfb-a7a4-554cc41c8581",
					"simStepLabel": "Lua Flow: RPC Response to Client",
					"simStepDescription": "The complete RPC response message is serialized using MessagePack and sent back to the client over the communication channel, completing the request-response cycle.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/nvim/msgpack_rpc/channel.c",
						"startLine": "111",
						"endLine": "121",
						"relevantVariables": [
							"rpc_send_event"
						]
					},
					"inputDataExample": "{\"type\": 1, \"request_id\": 1, \"error\": null, \"result\": 8}",
					"outputDataExample": "{\"type\": 1, \"request_id\": 1, \"error\": null, \"result\": 8}"
				},
				{
					"simStepId": "0d69d455-ba83-4959-9cb2-45699a974fd0",
					"diagramNodeId": "46f86789-0248-4b10-bead-693655638e6c",
					"simStepLabel": "RPC Flow: Client Subscribes to Buffer Events",
					"simStepDescription": "A remote plugin or UI client calls `nvim_buf_attach` to register for notifications about changes to a specific buffer. This allows the client to stay in sync with the buffer's content without constant polling.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/nvim/api/buffer.c",
						"startLine": "157",
						"endLine": "165",
						"relevantVariables": [
							"nvim_buf_attach"
						]
					},
					"inputDataExample": "{\"buffer\": 1, \"send_buffer\": true, \"opts\": {}}",
					"outputDataExample": "true"
				},
				{
					"simStepId": "6d5e5c2b-9cfb-4004-b761-37a44ad6d3ba",
					"diagramNodeId": "c04837e6-8337-4bea-8515-40e0a03f4142",
					"simStepLabel": "RPC Flow: RPC Request for Subscription",
					"simStepDescription": "The `nvim_buf_attach` call is serialized into an RPC request and sent from the client to the Neovim server.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/nvim/msgpack_rpc/channel.c",
						"startLine": "43",
						"endLine": "65",
						"relevantVariables": [
							"log_request"
						]
					},
					"inputDataExample": "{\"type\": 0, \"request_id\": 2, \"method\": \"nvim_buf_attach\", \"params\": [1, true, {}]}",
					"outputDataExample": "{\"type\": 0, \"request_id\": 2, \"method\": \"nvim_buf_attach\", \"params\": [1, true, {}]}"
				},
				{
					"simStepId": "b658af9c-ebd9-494e-b291-212321993faa",
					"diagramNodeId": "e426ac26-0c5f-452f-95ef-0bc4d3155e13",
					"simStepLabel": "RPC Flow: Channel Registration for Updates",
					"simStepDescription": "Neovim's `nvim_buf_attach` implementation calls `buf_updates_register`, which adds the client's unique `channel_id` to an internal list of subscribers for that buffer. Neovim now knows to forward changes for this buffer to this client.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/nvim/buffer_updates.c",
						"startLine": "25",
						"endLine": "40",
						"relevantVariables": [
							"buf_updates_register",
							"buf->update_channels"
						]
					},
					"inputDataExample": "{\"buffer_handle\": 1, \"channel_id\": 4}",
					"outputDataExample": "null"
				},
				{
					"simStepId": "adcaaaaa-777b-45f5-b480-33caf014d0cb",
					"diagramNodeId": "a94f68c5-32d9-43da-905d-bc6447da521c",
					"simStepLabel": "RPC Flow: Buffer Change Event Triggered",
					"simStepDescription": "A user action (e.g., typing in insert mode) or a command modifies the buffer. This modification triggers Neovim's internal buffer update mechanism, which prepares to notify all subscribed clients.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/nvim/buffer_updates.c",
						"startLine": "242",
						"endLine": "250",
						"relevantVariables": [
							"buf_updates_send_changes",
							"rpc_send_event"
						]
					},
					"inputDataExample": "{\"buffer\": 1, \"change_details\": {\"start_line\": 5, \"end_line\": 5, \"new_text\": [\"hello world\"]}}",
					"outputDataExample": "{\"buffer\": 1, \"change_details\": {\"start_line\": 5, \"end_line\": 5, \"new_text\": [\"hello world\"]}}"
				},
				{
					"simStepId": "ca2f44d1-d6e3-466d-89eb-002ddce8c542",
					"diagramNodeId": "5dc1c1a8-b187-4f36-b145-1ff67f3f0491",
					"simStepLabel": "RPC Flow: Notification Message Creation",
					"simStepDescription": "For each subscribed channel, the `rpc_send_event` function is invoked. It constructs a MessagePack-RPC notification message (type 2) containing the event name (`nvim_buf_lines_event`) and detailed parameters about the buffer change.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/nvim/msgpack_rpc/channel.c",
						"startLine": "111",
						"endLine": "119",
						"relevantVariables": [
							"rpc_send_event"
						]
					},
					"inputDataExample": "{\"channel_id\": 4, \"event_name\": \"nvim_buf_lines_event\", \"args\": [1, 12, 5, 5, [\"hello world\"], false]}",
					"outputDataExample": "{\"type\": 2, \"method\": \"nvim_buf_lines_event\", ...}"
				},
				{
					"simStepId": "bec04672-ed73-4355-b5f1-9d50d4645de4",
					"diagramNodeId": "59aeeb9e-643a-4601-8a22-39c6e11be803",
					"simStepLabel": "RPC Flow: Notification Transmitted to Client",
					"simStepDescription": "The RPC notification is serialized and sent to the remote plugin's channel. Unlike requests, notifications are fire-and-forget; Neovim does not wait for a response.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/nvim/msgpack_rpc/channel.c",
						"startLine": "111",
						"endLine": "121",
						"relevantVariables": [
							"rpc_send_event"
						]
					},
					"inputDataExample": "{\"type\": 2, \"method\": \"nvim_buf_lines_event\", \"params\": [1, 12, 5, 5, [\"hello world\"], false]}",
					"outputDataExample": "{\"type\": 2, \"method\": \"nvim_buf_lines_event\", \"params\": [1, 12, 5, 5, [\"hello world\"], false]}"
				},
				{
					"simStepId": "b29b725a-05a6-4330-b933-4b5840467ce4",
					"diagramNodeId": "482a08e2-311f-426b-966a-80fe2545beec",
					"simStepLabel": "RPC Flow: Client Processes Event",
					"simStepDescription": "The remote client receives the `nvim_buf_lines_event` notification. It deserializes the message and uses the provided data to update its own state or UI, reflecting the change made within Neovim.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/nvim/api/events.c",
						"startLine": "32",
						"endLine": "48",
						"relevantVariables": [
							"nvim_error_event",
							"nvim_ui_term_event"
						]
					},
					"inputDataExample": "{\"type\": 2, \"method\": \"nvim_buf_lines_event\", \"params\": [1, 12, 5, 5, [\"hello world\"], false]}",
					"outputDataExample": "null"
				}
			],
			"description": "<ul><li>A core design principle of Neovim is its powerful extensibility</li><li>This allows for a rich ecosystem of plugins that define the modern Neovim experience</li><li>- Deep integration with Lua for writing fast and powerful plugins</li><li>- A MessagePack-RPC API that allows plugins to be written in any language and run as separate, non-blocking processes</li><li>- Provides API functions to control every aspect of the editor, from text manipulation to UI management</li></ul>",
			"simulationNodesAndEdges": {
				"31e11097-71a3-4628-a17e-03bcd497f17a": {
					"simStepIds": [
						"e90fe967-7096-4e2a-a379-5da61500f5ad"
					]
				},
				"fff81b0f-701d-42b5-b480-35ba647a110b": {
					"simStepIds": [
						"8ae7f84a-1a1b-4322-b57f-b46112a80606"
					]
				},
				"85a2b631-046a-4d2e-9688-b377359baf28": {
					"simStepIds": [
						"b4ea1d34-c777-4eef-99a2-055ab46ebae3"
					]
				},
				"4fbea5b8-b765-4807-b632-8b786d0a0d70": {
					"simStepIds": [
						"a1524e46-90af-42d0-932d-0409e297ac6a"
					]
				},
				"46f86789-0248-4b10-bead-693655638e6c": {
					"simStepIds": [
						"0d69d455-ba83-4959-9cb2-45699a974fd0"
					]
				},
				"e426ac26-0c5f-452f-95ef-0bc4d3155e13": {
					"simStepIds": [
						"b658af9c-ebd9-494e-b291-212321993faa"
					]
				},
				"5dc1c1a8-b187-4f36-b145-1ff67f3f0491": {
					"simStepIds": [
						"ca2f44d1-d6e3-466d-89eb-002ddce8c542"
					]
				},
				"482a08e2-311f-426b-966a-80fe2545beec": {
					"simStepIds": [
						"b29b725a-05a6-4330-b933-4b5840467ce4"
					]
				},
				"c4370b54-f066-4dd4-b415-a34ea80dece1": {
					"simStepIds": [
						"6edc8b6c-ad0d-4b49-9d4f-ff2a5541fc12"
					]
				},
				"18624e15-0ced-41b9-95df-80fc52ad2372": {
					"simStepIds": [
						"25537fc1-ca1f-4165-ab60-a95291896749"
					]
				},
				"b1fd5e98-d66d-4c75-9d33-f83579123e5f": {
					"simStepIds": [
						"60ab6c21-5fbe-4b3f-827c-ba58ef4822a8"
					]
				},
				"bf182636-f4f4-4bfb-a7a4-554cc41c8581": {
					"simStepIds": [
						"380198f0-45b1-4d1a-8c80-0009eebec9f3"
					]
				},
				"c04837e6-8337-4bea-8515-40e0a03f4142": {
					"simStepIds": [
						"6d5e5c2b-9cfb-4004-b761-37a44ad6d3ba"
					]
				},
				"a94f68c5-32d9-43da-905d-bc6447da521c": {
					"simStepIds": [
						"adcaaaaa-777b-45f5-b480-33caf014d0cb"
					]
				},
				"59aeeb9e-643a-4601-8a22-39c6e11be803": {
					"simStepIds": [
						"bec04672-ed73-4355-b5f1-9d50d4645de4"
					]
				}
			},
			"isAIGenerated": true,
			"keywords": "nvim_exec_lua, rpc_send_event, channel_id",
			"generationPrompt": "Extensibility via Lua and Remote Plugins (RPC)",
			"generationKeywords": "nvim_exec_lua, rpc_send_event, channel_id"
		},
		"Tree-sitter for Advanced Syntax Analysis": {
			"name": "Tree-sitter for Advanced Syntax Analysis",
			"simSteps": [
				{
					"simStepId": "2ce887f3-1c98-4e7c-86ca-933fcc495bde",
					"diagramNodeId": "7aa38225-a4b8-4f1d-9141-12e9852e4e34",
					"simStepLabel": "Initiate Tree-sitter Highlighting",
					"simStepDescription": "A user or a filetype plugin triggers Tree-sitter highlighting for a specific buffer, typically by calling `vim.treesitter.start()`. This function serves as the main entry point to activate the Tree-sitter engine for the specified buffer and language.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "runtime/lua/vim/treesitter.lua",
						"startLine": "448",
						"endLine": "459",
						"relevantVariables": [
							"M.start",
							"bufnr",
							"lang",
							"M.get_parser",
							"M.highlighter.new"
						]
					},
					"inputDataExample": "{\n  \"bufnr\": 1,\n  \"lang\": \"c\"\n}",
					"outputDataExample": "{\n  \"status\": \"Highlighter activated for buffer 1\"\n}"
				},
				{
					"simStepId": "5dba9709-8b53-4522-a226-1255977972e2",
					"diagramNodeId": "6b5b5667-53fe-46bd-a0c8-113bd6acf036",
					"simStepLabel": "Request Parser",
					"simStepDescription": "The `start` function calls `get_parser` to obtain a parser instance for the specified language, which is necessary for understanding the code structure.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "runtime/lua/vim/treesitter.lua",
						"startLine": "457",
						"endLine": "457",
						"relevantVariables": [
							"M.get_parser"
						]
					},
					"inputDataExample": "{\n  \"bufnr\": 1,\n  \"lang\": \"c\",\n  \"opts\": {\n    \"error\": false\n  }\n}",
					"outputDataExample": "{\n  \"bufnr\": 1,\n  \"lang\": \"c\",\n  \"opts\": {\n    \"error\": false\n  }\n}"
				},
				{
					"simStepId": "b106e0a3-768d-4282-9ec6-deb881ed3a1f",
					"diagramNodeId": "93970937-dacb-4c62-9725-9ad01d11a22b",
					"simStepLabel": "Get or Create Parser",
					"simStepDescription": "`get_parser` checks if a parser for the given buffer already exists in a cache. If not, it creates a new `LanguageTree` object, which involves finding and loading the compiled parser library (e.g., a `.so` or `.wasm` file) for the requested language from the runtime path.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "runtime/lua/vim/treesitter.lua",
						"startLine": "79",
						"endLine": "110",
						"relevantVariables": [
							"M.get_parser",
							"M.languagetree.active",
							"vim.treesitter.languagetree.new"
						]
					},
					"inputDataExample": "{\n  \"bufnr\": 1,\n  \"lang\": \"c\",\n  \"opts\": {\n    \"error\": false\n  }\n}",
					"outputDataExample": "{\n  \"parser_object\": \"<vim.treesitter.LanguageTree>\"\n}"
				},
				{
					"simStepId": "530b9af3-8047-4f6c-91e5-701c96342342",
					"diagramNodeId": "c982b52f-3fbc-4b47-9bf1-7ca1b1bae9be",
					"simStepLabel": "Return Parser Object",
					"simStepDescription": "The `get_parser` function returns the `LanguageTree` object, which is now ready to parse the buffer's content.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "runtime/lua/vim/treesitter.lua",
						"startLine": "109",
						"endLine": "109",
						"relevantVariables": [
							"ltree"
						]
					},
					"inputDataExample": "{\n  \"parser_object\": \"<vim.treesitter.LanguageTree>\"\n}",
					"outputDataExample": "{\n  \"parser_object\": \"<vim.treesitter.LanguageTree>\"\n}"
				},
				{
					"simStepId": "a3288e50-6bde-43b0-bc27-3c65c895f56b",
					"diagramNodeId": "faf022ed-202f-4486-a745-9879dddddd64",
					"simStepLabel": "Create Highlighter",
					"simStepDescription": "Back in the `start` function, a new highlighter object is instantiated using the acquired parser. This object will manage the highlighting process.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "runtime/lua/vim/treesitter.lua",
						"startLine": "458",
						"endLine": "458",
						"relevantVariables": [
							"M.highlighter.new",
							"parser"
						]
					},
					"inputDataExample": "{\n  \"parser_object\": \"<vim.treesitter.LanguageTree>\"\n}",
					"outputDataExample": "{\n  \"highlighter_object\": \"<vim.treesitter.highlighter>\"\n}"
				},
				{
					"simStepId": "e6ebf4a4-da88-40bf-b8de-f0c56ef6348e",
					"diagramNodeId": "e3d6dd51-b944-4735-8529-14e3983629fc",
					"simStepLabel": "Initialize Highlighter State",
					"simStepDescription": "The `highlighter.new` constructor is called with the parser object. It initializes the highlighter's state and makes it active for the buffer, preparing it to respond to redraw events.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "runtime/lua/vim/treesitter/highlighter.lua",
						"startLine": "82",
						"endLine": "95",
						"relevantVariables": [
							"TSHighlighter.new",
							"tree",
							"opts"
						]
					},
					"inputDataExample": "{\n  \"parser_object\": \"<vim.treesitter.LanguageTree>\"\n}",
					"outputDataExample": "{\n  \"parser_object\": \"<vim.treesitter.LanguageTree>\"\n}"
				},
				{
					"simStepId": "337810a2-50ef-4efc-b86b-493e5700c80f",
					"diagramNodeId": "4557371b-3e9f-4a57-964a-a28fd8585a02",
					"simStepLabel": "Load Highlighting Query",
					"simStepDescription": "When highlighting is needed (e.g., on a redraw), the highlighter fetches the corresponding query file (e.g., `highlights.scm`) for the language. This is done via `vim.treesitter.query.get`, which reads the file and parses it into a query object.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "runtime/lua/vim/treesitter/highlighter.lua",
						"startLine": "270",
						"endLine": "279",
						"relevantVariables": [
							"TSHighlighter:get_query",
							"TSHighlighterQuery.new",
							"query.get"
						]
					},
					"inputDataExample": "{\n  \"lang\": \"c\",\n  \"query_name\": \"highlights\"\n}",
					"outputDataExample": "{\n  \"query_object\": \"<vim.treesitter.Query>\"\n}"
				},
				{
					"simStepId": "98d1a2a4-a75c-4e5e-b766-25dedda3d53b",
					"diagramNodeId": "88fd2a96-8449-40d8-a0d0-316a2165218a",
					"simStepLabel": "Return Parsed Query",
					"simStepDescription": "The parsed query object, containing patterns and capture groups, is returned to the highlighter.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "runtime/lua/vim/treesitter/highlighter.lua",
						"startLine": "23",
						"endLine": "23",
						"relevantVariables": [
							"self._query"
						]
					},
					"inputDataExample": "{\n  \"query_object\": \"<vim.treesitter.Query>\"\n}",
					"outputDataExample": "{\n  \"query_object\": \"<vim.treesitter.Query>\"\n}"
				},
				{
					"simStepId": "7d7d67ad-119f-499e-9186-2a977659976b",
					"diagramNodeId": "976474cd-262a-4313-a059-c0248bc26b98",
					"simStepLabel": "Parse Buffer and Iterate Captures",
					"simStepDescription": "Triggered by a redraw event, the decoration provider invokes the highlighter. The highlighter first ensures the buffer is parsed, creating a syntax tree. It then uses the loaded query to iterate over all matching nodes (captures) in the tree within the visible range.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "runtime/lua/vim/treesitter/highlighter.lua",
						"startLine": "390",
						"endLine": "407",
						"relevantVariables": [
							"state.iter",
							"state.highlighter_query:query():iter_captures",
							"root_node",
							"capture",
							"node"
						]
					},
					"inputDataExample": "{\n  \"buffer_content\": \"int main() { return 0; }\",\n  \"query_content\": \"(primitive_type) @type.builtin\\n(function_declarator) @function\"\n}",
					"outputDataExample": "{\n  \"capture_name\": \"@type.builtin\",\n  \"node_text\": \"int\",\n  \"node_range\": [0, 0, 0, 3]\n}"
				},
				{
					"simStepId": "bc86d8cf-ccf7-4600-a925-84771a4a0ee3",
					"diagramNodeId": "4cb73b91-a5c3-4c64-b0f0-fe8eba752b22",
					"simStepLabel": "Apply Highlight Extmark",
					"simStepDescription": "For each node captured by the query, the highlighter determines the text range and the associated highlight group. It then calls `nvim_buf_set_extmark` to apply the highlight to that specific region of the buffer.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "runtime/lua/vim/treesitter/highlighter.lua",
						"startLine": "446",
						"endLine": "459",
						"relevantVariables": [
							"api.nvim_buf_set_extmark",
							"buf",
							"ns",
							"start_row",
							"start_col",
							"hl_group",
							"priority",
							"conceal"
						]
					},
					"inputDataExample": "{\n  \"buf\": 1,\n  \"ns_id\": 5,\n  \"start_row\": 0,\n  \"start_col\": 0,\n  \"opts\": {\n    \"end_row\": 0,\n    \"end_col\": 3,\n    \"hl_group\": \"Type\",\n    \"ephemeral\": true\n  }\n}",
					"outputDataExample": "{\n  \"buf\": 1,\n  \"ns_id\": 5,\n  \"start_row\": 0,\n  \"start_col\": 0,\n  \"opts\": {\n    \"end_row\": 0,\n    \"end_col\": 3,\n    \"hl_group\": \"Type\",\n    \"ephemeral\": true\n  }\n}"
				},
				{
					"simStepId": "34f99a2f-a13a-4e89-a5d8-c7e64326c236",
					"diagramNodeId": "a743a49c-b55c-4563-ad38-b2b69b47642e",
					"simStepLabel": "UI Renders Highlights",
					"simStepDescription": "Neovim's UI compositor processes the extmarks set by the highlighter. It retrieves the styling information for each highlight group (e.g., 'Type' is blue) and renders the text with the appropriate colors and attributes in the user's terminal or GUI.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/nvim/drawscreen.c",
						"startLine": "1",
						"endLine": "1",
						"relevantVariables": [
							"win_update()"
						]
					},
					"inputDataExample": "{\n  \"extmarks\": [\n    {\"range\": [0,0,0,3], \"hl_group\": \"Type\"},\n    {\"range\": [0,4,0,8], \"hl_group\": \"Function\"}\n  ]\n}",
					"outputDataExample": "{\n  \"rendered_text\": \"<blue>int</blue> <purple>main</purple>() { return 0; }\"\n}"
				}
			],
			"description": "<ul><li>Integration with the Tree-sitter parsing library provides a more robust and detailed understanding of code structure compared to traditional regex-based syntax highlighting</li><li>- Faster, more accurate, and error-resilient syntax highlighting</li><li>- Enables advanced features like structural text-objects, code folding, and more precise code navigation</li><li>- Forms the foundation for better language-aware features directly within the editor core</li></ul>",
			"simulationNodesAndEdges": {
				"7aa38225-a4b8-4f1d-9141-12e9852e4e34": {
					"simStepIds": [
						"2ce887f3-1c98-4e7c-86ca-933fcc495bde"
					]
				},
				"93970937-dacb-4c62-9725-9ad01d11a22b": {
					"simStepIds": [
						"b106e0a3-768d-4282-9ec6-deb881ed3a1f"
					]
				},
				"faf022ed-202f-4486-a745-9879dddddd64": {
					"simStepIds": [
						"a3288e50-6bde-43b0-bc27-3c65c895f56b"
					]
				},
				"4557371b-3e9f-4a57-964a-a28fd8585a02": {
					"simStepIds": [
						"337810a2-50ef-4efc-b86b-493e5700c80f"
					]
				},
				"976474cd-262a-4313-a059-c0248bc26b98": {
					"simStepIds": [
						"7d7d67ad-119f-499e-9186-2a977659976b"
					]
				},
				"a743a49c-b55c-4563-ad38-b2b69b47642e": {
					"simStepIds": [
						"34f99a2f-a13a-4e89-a5d8-c7e64326c236"
					]
				},
				"6b5b5667-53fe-46bd-a0c8-113bd6acf036": {
					"simStepIds": [
						"5dba9709-8b53-4522-a226-1255977972e2"
					]
				},
				"c982b52f-3fbc-4b47-9bf1-7ca1b1bae9be": {
					"simStepIds": [
						"530b9af3-8047-4f6c-91e5-701c96342342"
					]
				},
				"e3d6dd51-b944-4735-8529-14e3983629fc": {
					"simStepIds": [
						"e6ebf4a4-da88-40bf-b8de-f0c56ef6348e"
					]
				},
				"88fd2a96-8449-40d8-a0d0-316a2165218a": {
					"simStepIds": [
						"98d1a2a4-a75c-4e5e-b766-25dedda3d53b"
					]
				},
				"4cb73b91-a5c3-4c64-b0f0-fe8eba752b22": {
					"simStepIds": [
						"bc86d8cf-ccf7-4600-a925-84771a4a0ee3"
					]
				}
			},
			"isAIGenerated": true,
			"keywords": "vim.treesitter.start, get_parser, highlighter",
			"generationPrompt": "Tree-sitter for Advanced Syntax Analysis",
			"generationKeywords": "vim.treesitter.start, get_parser, highlighter"
		},
		"Decoupled User Interface (UI) Architecture": {
			"name": "Decoupled User Interface (UI) Architecture",
			"simSteps": [
				{
					"simStepId": "bd547437-aeee-4b1b-a24a-91af1ee23455",
					"diagramNodeId": "d2058d49-5713-40ad-aa79-7f0a87d825e7",
					"simStepLabel": "TUI Startup: Main Entry Point",
					"simStepDescription": "Neovim is launched from the command line. The `main` function determines that a built-in Terminal UI (TUI) is needed. It prepares to launch a separate Neovim server process that the TUI will connect to.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/nvim/main.c",
						"startLine": "336",
						"endLine": "344",
						"relevantVariables": [
							"use_builtin_ui",
							"remote_ui",
							"ui_client_start_server",
							"ui_client_channel_id"
						]
					},
					"inputDataExample": "{\"argc\": 1, \"argv\": [\"nvim\"]}",
					"outputDataExample": "{\"use_builtin_ui\": true, \"remote_ui\": false}"
				},
				{
					"simStepId": "4b389c9e-933e-44db-b5aa-f3f1148b3769",
					"diagramNodeId": "7b1257bc-c084-4eec-8ca2-65ba9874666a",
					"simStepLabel": "Process Fork and Channel Creation",
					"simStepDescription": "The main process spawns a new `nvim --embed` process to act as the server. An RPC channel is established between the parent process (which will now become the UI client) and the new child server process. The channel ID is returned to the parent.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/nvim/ui_client.c",
						"startLine": "49",
						"endLine": "62",
						"relevantVariables": [
							"ui_client_start_server",
							"channel_job_start",
							"channel->id"
						]
					},
					"inputDataExample": "{\"exepath\": \"/usr/bin/nvim\", \"argc\": 0, \"argv\": []}",
					"outputDataExample": "{\"channel_id\": 1}"
				},
				{
					"simStepId": "f51d4fdd-ccd9-485e-8d82-a073f5e2ee79",
					"diagramNodeId": "739cc0c2-efa4-4397-b7a6-0cf371bac1a9",
					"simStepLabel": "TUI Client Initialization",
					"simStepDescription": "The original process, now designated as the UI client, enters its main run loop. It initializes the terminal by calling `tui_start` to set up terminal attributes and screen size, then prepares to attach to the server.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/nvim/ui_client.c",
						"startLine": "163",
						"endLine": "166",
						"relevantVariables": [
							"ui_client_run",
							"tui_start",
							"ui_client_attach"
						]
					},
					"inputDataExample": "{\"remote_ui\": false}",
					"outputDataExample": "{\"tui_width\": 80, \"tui_height\": 24, \"tui_term\": \"xterm-256color\", \"tui_rgb\": true}"
				},
				{
					"simStepId": "c358cd0e-60dc-40fe-9bac-f2e5d8400c03",
					"diagramNodeId": "b2046855-5406-44fb-958e-a9e19d8e129a",
					"simStepLabel": "Client Sends `nvim_ui_attach` RPC Call",
					"simStepDescription": "The TUI client sends an `nvim_ui_attach` RPC event to the server. This message informs the server of the client's dimensions and capabilities, and signals that the client is ready to receive redraw events and render the UI.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/nvim/ui_client.c",
						"startLine": "122",
						"endLine": "122",
						"relevantVariables": [
							"rpc_send_event",
							"ui_client_channel_id",
							"\"nvim_ui_attach\""
						]
					},
					"inputDataExample": "{\"width\": 80, \"height\": 24, \"term\": \"xterm-256color\", \"rgb\": true}",
					"outputDataExample": "{\"width\": 80, \"height\": 24, \"term\": \"xterm-256color\", \"rgb\": true}"
				},
				{
					"simStepId": "af3845c8-ab94-4da5-b1e7-04372753c599",
					"diagramNodeId": "064b054f-eb44-46f6-bb51-d2c517892272",
					"simStepLabel": "Server Receives Attach Request",
					"simStepDescription": "The Neovim server receives the `nvim_ui_attach` call. It registers the client channel as an active UI, adjusts its internal grid size to match the client's dimensions, and unblocks its own startup sequence, allowing it to load user configurations and files.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/nvim/api/ui.c",
						"startLine": "156",
						"endLine": "177",
						"relevantVariables": [
							"nvim_ui_attach",
							"ui_attach_impl",
							"u",
							"connected_uis"
						]
					},
					"inputDataExample": "{\"channel_id\": 1, \"width\": 80, \"height\": 24, \"options\": {\"rgb\": true, \"ext_linegrid\": true}}",
					"outputDataExample": "{\"ui_registered\": true}"
				},
				{
					"simStepId": "74a1c33c-43c0-448f-9906-3a4178dd3a31",
					"diagramNodeId": "ba8de695-e9cb-4c92-9a0b-fb69c242c2fc",
					"simStepLabel": "Server Sends Initial Redraw Events",
					"simStepDescription": "After attaching, the server sends a batch of 'redraw' events to the client to render the initial state of the editor, including screen size, content, and cursor position.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/nvim/drawscreen.c",
						"startLine": "70",
						"endLine": "80",
						"relevantVariables": [
							"draw_screen",
							"win_update",
							"ui_flush"
						]
					},
					"inputDataExample": "{}",
					"outputDataExample": "{\"event_stream\": [[\"redraw\", [\"grid_resize\", 1, 80, 24], [\"grid_line\", 1, 0, 0, [[\"~\", \"hl_NonText\"]]], ... , [\"flush\"]]]}"
				},
				{
					"simStepId": "29d0f4f4-e4c6-4dba-b7d4-d1f45c37a1da",
					"diagramNodeId": "637d4bcb-6409-494b-a9b0-57d561789aa6",
					"simStepLabel": "Client Receives and Dispatches Redraw Events",
					"simStepDescription": "The client's RPC layer receives the 'redraw' events. The msgpack unpacker has an optimized path to parse these events and efficiently look up the corresponding handler function (e.g., `ui_client_event_grid_resize`) using a pre-generated hash table.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/nvim/msgpack_rpc/unpacker.c",
						"startLine": "418",
						"endLine": "426",
						"relevantVariables": [
							"unpacker_execute",
							"p->ui_handler",
							"ui_client_get_redraw_handler"
						]
					},
					"inputDataExample": "{\"redraw_event\": [\"grid_line\", 1, 0, 0, [[\"Hello, world!\", \"hl_Normal\"]]]}",
					"outputDataExample": "{\"handler\": \"ui_client_event_raw_line\", \"args\": [1, 0, 0, ...]}"
				},
				{
					"simStepId": "b3dd751d-c580-4842-97bd-9afa464993ee",
					"diagramNodeId": "c5715033-dc43-4006-bd6d-9397f73c9bc8",
					"simStepLabel": "Dispatch to TUI Rendering Logic",
					"simStepDescription": "The client's redraw event handler in `ui_client.c` calls the appropriate function in the TUI implementation (`tui.c`) to translate the abstract grid event into concrete terminal escape codes.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/nvim/ui_client.c",
						"startLine": "280",
						"endLine": "282",
						"relevantVariables": [
							"ui_client_event_raw_line",
							"tui_raw_line"
						]
					},
					"inputDataExample": "{\"grid\": 1, \"row\": 5, \"startcol\": 0, \"endcol\": 10, \"clearcol\": 80, ...}",
					"outputDataExample": "{\"grid\": 1, \"row\": 5, \"startcol\": 0, \"endcol\": 10, \"clearcol\": 80, ...}"
				},
				{
					"simStepId": "ceb51e25-a97d-4cd8-ab64-1a5c96cdf406",
					"diagramNodeId": "3caca7f9-b3a0-40c6-b966-caf1225e1b63",
					"simStepLabel": "TUI Renders the Screen",
					"simStepDescription": "The `tui.c` rendering function uses the terminfo database to generate and write the correct control sequences (escape codes) to stdout, which moves the cursor, changes colors, and prints characters to the terminal, updating what the user sees.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/nvim/tui/tui.c",
						"startLine": "921",
						"endLine": "936",
						"relevantVariables": [
							"tui_raw_line",
							"cursor_goto",
							"tui_set_attr",
							"tui_out"
						]
					},
					"inputDataExample": "{\"grid\": 1, \"row\": 5, \"col\": 0, \"text\": \"Hello\", \"attr_id\": 10}",
					"outputDataExample": "{\"stdout_bytes_written\": \"\\x1b[6;1H\\x1b[38;2;...mHello\"}"
				},
				{
					"simStepId": "e7e73eee-1300-4377-b62b-1c992d2960ec",
					"diagramNodeId": "80844e97-be3f-47e7-a830-5577cffe4fd8",
					"simStepLabel": "User Provides Input",
					"simStepDescription": "The TUI input loop continuously reads from stdin. It parses terminal escape sequences to recognize special keys (like arrow keys or function keys) and UTF-8 characters.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/nvim/tui/input.c",
						"startLine": "39",
						"endLine": "50",
						"relevantVariables": [
							"tui_input_read",
							"termkey_push_bytes",
							"termkey_waitkey"
						]
					},
					"inputDataExample": "{\"stdin_bytes_read\": \"a\"}",
					"outputDataExample": "{\"parsed_key\": \"a\"}"
				},
				{
					"simStepId": "68c05877-afb1-4b3c-840b-8c92f51136ec",
					"diagramNodeId": "72ec73c0-e19b-49c9-a503-7b578cdb2a39",
					"simStepLabel": "Client Sends `nvim_input` RPC Call",
					"simStepDescription": "The parsed user input is sent to the server as an `nvim_input` RPC request. This is how the UI communicates user actions back to the Neovim core.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/nvim/tui/input.c",
						"startLine": "213",
						"endLine": "213",
						"relevantVariables": [
							"send_key_buffer",
							"rpc_send_event",
							"\"nvim_input\""
						]
					},
					"inputDataExample": "{\"keys\": \"ihello<Esc>\"}",
					"outputDataExample": "{\"keys\": \"ihello<Esc>\"}"
				},
				{
					"simStepId": "42cde6a0-47ec-4b89-9ec0-8d82e2532167",
					"diagramNodeId": "fe447fc0-f2c4-4a83-a198-c416b698f099",
					"simStepLabel": "Server Processes Input and Updates State",
					"simStepDescription": "The Neovim server receives the `nvim_input` call. The input is fed into the editor's state machine, which executes the corresponding action (e.g., inserting a character, moving the cursor). This change in state invalidates parts of the screen, queuing up a new redraw cycle.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/nvim/normal.c",
						"startLine": "525",
						"endLine": "532",
						"relevantVariables": [
							"normal_execute",
							"nv_cmds",
							"must_redraw"
						]
					},
					"inputDataExample": "{\"request\": \"nvim_input\", \"args\": [\"j\"]}",
					"outputDataExample": "{\"state_changed\": true, \"redraw_queued\": true}"
				}
			],
			"description": "<ul><li>Neovim's core is decoupled from its user interface, allowing various clients to connect and render the editor state</li><li>This is a fundamental architectural decision that enables a wide range of user experiences</li><li>- A default, feature-rich Terminal UI (TUI) is bundled with the editor</li><li>- External GUIs can connect to a headless Neovim instance via the RPC API</li><li>- Allows for embedding Neovim as an editing component in other applications</li></ul>",
			"simulationNodesAndEdges": {
				"d2058d49-5713-40ad-aa79-7f0a87d825e7": {
					"simStepIds": [
						"bd547437-aeee-4b1b-a24a-91af1ee23455"
					]
				},
				"739cc0c2-efa4-4397-b7a6-0cf371bac1a9": {
					"simStepIds": [
						"f51d4fdd-ccd9-485e-8d82-a073f5e2ee79"
					]
				},
				"064b054f-eb44-46f6-bb51-d2c517892272": {
					"simStepIds": [
						"af3845c8-ab94-4da5-b1e7-04372753c599"
					]
				},
				"637d4bcb-6409-494b-a9b0-57d561789aa6": {
					"simStepIds": [
						"29d0f4f4-e4c6-4dba-b7d4-d1f45c37a1da"
					]
				},
				"3caca7f9-b3a0-40c6-b966-caf1225e1b63": {
					"simStepIds": [
						"ceb51e25-a97d-4cd8-ab64-1a5c96cdf406"
					]
				},
				"80844e97-be3f-47e7-a830-5577cffe4fd8": {
					"simStepIds": [
						"e7e73eee-1300-4377-b62b-1c992d2960ec"
					]
				},
				"fe447fc0-f2c4-4a83-a198-c416b698f099": {
					"simStepIds": [
						"42cde6a0-47ec-4b89-9ec0-8d82e2532167"
					]
				},
				"7b1257bc-c084-4eec-8ca2-65ba9874666a": {
					"simStepIds": [
						"4b389c9e-933e-44db-b5aa-f3f1148b3769"
					]
				},
				"b2046855-5406-44fb-958e-a9e19d8e129a": {
					"simStepIds": [
						"c358cd0e-60dc-40fe-9bac-f2e5d8400c03"
					]
				},
				"ba8de695-e9cb-4c92-9a0b-fb69c242c2fc": {
					"simStepIds": [
						"74a1c33c-43c0-448f-9906-3a4178dd3a31"
					]
				},
				"c5715033-dc43-4006-bd6d-9397f73c9bc8": {
					"simStepIds": [
						"b3dd751d-c580-4842-97bd-9afa464993ee"
					]
				},
				"72ec73c0-e19b-49c9-a503-7b578cdb2a39": {
					"simStepIds": [
						"68c05877-afb1-4b3c-840b-8c92f51136ec"
					]
				}
			},
			"isAIGenerated": true,
			"keywords": "nvim_ui_attach, ui_client, tui.c",
			"generationPrompt": "Decoupled User Interface (UI) Architecture",
			"generationKeywords": "nvim_ui_attach, ui_client, tui.c"
		},
		"Embedded Terminal Emulator": {
			"name": "Embedded Terminal Emulator",
			"simSteps": [
				{
					"simStepId": "36e59f38-15cc-431c-8640-a92071154959",
					"diagramNodeId": "66323267-7878-4c7d-a54e-faa10a9b9084",
					"simStepLabel": "User Executes `:terminal` Command",
					"simStepDescription": "The user initiates the process by executing the `:terminal` Ex command. Neovim's command-line processor identifies this command and dispatches it to the `ex_terminal` function for handling.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/nvim/ex_docmd.c",
						"startLine": "7913",
						"endLine": "7928",
						"relevantVariables": [
							"ex_terminal",
							"eap",
							"cmdmod"
						]
					},
					"inputDataExample": "{\n  \"arg\": \"\",\n  \"cmdidx\": \"CMD_terminal\",\n  \"cmd\": \":terminal\",\n  \"cmdlinep\": \"terminal\",\n  \"bang\": false\n}",
					"outputDataExample": "{\n  \"status\": \"success\",\n  \"message\": \"Terminal buffer created\"\n}"
				},
				{
					"simStepId": "36f31f11-7759-4bf0-96c2-b375fa87b19b",
					"diagramNodeId": "11236c9f-7d26-47af-bd4e-492373cf7248",
					"simStepLabel": "Trigger Terminal Initialization",
					"simStepDescription": "The `ex_terminal` command logic leads to the creation of a new buffer and the invocation of `terminal_open` to configure this buffer as a terminal emulator. Key options like the process to run and callbacks for I/O are passed.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/nvim/api/vim.c",
						"startLine": "1098",
						"endLine": "1098",
						"relevantVariables": [
							"terminal_open"
						]
					},
					"inputDataExample": "{\n  \"opts\": {\n    \"data\": \"<Channel *chan>\",\n    \"width\": 80,\n    \"height\": 24,\n    \"write_cb\": \"<function term_write>\",\n    \"resize_cb\": \"<function term_resize>\",\n    \"close_cb\": \"<function term_close>\"\n  }\n}",
					"outputDataExample": "{\n  \"opts\": {\n    \"data\": \"<Channel *chan>\",\n    \"width\": 80,\n    \"height\": 24,\n    \"write_cb\": \"<function term_write>\",\n    \"resize_cb\": \"<function term_resize>\",\n    \"close_cb\": \"<function term_close>\"\n  }\n}"
				},
				{
					"simStepId": "82b5e0c0-1920-412d-beb0-b48d28562f8f",
					"diagramNodeId": "f3d78296-92bc-4f34-b368-b8bae4d007b2",
					"simStepLabel": "Initialize VTerm Instance",
					"simStepDescription": "`terminal_open` orchestrates the setup. It creates a `Terminal` struct to manage the session, then instantiates the core `libvterm` emulator (`vterm_new`). It obtains the state and screen handles from `libvterm` and registers a set of callbacks. These callbacks are crucial as they link `libvterm`'s abstract screen updates back to Neovim's concrete buffer manipulation.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/nvim/terminal.c",
						"startLine": "442",
						"endLine": "456",
						"relevantVariables": [
							"terminal_open",
							"vterm_new",
							"vterm_obtain_state",
							"vterm_obtain_screen",
							"vterm_screen_set_callbacks"
						]
					},
					"inputDataExample": "{\n  \"buf\": \"<buf_T *buf>\",\n  \"opts\": {\n    \"data\": \"<Channel *chan>\",\n    \"width\": 80,\n    \"height\": 24\n  }\n}",
					"outputDataExample": "{\n  \"term\": \"<Terminal *term>\",\n  \"vt\": \"<VTerm *vt>\",\n  \"vts\": \"<VTermScreen *vts>\",\n  \"status\": \"Callbacks registered\"\n}"
				},
				{
					"simStepId": "60b5122a-a154-4ee4-a21c-4d48bcac2ff7",
					"diagramNodeId": "200b032e-e435-4ef6-a2f2-bdc22f9e39f3",
					"simStepLabel": "PTY Emits Data",
					"simStepDescription": "The shell process running in the terminal (e.g., `bash`) writes output to its stdout. This data, which can be plain text or include ANSI escape codes, is read by Neovim from the pseudo-terminal (PTY) and passed to the terminal module for processing.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/nvim/terminal.c",
						"startLine": "1162",
						"endLine": "1162",
						"relevantVariables": [
							"terminal_receive"
						]
					},
					"inputDataExample": "{\n  \"data\": \"user@host:~$ ls -l\\r\\n\\x1b[34mtotal 0\\x1b[0m\\r\\ndrwxr-xr-x 2 user user 4096 Oct 26 10:00 Documents\\r\\n\"\n}",
					"outputDataExample": "{\n  \"data\": \"user@host:~$ ls -l\\r\\n\\x1b[34mtotal 0\\x1b[0m\\r\\ndrwxr-xr-x 2 user user 4096 Oct 26 10:00 Documents\\r\\n\"\n}"
				},
				{
					"simStepId": "287eeff7-3ed4-448f-8d07-0c2c6e67d5e5",
					"diagramNodeId": "1c36f471-98cb-4227-82e5-8c03c8ef4bd8",
					"simStepLabel": "Process Data in VTerm Emulator",
					"simStepDescription": "The raw byte stream from the PTY is fed into the `libvterm` parser via `vterm_input_write`. The parser interprets the stream, distinguishing between printable text and control sequences. It updates its internal model of the terminal screen, including character grids, colors, and cursor position. This processing triggers internal callbacks that modify the VTerm screen state.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/nvim/terminal.c",
						"startLine": "1175",
						"endLine": "1184",
						"relevantVariables": [
							"terminal_receive",
							"vterm_input_write",
							"vterm_screen_flush_damage"
						]
					},
					"inputDataExample": "{\n  \"data\": \"user@host:~$ ls -l\\r\\n\\x1b[34mtotal 0\\x1b[0m\\r\\ndrwxr-xr-x 2 user user 4096 Oct 26 10:00 Documents\\r\\n\",\n  \"len\": 105\n}",
					"outputDataExample": "{\n  \"status\": \"VTerm internal screen updated\",\n  \"triggered_callbacks\": [\n    \"putglyph\",\n    \"setpenattr\",\n    \"scrollrect\"\n  ]\n}"
				},
				{
					"simStepId": "f31d6198-2ea5-4353-81c4-3785742f5c64",
					"diagramNodeId": "5cbbd26c-671e-4ee2-84a1-9896eebab5da",
					"simStepLabel": "VTerm Screen Damage Notification",
					"simStepDescription": "After its internal screen state is updated, `libvterm` determines which areas have changed (are \"damaged\"). It then invokes the `damage` callback, which was registered by `terminal.c`, passing a rectangle (`VTermRect`) that specifies the modified region.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/nvim/vterm/screen.c",
						"startLine": "103",
						"endLine": "105",
						"relevantVariables": [
							"damagerect",
							"screen->callbacks->damage"
						]
					},
					"inputDataExample": "{\n  \"rect\": {\n    \"start_row\": 0,\n    \"end_row\": 3,\n    \"start_col\": 0,\n    \"end_col\": 80\n  }\n}",
					"outputDataExample": "{\n  \"rect\": {\n    \"start_row\": 0,\n    \"end_row\": 3,\n    \"start_col\": 0,\n    \"end_col\": 80\n  }\n}"
				},
				{
					"simStepId": "42d54e9c-9ec8-4255-a575-4998f3ca24a1",
					"diagramNodeId": "4b86a0d0-4891-412e-9225-fd7ad36c85e1",
					"simStepLabel": "Render VTerm Screen to Neovim Buffer",
					"simStepDescription": "The `term_damage` callback receives the damaged rectangle and marks those screen rows as invalid, scheduling a deferred refresh. During the refresh, `refresh_screen` iterates over the invalid area, fetching cell data (characters, attributes, colors) from `libvterm` via `fetch_cell`. It then translates this information into text and highlight data, updating the content and appearance of the Neovim buffer to match the terminal's state.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/nvim/terminal.c",
						"startLine": "2278",
						"endLine": "2351",
						"relevantVariables": [
							"refresh_screen",
							"fetch_cell",
							"schar_get_adv",
							"buf_set_lines",
							"buf_add_highlight"
						]
					},
					"inputDataExample": "{\n  \"rect\": {\n    \"start_row\": 0,\n    \"end_row\": 3,\n    \"start_col\": 0,\n    \"end_col\": 80\n  }\n}",
					"outputDataExample": "{\n  \"buffer_lines\": [\n    \"user@host:~$ ls -l\",\n    \"total 0\",\n    \"drwxr-xr-x 2 user user 4096 Oct 26 10:00 Documents\"\n  ],\n  \"highlights_applied\": true\n}"
				},
				{
					"simStepId": "5b7a2baf-9571-4221-9c9d-257245ca99fa",
					"diagramNodeId": "5097f44b-0d1a-4410-9299-eee71fa9f5fd",
					"simStepLabel": "User Types in Terminal",
					"simStepDescription": "While in Terminal-mode, the user presses a key. Neovim's input handling captures this key and forwards it to the terminal module for processing.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/nvim/terminal.c",
						"startLine": "1145",
						"endLine": "1145",
						"relevantVariables": [
							"terminal_send_key"
						]
					},
					"inputDataExample": "{\n  \"key\": \"l\",\n  \"modifiers\": \"VTERM_MOD_NONE\"\n}",
					"outputDataExample": "{\n  \"key\": \"l\",\n  \"modifiers\": \"VTERM_MOD_NONE\"\n}"
				},
				{
					"simStepId": "03602d2f-aa8f-4926-92fb-167fffd3ad26",
					"diagramNodeId": "86594b87-1e11-4579-afc4-1ea1e00eb9a0",
					"simStepLabel": "Convert Keypress to Byte Sequence",
					"simStepDescription": "The `terminal_send_key` function takes the Neovim key code and uses `libvterm`'s keyboard functions (`vterm_keyboard_unichar` or `vterm_keyboard_key`). These functions convert the abstract keypress into the raw byte sequence that a physical terminal would send, such as the character itself or a complex escape code for a function key.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/nvim/vterm/keyboard.c",
						"startLine": "24",
						"endLine": "88",
						"relevantVariables": [
							"vterm_keyboard_unichar",
							"vterm_keyboard_key",
							"vterm_push_output_bytes",
							"vterm_push_output_sprintf_ctrl"
						]
					},
					"inputDataExample": "{\n  \"key_code\": 108,\n  \"modifiers\": \"VTERM_MOD_NONE\"\n}",
					"outputDataExample": "{\n  \"byte_sequence\": \"l\"\n}"
				},
				{
					"simStepId": "c0a71715-b4b1-489a-8307-38a04362ebe4",
					"diagramNodeId": "75f4916a-1203-48f2-8979-315a523f1d20",
					"simStepLabel": "Send Byte Sequence to PTY",
					"simStepDescription": "The byte sequence generated by `libvterm` is pushed to its output buffer, triggering the `term_output_callback`. This callback sends the data to the PTY's master file descriptor, effectively delivering the user's input to the running shell process.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/nvim/terminal.c",
						"startLine": "1073",
						"endLine": "1077",
						"relevantVariables": [
							"term_output_callback",
							"terminal_send"
						]
					},
					"inputDataExample": "{\n  \"data\": \"ls\\r\"\n}",
					"outputDataExample": "{\n  \"data\": \"ls\\r\"\n}"
				},
				{
					"simStepId": "d2a22a49-5703-4f60-b612-15bd4cfb2dc0",
					"diagramNodeId": "d13bafa9-23dd-461c-b089-beb67e67a085",
					"simStepLabel": "Shell Processes Input",
					"simStepDescription": "The shell process (e.g., `bash`) running on the slave side of the PTY reads the byte sequence from its standard input. It interprets this input as if it were typed on a real terminal, executing the command (`ls`) and generating new output. This output is then written back to the PTY, restarting the data flow cycle.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "None",
						"startLine": "0",
						"endLine": "0",
						"relevantVariables": [
							"External Shell Process (e.g., bash, zsh)"
						]
					},
					"inputDataExample": "{\n  \"stdin_data\": \"ls\\r\"\n}",
					"outputDataExample": "{\n  \"stdout_data\": \"Documents  Downloads  Pictures\\r\\nuser@host:~$ \"\n}"
				}
			],
			"description": "<ul><li>Users can run a full terminal emulator inside a Neovim buffer</li><li>This creates an integrated development environment, reducing the need to switch between the editor and an external terminal</li><li>- Run shell commands, build scripts, or any interactive command-line application</li><li>- Terminal output is simply text in a buffer, allowing for seamless navigation and copying</li><li>- Terminals can be managed like any other window or buffer</li></ul>",
			"simulationNodesAndEdges": {
				"66323267-7878-4c7d-a54e-faa10a9b9084": {
					"simStepIds": [
						"36e59f38-15cc-431c-8640-a92071154959"
					]
				},
				"f3d78296-92bc-4f34-b368-b8bae4d007b2": {
					"simStepIds": [
						"82b5e0c0-1920-412d-beb0-b48d28562f8f"
					]
				},
				"1c36f471-98cb-4227-82e5-8c03c8ef4bd8": {
					"simStepIds": [
						"287eeff7-3ed4-448f-8d07-0c2c6e67d5e5"
					]
				},
				"4b86a0d0-4891-412e-9225-fd7ad36c85e1": {
					"simStepIds": [
						"42d54e9c-9ec8-4255-a575-4998f3ca24a1"
					]
				},
				"86594b87-1e11-4579-afc4-1ea1e00eb9a0": {
					"simStepIds": [
						"03602d2f-aa8f-4926-92fb-167fffd3ad26"
					]
				},
				"d13bafa9-23dd-461c-b089-beb67e67a085": {
					"simStepIds": [
						"d2a22a49-5703-4f60-b612-15bd4cfb2dc0"
					]
				},
				"11236c9f-7d26-47af-bd4e-492373cf7248": {
					"simStepIds": [
						"36f31f11-7759-4bf0-96c2-b375fa87b19b"
					]
				},
				"200b032e-e435-4ef6-a2f2-bdc22f9e39f3": {
					"simStepIds": [
						"60b5122a-a154-4ee4-a21c-4d48bcac2ff7"
					]
				},
				"5cbbd26c-671e-4ee2-84a1-9896eebab5da": {
					"simStepIds": [
						"f31d6198-2ea5-4353-81c4-3785742f5c64"
					]
				},
				"5097f44b-0d1a-4410-9299-eee71fa9f5fd": {
					"simStepIds": [
						"5b7a2baf-9571-4221-9c9d-257245ca99fa"
					]
				},
				"75f4916a-1203-48f2-8979-315a523f1d20": {
					"simStepIds": [
						"c0a71715-b4b1-489a-8307-38a04362ebe4"
					]
				}
			},
			"isAIGenerated": true,
			"keywords": "terminal_open, ex_terminal, vterm",
			"generationPrompt": "Embedded Terminal Emulator",
			"generationKeywords": "terminal_open, ex_terminal, vterm"
		},
		"Asynchronous Job Control": {
			"name": "Asynchronous Job Control",
			"simSteps": [
				{
					"simStepId": "eaaca010-42e5-4cce-aef6-fa32b3b82b6e",
					"diagramNodeId": "47f9e9b7-d4b7-49f7-8157-a5ae44bbe279",
					"simStepLabel": "User Initiates Asynchronous Job",
					"simStepDescription": "A user script, in this case a Lua test script, calls the `jobstart()` function to spawn an external `cat` process. It provides the command to execute and a dictionary of options, including an `on_stdout` callback function to handle the process's standard output.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "test/functional/core/job_spec.lua",
						"startLine": "319",
						"endLine": "319",
						"relevantVariables": [
							"jobstart",
							"g:job_opts"
						]
					},
					"inputDataExample": "{\"command\":[\"cat\",\"-\"],\"options\":{\"on_stdout\":\"function('OnEvent')\",\"on_exit\":\"function('OnEvent')\",\"user\":0}}",
					"outputDataExample": "{\"job_id\":3}"
				},
				{
					"simStepId": "103a1597-6de0-406e-96b9-9fca9a9c5115",
					"diagramNodeId": "c48bd66b-41f7-4337-b9cf-b5f88da890d1",
					"simStepLabel": "Vimscript/Lua to C Bridge",
					"simStepDescription": "The `jobstart` function call is forwarded from the scripting layer to the internal C implementation (`f_jobstart`). The command arguments and options dictionary are converted into C data structures for processing.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/nvim/eval.lua",
						"startLine": "6122",
						"endLine": "6149",
						"relevantVariables": [
							"jobstart"
						]
					},
					"inputDataExample": "{\"cmd\":[\"cat\",\"-\"],\"opts\":{\"on_stdout\":\"function('OnEvent')\"}}",
					"outputDataExample": "{\"cmd\":[\"cat\",\"-\"],\"opts\":{\"on_stdout\":\"function('OnEvent')\"}}"
				},
				{
					"simStepId": "aedec869-e86a-432a-bfd6-ace49b1a815e",
					"diagramNodeId": "e0741b89-dca2-427b-8632-74ddd0c749a9",
					"simStepLabel": "C-level Job Creation",
					"simStepDescription": "The C function `f_jobstart` is executed. It parses the options, validates them, prepares callback handlers using `common_job_callbacks`, and then calls `channel_job_start` to handle the low-level process and channel creation.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/nvim/eval/funcs.c",
						"startLine": "3872",
						"endLine": "4067",
						"relevantVariables": [
							"f_jobstart",
							"common_job_callbacks",
							"channel_job_start"
						]
					},
					"inputDataExample": "{\"argvars\": [[\"cat\", \"-\"], {\"on_stdout\": \"function('OnEvent')\"}], \"rettv\": {}}",
					"outputDataExample": "{\"rettv\": {\"v_type\": \"VAR_NUMBER\", \"vval\": {\"v_number\": 3}}}"
				},
				{
					"simStepId": "62e6b30c-49b3-419c-8deb-8aea8a8bc143",
					"diagramNodeId": "bf20c421-9fc3-49ce-9c99-2c60de4276de",
					"simStepLabel": "Passing Job Details to Channel Manager",
					"simStepDescription": "The parsed command, callbacks, and other options are passed from `f_jobstart` to `channel_job_start`, which is responsible for the core logic of spawning the process and setting up communication channels.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/nvim/eval/funcs.c",
						"startLine": "4010",
						"endLine": "4012",
						"relevantVariables": [
							"channel_job_start",
							"argv",
							"on_stdout",
							"on_stderr",
							"on_exit",
							"pty",
							"rpc"
						]
					},
					"inputDataExample": "{\"argv\":[\"/bin/cat\",\"-\",null],\"on_stdout\":\"(CallbackReader *)\",\"on_stderr\":\"(CallbackReader *)\",\"on_exit\":\"(Callback *)\",\"pty\":false,\"rpc\":false}",
					"outputDataExample": "{\"argv\":[\"/bin/cat\",\"-\",null],\"on_stdout\":\"(CallbackReader *)\",\"on_stderr\":\"(CallbackReader *)\",\"on_exit\":\"(Callback *)\",\"pty\":false,\"rpc\":false}"
				},
				{
					"simStepId": "854ff8f5-8f8a-4698-9668-18eb81c62445",
					"diagramNodeId": "7931c951-7161-4ac6-9dca-153a999780ea",
					"simStepLabel": "Process Spawning and Stream Setup",
					"simStepDescription": "The `channel_job_start` function allocates a `Channel` struct, spawns the external `cat` process using libuv, and initializes I/O streams for stdin, stdout, and stderr. It then starts listening for data on stdout by calling `rstream_start` with `on_channel_data` as the data handler.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/nvim/channel.c",
						"startLine": "355",
						"endLine": "456",
						"relevantVariables": [
							"channel_job_start",
							"channel_alloc",
							"proc_spawn",
							"rstream_init_fd",
							"wstream_init_fd",
							"rstream_start",
							"on_channel_data"
						]
					},
					"inputDataExample": "{\"argv\":[\"/bin/cat\",\"-\",null],\"on_stdout\":\"(CallbackReader *)\"}",
					"outputDataExample": "{\"channel\": \"(Channel *)\", \"status_out\": 3}"
				},
				{
					"simStepId": "6ba113f7-7e4f-405b-ade9-f411aa541633",
					"diagramNodeId": "119b18a8-cd31-4000-802d-3e74a806de24",
					"simStepLabel": "User Sends Data to Job's Stdin",
					"simStepDescription": "The user script calls `jobsend()` to write data to the job's standard input. The data is written to the pipe connected to the `cat` process's stdin.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "test/functional/core/job_spec.lua",
						"startLine": "321",
						"endLine": "321",
						"relevantVariables": [
							"jobsend"
						]
					},
					"inputDataExample": "{\"job_id\":3,\"data\":\"abc\\n\"}",
					"outputDataExample": "{\"job_id\":3,\"data\":\"abc\\n\"}"
				},
				{
					"simStepId": "50982715-7e99-41eb-ad7a-444adf002b76",
					"diagramNodeId": "ff421c80-1416-4bdf-8ab5-fb3bb3a21a1f",
					"simStepLabel": "Job Processes Input and Writes to Stdout",
					"simStepDescription": "The `cat` process reads the data from its stdin (`abc\\n`) and echoes it to its standard output. This data is now available for Neovim to read from the corresponding pipe.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/nvim/channel.c",
						"startLine": "575",
						"endLine": "645",
						"relevantVariables": [
							"channel_send",
							"channel_write",
							"wstream_write"
						]
					},
					"inputDataExample": "{\"stdin_data\":\"abc\\n\"}",
					"outputDataExample": "{\"stdout_data\":\"abc\\n\"}"
				},
				{
					"simStepId": "c9cc507e-1487-433a-a333-1eb5675ea9c8",
					"diagramNodeId": "b3b70102-09b0-468f-b689-19b4430d8095",
					"simStepLabel": "Data Transmitted from Job to Neovim",
					"simStepDescription": "The operating system delivers the data written by the `cat` process to Neovim through the stdout pipe established by `jobstart`.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/nvim/channel.c",
						"startLine": "433",
						"endLine": "434",
						"relevantVariables": [
							"rstream_start",
							"proc->out",
							"on_channel_data"
						]
					},
					"inputDataExample": "{\"stdout_data\":\"abc\\n\"}",
					"outputDataExample": "{\"stdout_data\":\"abc\\n\"}"
				},
				{
					"simStepId": "8cb74844-a3b5-47ab-bf0b-70ac8cae0f2e",
					"diagramNodeId": "52556006-bb10-4851-8d08-3f8bfcf9ecdb",
					"simStepLabel": "Data Reception and Callback Scheduling",
					"simStepDescription": "Neovim's event loop detects the incoming data on the stdout pipe. It invokes `on_channel_data`, which calls `on_channel_output` to process the raw byte stream, split it into lines, and then schedule `on_channel_event` to run on the main loop via `schedule_channel_event`.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/nvim/channel.c",
						"startLine": "668",
						"endLine": "693",
						"relevantVariables": [
							"on_channel_output",
							"schedule_channel_event"
						]
					},
					"inputDataExample": "{\"raw_data_buffer\":\"abc\\n\",\"byte_count\":4}",
					"outputDataExample": "{\"scheduled_event\": \"on_channel_event\"}"
				},
				{
					"simStepId": "791f5139-40d2-4d59-941c-0bcdef01a513",
					"diagramNodeId": "fc039d57-f1ee-4b21-bf72-c349a5f09c05",
					"simStepLabel": "Data Propagation to Main Loop",
					"simStepDescription": "The processed data and the request to invoke the callback are placed on the channel's event queue. The main Neovim loop will pick this event up for execution when it is not busy.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/nvim/channel.c",
						"startLine": "696",
						"endLine": "704",
						"relevantVariables": [
							"schedule_channel_event",
							"multiqueue_put",
							"on_channel_event"
						]
					},
					"inputDataExample": "{\"event_type\":\"on_channel_event\",\"channel_id\":3,\"data\":[\"abc\",\"\"]}",
					"outputDataExample": "{\"event_type\":\"on_channel_event\",\"channel_id\":3,\"data\":[\"abc\",\"\"]}"
				},
				{
					"simStepId": "8f80b898-11ed-4b06-ac47-1c81e36fd8e7",
					"diagramNodeId": "b8e65988-6335-4647-b8fa-24d7ff9e16ff",
					"simStepLabel": "User Callback Invocation",
					"simStepDescription": "The main loop executes the `on_channel_event` function. This function calls `channel_reader_callbacks`, which in turn calls `channel_callback_call` to finally execute the user-provided `on_stdout` callback in the scripting environment.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/nvim/channel.c",
						"startLine": "777",
						"endLine": "823",
						"relevantVariables": [
							"channel_callback_call",
							"callback_call"
						]
					},
					"inputDataExample": "{\"channel_id\":3,\"data\":[\"abc\",\"\"]}",
					"outputDataExample": "null"
				},
				{
					"simStepId": "8b4a9eea-0998-4d38-b614-26dfed71dca7",
					"diagramNodeId": "4831c9a5-b950-4eba-be29-d11fd0d886d1",
					"simStepLabel": "C to Vimscript/Lua Bridge",
					"simStepDescription": "The processed data from the job's stdout is passed from the C environment to the scripting environment (Vimscript/Lua) as arguments to the `on_stdout` callback function.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "test/functional/core/job_spec.lua",
						"startLine": "55",
						"endLine": "59",
						"relevantVariables": [
							"OnEvent"
						]
					},
					"inputDataExample": "{\"channel_id\":3,\"data\":[\"abc\",\"\"],\"event\":\"stdout\"}",
					"outputDataExample": "{\"channel_id\":3,\"data\":[\"abc\",\"\"],\"event\":\"stdout\"}"
				},
				{
					"simStepId": "e7b85c33-fd85-47cb-8ecb-a0d12c8f7a8e",
					"diagramNodeId": "dd67a7c9-97d7-45d2-8e8d-6dd1492aa6c9",
					"simStepLabel": "Execute on_stdout Callback",
					"simStepDescription": "The user's `on_stdout` callback function (named `OnEvent` in the example) is executed. It receives the channel ID, the data from stdout as a list of strings, and the event name. In this example, it sends an RPC notification back to the test runner to assert the output was received correctly.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "test/functional/core/job_spec.lua",
						"startLine": "55",
						"endLine": "59",
						"relevantVariables": [
							"OnEvent",
							"rpcnotify"
						]
					},
					"inputDataExample": "{\"id\":3,\"data\":[\"abc\",\"\"],\"event\":\"stdout\"}",
					"outputDataExample": "null"
				}
			],
			"description": "<ul><li>Neovim can run and communicate with external processes asynchronously in the background</li><li>This is a foundational feature that prevents the UI from blocking and enables many modern plugins</li><li>- Start long-running jobs like linters, formatters, or test runners</li><li>- Communicate with child processes over stdin, stdout, and stderr</li><li>- Forms the basis for LSP integration and remote plugins</li></ul>",
			"simulationNodesAndEdges": {
				"47f9e9b7-d4b7-49f7-8157-a5ae44bbe279": {
					"simStepIds": [
						"eaaca010-42e5-4cce-aef6-fa32b3b82b6e"
					]
				},
				"e0741b89-dca2-427b-8632-74ddd0c749a9": {
					"simStepIds": [
						"aedec869-e86a-432a-bfd6-ace49b1a815e"
					]
				},
				"7931c951-7161-4ac6-9dca-153a999780ea": {
					"simStepIds": [
						"854ff8f5-8f8a-4698-9668-18eb81c62445"
					]
				},
				"ff421c80-1416-4bdf-8ab5-fb3bb3a21a1f": {
					"simStepIds": [
						"50982715-7e99-41eb-ad7a-444adf002b76"
					]
				},
				"52556006-bb10-4851-8d08-3f8bfcf9ecdb": {
					"simStepIds": [
						"8cb74844-a3b5-47ab-bf0b-70ac8cae0f2e"
					]
				},
				"b8e65988-6335-4647-b8fa-24d7ff9e16ff": {
					"simStepIds": [
						"8f80b898-11ed-4b06-ac47-1c81e36fd8e7"
					]
				},
				"dd67a7c9-97d7-45d2-8e8d-6dd1492aa6c9": {
					"simStepIds": [
						"e7b85c33-fd85-47cb-8ecb-a0d12c8f7a8e"
					]
				},
				"c48bd66b-41f7-4337-b9cf-b5f88da890d1": {
					"simStepIds": [
						"103a1597-6de0-406e-96b9-9fca9a9c5115"
					]
				},
				"bf20c421-9fc3-49ce-9c99-2c60de4276de": {
					"simStepIds": [
						"62e6b30c-49b3-419c-8deb-8aea8a8bc143"
					]
				},
				"119b18a8-cd31-4000-802d-3e74a806de24": {
					"simStepIds": [
						"6ba113f7-7e4f-405b-ade9-f411aa541633"
					]
				},
				"b3b70102-09b0-468f-b689-19b4430d8095": {
					"simStepIds": [
						"c9cc507e-1487-433a-a333-1eb5675ea9c8"
					]
				},
				"fc039d57-f1ee-4b21-bf72-c349a5f09c05": {
					"simStepIds": [
						"791f5139-40d2-4d59-941c-0bcdef01a513"
					]
				},
				"4831c9a5-b950-4eba-be29-d11fd0d886d1": {
					"simStepIds": [
						"8b4a9eea-0998-4d38-b614-26dfed71dca7"
					]
				}
			},
			"isAIGenerated": true,
			"keywords": "jobstart, channel, on_stdout",
			"generationPrompt": "Asynchronous Job Control",
			"generationKeywords": "jobstart, channel, on_stdout"
		},
		"Vimscript and Vim Plugin Compatibility": {
			"name": "Vimscript and Vim Plugin Compatibility",
			"simSteps": [
				{
					"simStepId": "1f86bd67-1f46-4692-a8a6-07d602732c45",
					"diagramNodeId": "214dc308-877b-49e3-b633-c5cce30f8c77",
					"simStepLabel": "API Call to Execute Vimscript",
					"simStepDescription": "The execution of a Vimscript command is initiated through an API call, for example from a plugin or external tool. The `nvim_command` function serves as an entry point, taking a string containing the Ex command to be executed.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/nvim/api/vimscript.c",
						"startLine": "136",
						"endLine": "142",
						"relevantVariables": [
							"nvim_command",
							"command",
							"do_cmdline_cmd"
						]
					},
					"inputDataExample": "{\"command\": \"source ~/.config/nvim/plugin/my_plugin.vim\"}",
					"outputDataExample": "null"
				},
				{
					"simStepId": "1486590b-d67c-407d-99d5-572f84a8be49",
					"diagramNodeId": "b45e90f1-db79-4bd1-a1a7-b256fdafde6d",
					"simStepLabel": "Passing Command String to Executor",
					"simStepDescription": "The command string is passed from the API layer to the core command-line processor `do_cmdline_cmd` for execution.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/nvim/api/vimscript.c",
						"startLine": "140",
						"endLine": "140",
						"relevantVariables": [
							"do_cmdline_cmd"
						]
					},
					"inputDataExample": "{\"command\": \"source ~/.config/nvim/plugin/my_plugin.vim\"}",
					"outputDataExample": "{\"command\": \"source ~/.config/nvim/plugin/my_plugin.vim\"}"
				},
				{
					"simStepId": "2457a8c1-7c83-4d28-9732-9a8321da9eca",
					"diagramNodeId": "4d776b34-6826-44ed-89bb-850cb3a2b5b7",
					"simStepLabel": "Core Command Processing",
					"simStepDescription": "The `do_cmdline_cmd` function is a wrapper that calls the main command processing function, `do_cmdline`. This central function is responsible for parsing the command string, identifying the command, and dispatching it to the appropriate handler.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/nvim/ex_docmd.c",
						"startLine": "373",
						"endLine": "376",
						"relevantVariables": [
							"do_cmdline_cmd",
							"cmd",
							"do_cmdline"
						]
					},
					"inputDataExample": "{\"cmd\": \"source ~/.config/nvim/plugin/my_plugin.vim\"}",
					"outputDataExample": "{\"parsed_command\": \"CMD_source\", \"args\": \"~/.config/nvim/plugin/my_plugin.vim\"}"
				},
				{
					"simStepId": "84534a40-54c0-4e79-ab6c-99047722e648",
					"diagramNodeId": "311fdd15-bcbd-4e83-a181-e46232837504",
					"simStepLabel": "Dispatch to Command Handler",
					"simStepDescription": "After parsing, the command execution engine dispatches the command and its arguments to the specific function registered to handle it. For the `:source` command, this is `ex_source`.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/nvim/ex_cmds.lua",
						"startLine": "2552",
						"endLine": "2558",
						"relevantVariables": [
							"command = 'source'",
							"func = 'ex_source'"
						]
					},
					"inputDataExample": "{\"parsed_command\": \"CMD_source\", \"args\": \"~/.config/nvim/plugin/my_plugin.vim\"}",
					"outputDataExample": "{\"parsed_command\": \"CMD_source\", \"args\": \"~/.config/nvim/plugin/my_plugin.vim\"}"
				},
				{
					"simStepId": "a9c1483a-e524-4548-938f-1e858991fb17",
					"diagramNodeId": "9c795b05-0144-41ba-acb2-be2f7205c35f",
					"simStepLabel": "Execute `:source` Command",
					"simStepDescription": "The `ex_source` function handles the `:source` command. It takes the file path provided as an argument and initiates the process of reading and executing the script file.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/nvim/runtime.c",
						"startLine": "1866",
						"endLine": "1869",
						"relevantVariables": [
							"ex_source",
							"eap",
							"cmd_source"
						]
					},
					"inputDataExample": "{\"eap->arg\": \"~/.config/nvim/plugin/my_plugin.vim\"}",
					"outputDataExample": "{}"
				},
				{
					"simStepId": "276c5788-3c39-4f4d-99ad-0dfa57c95e7b",
					"diagramNodeId": "9f62d16b-da91-42ab-8ec0-ddb2ae29d8bc",
					"simStepLabel": "Reading Script File Line by Line",
					"simStepDescription": "The `cmd_source` function (called by `ex_source`) reads the specified script file line by line. Each line is treated as a separate Vimscript command to be executed.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/nvim/runtime.c",
						"startLine": "1868",
						"endLine": "1868",
						"relevantVariables": [
							"cmd_source"
						]
					},
					"inputDataExample": "{\"file_path\": \"~/.config/nvim/plugin/my_plugin.vim\"}",
					"outputDataExample": "{\"line_content\": \"call MyPluginFunc()\"}"
				},
				{
					"simStepId": "87627dcb-783c-4f41-bb38-8de49d48016d",
					"diagramNodeId": "f0c576ca-6f38-4f81-b475-0afc425c8e55",
					"simStepLabel": "Executing Script Line",
					"simStepDescription": "Each line read from the sourced script, such as 'call MyPluginFunc()', is executed by recursively calling the central command processor, `do_cmdline_cmd`, which will parse and dispatch the `:call` command.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/nvim/eval/funcs.c",
						"startLine": "1495",
						"endLine": "1495",
						"relevantVariables": [
							"do_cmdline_cmd"
						]
					},
					"inputDataExample": "{\"cmd\": \"call MyPluginFunc()\"}",
					"outputDataExample": "{}"
				},
				{
					"simStepId": "4e920e03-135d-4e4f-a4e1-22c3e69ac694",
					"diagramNodeId": "2b165210-c766-43e8-8f7a-dffb18f42866",
					"simStepLabel": "Passing Expression to Evaluator",
					"simStepDescription": "The function call `MyPluginFunc()` is an expression that needs to be evaluated. The expression string is passed to the core evaluation entry point, `eval0`.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/nvim/api/vimscript.c",
						"startLine": "166",
						"endLine": "166",
						"relevantVariables": [
							"eval0",
							"expr.data"
						]
					},
					"inputDataExample": "{\"expression_string\": \"MyPluginFunc()\"}",
					"outputDataExample": "{\"expression_string\": \"MyPluginFunc()\"}"
				},
				{
					"simStepId": "0712ca23-aeff-4f04-b68b-42a5bc59f0d7",
					"diagramNodeId": "79938310-92f3-492d-a5e5-eb0bc4d5741b",
					"simStepLabel": "Core Expression Evaluation",
					"simStepDescription": "The `eval0` function, and the `eval1` through `eval7` functions it calls, form a recursive-descent parser that interprets the Vimscript expression. It handles function calls, variable lookups, operators, and literals to compute the final result, forming the heart of Vimscript compatibility.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/nvim/eval.c",
						"startLine": "1",
						"endLine": "5",
						"relevantVariables": [
							"eval.c"
						]
					},
					"inputDataExample": "{\"expression_string\": \"MyPluginFunc()\"}",
					"outputDataExample": "{\"result_typval\": {\"type\": \"VAR_NUMBER\", \"value\": 3}}"
				}
			],
			"description": "<ul><li>Neovim maintains a high degree of compatibility with traditional Vim, allowing users to leverage the vast ecosystem of existing Vim plugins and their personal Vimscript configurations</li><li>- Supports executing Vimscript for configuration (<code>init</li><li>vim</code>) and runtime plugins</li><li>- Most Vim plugins work out-of-the-box</li><li>- Provides a smooth migration path for long-time Vim users</li></ul>",
			"simulationNodesAndEdges": {
				"214dc308-877b-49e3-b633-c5cce30f8c77": {
					"simStepIds": [
						"1f86bd67-1f46-4692-a8a6-07d602732c45"
					]
				},
				"4d776b34-6826-44ed-89bb-850cb3a2b5b7": {
					"simStepIds": [
						"2457a8c1-7c83-4d28-9732-9a8321da9eca"
					]
				},
				"9c795b05-0144-41ba-acb2-be2f7205c35f": {
					"simStepIds": [
						"a9c1483a-e524-4548-938f-1e858991fb17"
					]
				},
				"f0c576ca-6f38-4f81-b475-0afc425c8e55": {
					"simStepIds": [
						"87627dcb-783c-4f41-bb38-8de49d48016d"
					]
				},
				"79938310-92f3-492d-a5e5-eb0bc4d5741b": {
					"simStepIds": [
						"0712ca23-aeff-4f04-b68b-42a5bc59f0d7"
					]
				},
				"b45e90f1-db79-4bd1-a1a7-b256fdafde6d": {
					"simStepIds": [
						"1486590b-d67c-407d-99d5-572f84a8be49"
					]
				},
				"311fdd15-bcbd-4e83-a181-e46232837504": {
					"simStepIds": [
						"84534a40-54c0-4e79-ab6c-99047722e648"
					]
				},
				"9f62d16b-da91-42ab-8ec0-ddb2ae29d8bc": {
					"simStepIds": [
						"276c5788-3c39-4f4d-99ad-0dfa57c95e7b"
					]
				},
				"2b165210-c766-43e8-8f7a-dffb18f42866": {
					"simStepIds": [
						"4e920e03-135d-4e4f-a4e1-22c3e69ac694"
					]
				}
			},
			"isAIGenerated": true,
			"keywords": "do_cmdline_cmd, ex_source, eval.c",
			"generationPrompt": "Vimscript and Vim Plugin Compatibility",
			"generationKeywords": "do_cmdline_cmd, ex_source, eval.c"
		},
		"Window and Tab Management": {
			"name": "Window and Tab Management",
			"simSteps": [
				{
					"simStepId": "09103307-3564-4428-88ea-68f85c5a11e7",
					"diagramNodeId": "f429c250-0493-40e0-9440-54177c9eaf4c",
					"simStepLabel": "Window Splitting Flow: Execute Split Command",
					"simStepDescription": "The user initiates a window split by executing a command like `:split` or `:vsplit`. The command is parsed, and the core windowing logic is invoked to handle the split operation.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/nvim/ex_docmd.c",
						"startLine": "5476",
						"endLine": "5478",
						"relevantVariables": [
							"eap",
							"win_split"
						]
					},
					"inputDataExample": "{\n  \"command\": \":split\"\n}",
					"outputDataExample": "{\n  \"size\": 0,\n  \"flags\": 0\n}"
				},
				{
					"simStepId": "a50368ba-3026-4949-9850-040fea7d5ea2",
					"diagramNodeId": "9e0bf39e-f266-4d9a-9c03-0d22b7ce12fb",
					"simStepLabel": "Window Splitting Flow: Data to Splitting Logic",
					"simStepDescription": "The command execution logic calls the `win_split` function, passing arguments that specify the size of the new window (0 for half) and the split direction (e.g., vertical or horizontal).",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/nvim/ex_docmd.c",
						"startLine": "5477",
						"endLine": "5477",
						"relevantVariables": [
							"win_split"
						]
					},
					"inputDataExample": "{\n  \"size\": 0,\n  \"flags\": 0\n}",
					"outputDataExample": "{\n  \"size\": 0,\n  \"flags\": 0\n}"
				},
				{
					"simStepId": "ede6f7ce-ff71-4955-a1ee-759d468b14ba",
					"diagramNodeId": "3ae7a6d9-1459-4042-9034-c90226a6240c",
					"simStepLabel": "Window Splitting Flow: Create New Window",
					"simStepDescription": "The `win_split` function orchestrates the creation of a new window. It calls `win_split_ins` which allocates memory for the new window structure, links it into the window layout tree, and calculates the dimensions for both the old and new windows.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/nvim/window.c",
						"startLine": "1030",
						"endLine": "1038",
						"relevantVariables": [
							"win_split",
							"win_split_ins"
						]
					},
					"inputDataExample": "{\n  \"size\": 0,\n  \"flags\": 0\n}",
					"outputDataExample": "{\n  \"new_window_pointer\": \"0x564a9b2b9c20\"\n}"
				},
				{
					"simStepId": "168b0668-7eb4-4476-9283-ff1ee1b503e5",
					"diagramNodeId": "ead144be-ab0f-4248-ad7f-e5fb30eec014",
					"simStepLabel": "Window Splitting Flow: Pass New Window to Focus",
					"simStepDescription": "After the new window is successfully created and inserted into the layout, its reference is passed to the `win_enter_ext` function to make it the new current window.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/nvim/window.c",
						"startLine": "1573",
						"endLine": "1575",
						"relevantVariables": [
							"wp",
							"win_enter_ext"
						]
					},
					"inputDataExample": "{\n  \"new_window_pointer\": \"0x564a9b2b9c20\",\n  \"flags\": \"WEE_TRIGGER_NEW_AUTOCMDS | WEE_TRIGGER_ENTER_AUTOCMDS | WEE_TRIGGER_LEAVE_AUTOCMDS\"\n}",
					"outputDataExample": "{\n  \"new_window_pointer\": \"0x564a9b2b9c20\",\n  \"flags\": \"WEE_TRIGGER_NEW_AUTOCMDS | WEE_TRIGGER_ENTER_AUTOCMDS | WEE_TRIGGER_LEAVE_AUTOCMDS\"\n}"
				},
				{
					"simStepId": "93f995ef-1a38-48c1-96a1-08044a13ca4f",
					"diagramNodeId": "b6a93422-d237-4b2c-a516-66573c166c14",
					"simStepLabel": "Window Splitting Flow: Focus New Window and Trigger Autocommands",
					"simStepDescription": "The `win_enter_ext` function handles the complex process of changing the active window. It updates the global `curwin` pointer, and triggers a sequence of autocommands: `WinLeave` and `BufLeave` for the old window, followed by `WinEnter` and `BufEnter` for the new one. This allows plugins to react to window layout changes.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/nvim/window.c",
						"startLine": "4969",
						"endLine": "4974",
						"relevantVariables": [
							"win_enter_ext",
							"wp",
							"curwin",
							"apply_autocmds"
						]
					},
					"inputDataExample": "{\n  \"new_window_pointer\": \"0x564a9b2b9c20\"\n}",
					"outputDataExample": "{\n  \"status\": \"Focus changed, autocommands triggered\"\n}"
				},
				{
					"simStepId": "fdfba2d4-9a1d-4d6d-8699-3368ea7f2ce1",
					"diagramNodeId": "3181d556-f0cf-4a23-be2d-37bcf7e696a2",
					"simStepLabel": "Tab Switching Flow: Keystroke Processing",
					"simStepDescription": "The user presses a key combination like `gt` to switch to the next tab page. The normal mode command processor identifies the keystroke and calls the appropriate function to handle tab navigation.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/nvim/normal.c",
						"startLine": "5675",
						"endLine": "5679",
						"relevantVariables": [
							"oap",
							"cap",
							"goto_tabpage"
						]
					},
					"inputDataExample": "{\n  \"keystroke\": \"gt\",\n  \"count\": 1\n}",
					"outputDataExample": "{\n  \"target_tab_number\": 0\n}"
				},
				{
					"simStepId": "9a41d88b-7b69-41fd-993a-1a519ef61c5e",
					"diagramNodeId": "4b443096-05fe-4898-9296-98eb5db2ae29",
					"simStepLabel": "Tab Switching Flow: Data to Tab Navigation Logic",
					"simStepDescription": "The target tab number is passed to the `goto_tabpage` function. A value of 0 indicates moving to the next tab page relative to the current one.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/nvim/normal.c",
						"startLine": "5677",
						"endLine": "5677",
						"relevantVariables": [
							"goto_tabpage"
						]
					},
					"inputDataExample": "{\n  \"target_tab_number\": 0\n}",
					"outputDataExample": "{\n  \"target_tab_number\": 0\n}"
				},
				{
					"simStepId": "f73213a7-afc2-436d-8760-49676497d7e0",
					"diagramNodeId": "42890fde-b233-4d8a-8d22-466d3fb364b0",
					"simStepLabel": "Tab Switching Flow: Switch Active Tab Page",
					"simStepDescription": "The `goto_tabpage` function finds the target tab page and calls `goto_tabpage_tp` to perform the switch. This involves triggering `TabLeave` autocommands, updating the global `curtab` pointer to the new tab page, and then calling `win_enter_ext` to focus the main window within that new tab.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/nvim/window.c",
						"startLine": "4636",
						"endLine": "4652",
						"relevantVariables": [
							"goto_tabpage",
							"goto_tabpage_tp",
							"tp"
						]
					},
					"inputDataExample": "{\n  \"target_tab_number\": 0\n}",
					"outputDataExample": "{\n  \"new_tab_pointer\": \"0x564a9b2f8e40\",\n  \"window_to_focus\": \"0x564a9b2f9f50\"\n}"
				},
				{
					"simStepId": "fc05e133-dad0-4a77-ab39-c3552475cae4",
					"diagramNodeId": "50e97e8d-bb86-4a46-b410-42d0b2f46057",
					"simStepLabel": "Tab Switching Flow: Pass New Window to Focus",
					"simStepDescription": "The reference to the current window of the destination tab page is passed to `win_enter_ext` to handle the focus change.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/nvim/window.c",
						"startLine": "4521",
						"endLine": "4524",
						"relevantVariables": [
							"tp",
							"win_enter_ext"
						]
					},
					"inputDataExample": "{\n  \"window_to_focus\": \"0x564a9b2f9f50\",\n  \"flags\": \"WEE_CURWIN_INVALID | WEE_TRIGGER_ENTER_AUTOCMDS | WEE_TRIGGER_LEAVE_AUTOCMDS\"\n}",
					"outputDataExample": "{\n  \"window_to_focus\": \"0x564a9b2f9f50\",\n  \"flags\": \"WEE_CURWIN_INVALID | WEE_TRIGGER_ENTER_AUTOCMDS | WEE_TRIGGER_LEAVE_AUTOCMDS\"\n}"
				},
				{
					"simStepId": "9295a909-2af8-4f26-8a06-027a48c2764f",
					"diagramNodeId": "404214da-428b-49fb-83f8-d1e3a93fc15e",
					"simStepLabel": "Tab Switching Flow: Focus Window and Trigger Autocommands",
					"simStepDescription": "The `win_enter_ext` function manages the context switch. It triggers `WinLeave`/`BufLeave` for the window in the old tab, and `WinEnter`/`BufEnter` for the window in the new tab. Crucially, it also detects that the tab page has changed and triggers the `TabEnter` autocommand.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/nvim/window.c",
						"startLine": "4969",
						"endLine": "4974",
						"relevantVariables": [
							"win_enter_ext",
							"wp",
							"curwin",
							"curtab",
							"apply_autocmds"
						]
					},
					"inputDataExample": "{\n  \"window_to_focus\": \"0x564a9b2f9f50\"\n}",
					"outputDataExample": "{\n  \"status\": \"Focus and tab changed, autocommands triggered\"\n}"
				},
				{
					"simStepId": "53db624a-1c7f-490c-950f-7a6c769446c4",
					"diagramNodeId": "992a8c59-0ac5-4caf-8281-b2350262c5dd",
					"simStepLabel": "Window Focus Flow: Command Execution",
					"simStepDescription": "The user changes focus to a different window, for example by pressing `CTRL-W j` or by clicking in another window. The input is processed, the target window is identified, and `win_enter` is called to perform the focus change.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/nvim/window.c",
						"startLine": "5133",
						"endLine": "5146",
						"relevantVariables": [
							"buf_jump_open_win",
							"wp",
							"win_enter"
						]
					},
					"inputDataExample": "{\n  \"command\": \"CTRL-W j\"\n}",
					"outputDataExample": "{\n  \"target_window_pointer\": \"0x564a9b2c7d30\",\n  \"undo_sync\": false\n}"
				},
				{
					"simStepId": "9b4aed79-8301-42c1-a047-e3c67385bda2",
					"diagramNodeId": "13c0d90e-f6aa-4a24-bc82-47075b8c930c",
					"simStepLabel": "Window Focus Flow: Data to Focus Logic",
					"simStepDescription": "A pointer to the target window (`win_T *`) is passed to the `win_enter` function, which serves as a wrapper for the more complex `win_enter_ext` function.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/nvim/window.c",
						"startLine": "4956",
						"endLine": "4958",
						"relevantVariables": [
							"wp",
							"undo_sync",
							"win_enter_ext"
						]
					},
					"inputDataExample": "{\n  \"target_window_pointer\": \"0x564a9b2c7d30\",\n  \"undo_sync\": true\n}",
					"outputDataExample": "{\n  \"target_window_pointer\": \"0x564a9b2c7d30\",\n  \"undo_sync\": true\n}"
				},
				{
					"simStepId": "012ef29c-1b5d-48c8-b22a-89b00092f74e",
					"diagramNodeId": "7d80f3a4-fc27-4bf6-831f-251d437ae594",
					"simStepLabel": "Window Focus Flow: Change Focus and Trigger Autocommands",
					"simStepDescription": "The `win_enter_ext` function is called to handle the window focus change. It updates `curwin`, and triggers the `WinLeave`/`BufLeave` autocommands for the previously active window and `WinEnter`/`BufEnter` for the newly focused window. The UI is then updated to reflect the change, such as by moving the cursor and highlighting the new active status line.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/nvim/window.c",
						"startLine": "4969",
						"endLine": "4974",
						"relevantVariables": [
							"win_enter_ext",
							"wp",
							"curwin",
							"apply_autocmds"
						]
					},
					"inputDataExample": "{\n  \"target_window_pointer\": \"0x564a9b2c7d30\"\n}",
					"outputDataExample": "{\n  \"status\": \"Focus changed, autocommands triggered, UI updated\"\n}"
				}
			],
			"description": "<ul><li>Neovim provides powerful tools for managing screen real estate and organizing workspaces, which is essential for working on complex projects with multiple files</li><li>- Split the editor view horizontally or vertically to view multiple files or different parts of the same file</li><li>- Use tab pages to manage distinct layouts or sets of files</li><li>- Floating windows allow plugins to display information without disrupting the primary window layout</li></ul>",
			"simulationNodesAndEdges": {
				"f429c250-0493-40e0-9440-54177c9eaf4c": {
					"simStepIds": [
						"09103307-3564-4428-88ea-68f85c5a11e7"
					]
				},
				"3ae7a6d9-1459-4042-9034-c90226a6240c": {
					"simStepIds": [
						"ede6f7ce-ff71-4955-a1ee-759d468b14ba"
					]
				},
				"b6a93422-d237-4b2c-a516-66573c166c14": {
					"simStepIds": [
						"93f995ef-1a38-48c1-96a1-08044a13ca4f"
					]
				},
				"3181d556-f0cf-4a23-be2d-37bcf7e696a2": {
					"simStepIds": [
						"fdfba2d4-9a1d-4d6d-8699-3368ea7f2ce1"
					]
				},
				"42890fde-b233-4d8a-8d22-466d3fb364b0": {
					"simStepIds": [
						"f73213a7-afc2-436d-8760-49676497d7e0"
					]
				},
				"404214da-428b-49fb-83f8-d1e3a93fc15e": {
					"simStepIds": [
						"9295a909-2af8-4f26-8a06-027a48c2764f"
					]
				},
				"992a8c59-0ac5-4caf-8281-b2350262c5dd": {
					"simStepIds": [
						"53db624a-1c7f-490c-950f-7a6c769446c4"
					]
				},
				"7d80f3a4-fc27-4bf6-831f-251d437ae594": {
					"simStepIds": [
						"012ef29c-1b5d-48c8-b22a-89b00092f74e"
					]
				},
				"9e0bf39e-f266-4d9a-9c03-0d22b7ce12fb": {
					"simStepIds": [
						"a50368ba-3026-4949-9850-040fea7d5ea2"
					]
				},
				"ead144be-ab0f-4248-ad7f-e5fb30eec014": {
					"simStepIds": [
						"168b0668-7eb4-4476-9283-ff1ee1b503e5"
					]
				},
				"4b443096-05fe-4898-9296-98eb5db2ae29": {
					"simStepIds": [
						"9a41d88b-7b69-41fd-993a-1a519ef61c5e"
					]
				},
				"50e97e8d-bb86-4a46-b410-42d0b2f46057": {
					"simStepIds": [
						"fc05e133-dad0-4a77-ab39-c3552475cae4"
					]
				},
				"13c0d90e-f6aa-4a24-bc82-47075b8c930c": {
					"simStepIds": [
						"9b4aed79-8301-42c1-a047-e3c67385bda2"
					]
				}
			},
			"isAIGenerated": true,
			"keywords": "win_split, goto_tabpage, win_enter",
			"generationPrompt": "Window and Tab Management",
			"generationKeywords": "win_split, goto_tabpage, win_enter"
		},
		"Persistent Sessions with Shared Data (ShaDa)": {
			"name": "Persistent Sessions with Shared Data (ShaDa)",
			"simSteps": [
				{
					"simStepId": "db84dff7-c246-409f-9d89-49b95e2ea413",
					"diagramNodeId": "740ed89d-5e3a-495f-9de6-ba4011e07460",
					"simStepLabel": "Flow: Load Session - Step 1: Neovim Startup",
					"simStepDescription": "During the startup process, Neovim prepares to restore the previous session by reading the ShaDa (Shared Data) file. This is initiated from the main function.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/nvim/main.c",
						"startLine": "500",
						"endLine": "502",
						"relevantVariables": [
							"p_shada",
							"shada_read_everything"
						]
					},
					"inputDataExample": "{}",
					"outputDataExample": "{}"
				},
				{
					"simStepId": "a2e55f12-9ca4-4a8b-a997-3e38d1e89043",
					"diagramNodeId": "f0b0406b-2704-4638-a274-af3587bf8124",
					"simStepLabel": "Flow: Load Session - Step 2: Call to Read ShaDa File",
					"simStepDescription": "The main function calls `shada_read_everything` to handle the logic of finding, reading, and parsing the ShaDa file. `NULL` as the first argument means the default file path will be used.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/nvim/main.c",
						"startLine": "501",
						"endLine": "501",
						"relevantVariables": [
							"shada_read_everything"
						]
					},
					"inputDataExample": "{\n  \"fname\": null,\n  \"forceit\": false,\n  \"missing_ok\": true\n}",
					"outputDataExample": "{\n  \"fname\": null,\n  \"forceit\": false,\n  \"missing_ok\": true\n}"
				},
				{
					"simStepId": "68470baa-c67e-427a-845b-0da191047596",
					"diagramNodeId": "f96cb115-a054-4c97-8c4f-26c71ac71018",
					"simStepLabel": "Flow: Load Session - Step 3: Execute `shada_read_everything`",
					"simStepDescription": "The `shada_read_everything` function in `shada.c` is executed. It acts as a wrapper, setting the appropriate flags to read all relevant session data (info, marks, history, etc.) and calling the core `shada_read_file` function.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/nvim/shada.c",
						"startLine": "2887",
						"endLine": "2891",
						"relevantVariables": [
							"shada_read_file",
							"kShaDaWantInfo",
							"kShaDaWantMarks",
							"kShaDaGetOldfiles"
						]
					},
					"inputDataExample": "{\n  \"fname\": null,\n  \"forceit\": false,\n  \"missing_ok\": true\n}",
					"outputDataExample": "{\n  \"shada_read_file_flags\": \"kShaDaWantInfo | kShaDaWantMarks | kShaDaGetOldfiles\"\n}"
				},
				{
					"simStepId": "41dbb30b-51d1-4b5c-9722-89eba53b9085",
					"diagramNodeId": "c47938c7-97a4-4c2e-8f02-795503afdb74",
					"simStepLabel": "Flow: Load Session - Step 4: Data Read from File System",
					"simStepDescription": "The contents of the ShaDa file (e.g., `~/.local/share/nvim/shada/main.shada`) are read from disk. The data is stored in MessagePack format.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/nvim/shada.c",
						"startLine": "2888",
						"endLine": "2888",
						"relevantVariables": [
							"shada_read_file"
						]
					},
					"inputDataExample": "{\n  \"filePath\": \"/home/user/.local/share/nvim/shada/main.shada\"\n}",
					"outputDataExample": "{\n  \"filePath\": \"/home/user/.local/share/nvim/shada/main.shada\"\n}"
				},
				{
					"simStepId": "c711debd-7b2b-4545-8e35-0ff796b2b17c",
					"diagramNodeId": "4d394212-6e1c-4cfb-b01a-edf7219aa619",
					"simStepLabel": "Flow: Load Session - Step 5: Parse Data and Restore State",
					"simStepDescription": "The MessagePack data read from the file is deserialized. The parsed information is used to populate Neovim's internal state, restoring items like command history, search history, registers, marks, and the buffer list.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/nvim/shada.c",
						"startLine": "2887",
						"endLine": "2891",
						"relevantVariables": [
							"shada_read_file"
						]
					},
					"inputDataExample": "{\n  \"rawData\": \"/* msgpack binary data */\"\n}",
					"outputDataExample": "{\n  \"registers\": {\n    \"\\\"\": \"let g:my_var = 1\",\n    \"a\": \"some other text\"\n  },\n  \"command_history\": [ \":w\", \":q!\" ],\n  \"search_history\": [ \"/shada\" ],\n  \"marks\": {\n    \"'A'\": {\n      \"file\": \"/home/user/project/main.c\",\n      \"line\": 100,\n      \"col\": 5\n    }\n  }\n}"
				},
				{
					"simStepId": "95f365fa-0c74-4ce1-b3c1-7a52c1109915",
					"diagramNodeId": "e0b2d40c-02cc-46ac-99ee-863d04cddf64",
					"simStepLabel": "Flow: Load Session - Step 6: Session State Restored",
					"simStepDescription": "The restored session data is now active within Neovim's internal data structures, influencing the editor's state.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/nvim/main.c",
						"startLine": "502",
						"endLine": "502",
						"relevantVariables": [
							"TIME_MSG"
						]
					},
					"inputDataExample": "{\n  \"status\": \"Restored\",\n  \"restored_items\": [ \"registers\", \"history\", \"marks\", \"buffers\" ]\n}",
					"outputDataExample": "{\n  \"status\": \"Restored\",\n  \"restored_items\": [ \"registers\", \"history\", \"marks\", \"buffers\" ]\n}"
				},
				{
					"simStepId": "24440508-8c7b-4e59-a317-cd461ea1ef2e",
					"diagramNodeId": "00ea5702-7d96-4367-b992-361fb1209d10",
					"simStepLabel": "Flow: Load Session - Step 7: Startup Continues",
					"simStepDescription": "With the session state restored, the Neovim startup process continues, eventually presenting the user with their previous editing environment.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/nvim/main.c",
						"startLine": "504",
						"endLine": "507",
						"relevantVariables": [
							"get_vim_var_list",
							"VV_OLDFILES"
						]
					},
					"inputDataExample": "{}",
					"outputDataExample": "{}"
				},
				{
					"simStepId": "c5571808-e2ec-47fc-a5de-9df864d59c28",
					"diagramNodeId": "fb6bf2d4-5a8f-47df-b923-7a36870d3745",
					"simStepLabel": "Flow: Save Session - Step 1: Neovim Shutdown",
					"simStepDescription": "During a clean exit, Neovim prepares to persist the current session state (registers, history, marks, etc.) to the ShaDa file. This is one of the final steps before the process terminates.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/nvim/main.c",
						"startLine": "781",
						"endLine": "785",
						"relevantVariables": [
							"p_shada",
							"shada_write_file"
						]
					},
					"inputDataExample": "{\n  \"exit_code\": 0\n}",
					"outputDataExample": "{}"
				},
				{
					"simStepId": "0deb9a60-984c-41f3-a543-da8b82f5d471",
					"diagramNodeId": "c14a0744-ebe3-4b4e-b700-651811c24bd5",
					"simStepLabel": "Flow: Save Session - Step 2: Call to Write ShaDa File",
					"simStepDescription": "The `main` function calls `shada_write_file` to handle the gathering, serialization, and writing of session data. `NULL` indicates the default ShaDa file should be used.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/nvim/main.c",
						"startLine": "784",
						"endLine": "784",
						"relevantVariables": [
							"shada_write_file"
						]
					},
					"inputDataExample": "{\n  \"file\": null,\n  \"nomerge\": false\n}",
					"outputDataExample": "{\n  \"file\": null,\n  \"nomerge\": false\n}"
				},
				{
					"simStepId": "4d4095e8-155c-485b-829e-3fee86027fcb",
					"diagramNodeId": "0c76e84d-8bce-42fb-8fe9-b7fcb367652c",
					"simStepLabel": "Flow: Save Session - Step 3: Execute `shada_write_file`",
					"simStepDescription": "The `shada_write_file` function in `shada.c` is executed. It orchestrates the process of collecting all session data, creating a temporary file, and writing the data.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/nvim/shada.c",
						"startLine": "2686",
						"endLine": "2690",
						"relevantVariables": [
							"shada_write_file",
							"shada_filename"
						]
					},
					"inputDataExample": "{\n  \"file\": null,\n  \"nomerge\": false\n}",
					"outputDataExample": "{\n  \"registers\": {\n    \"\\\"\": \"newly yanked text\"\n  },\n  \"command_history\": [\":wq\"],\n  \"search_history\": [\"/new_pattern\"],\n  \"marks\": {\n    \"'B'\": {\n      \"file\": \"/home/user/project/other.c\",\n      \"line\": 50,\n      \"col\": 1\n    }\n  }\n}"
				},
				{
					"simStepId": "c5d68fbd-e725-44d3-990a-c2860aa0017b",
					"diagramNodeId": "e42db962-cf80-495a-b05a-31ae87aeacd0",
					"simStepLabel": "Flow: Save Session - Step 4: Create Temporary File",
					"simStepDescription": "To ensure an atomic write and prevent data corruption, a temporary file (e.g., `main.shada.tmp.a`) is created. The serialized session data will be written to this file first.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/nvim/shada.c",
						"startLine": "2709",
						"endLine": "2713",
						"relevantVariables": [
							"tempname",
							"modname"
						]
					},
					"inputDataExample": "{\n  \"original_file\": \"/home/user/.local/share/nvim/shada/main.shada\"\n}",
					"outputDataExample": "{\n  \"temp_file\": \"/home/user/.local/share/nvim/shada/main.shada.tmp.a\"\n}"
				},
				{
					"simStepId": "6d6d7f55-fb2e-4dbd-b996-bf17a8df685d",
					"diagramNodeId": "bd389178-8e76-4b0c-8185-5d361c46f242",
					"simStepLabel": "Flow: Save Session - Step 5: Serialize and Write Data",
					"simStepDescription": "The collected session data is serialized into the MessagePack format and written sequentially into the temporary file.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/nvim/shada.c",
						"startLine": "2727",
						"endLine": "2728",
						"relevantVariables": [
							"sd_writer",
							"file_open",
							"tempname"
						]
					},
					"inputDataExample": "{\n  \"session_data\": {\n     \"command_history\": [\":wq\"]\n  }\n}",
					"outputDataExample": "{\n  \"status\": \"Write to temp file successful\"\n}"
				},
				{
					"simStepId": "de56f49b-be1d-40e0-84b9-dc5e0393ef63",
					"diagramNodeId": "0d99bf65-8e28-4184-96a7-ef5670aa76b3",
					"simStepLabel": "Flow: Save Session - Step 6: Atomic Rename Operation",
					"simStepDescription": "Once the temporary file is successfully written and closed, it is atomically renamed to the final ShaDa file name, replacing the previous version. This ensures that the ShaDa file is always in a consistent state.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/nvim/shada.c",
						"startLine": "2855",
						"endLine": "2856",
						"relevantVariables": [
							"os_rename",
							"tempname",
							"fname"
						]
					},
					"inputDataExample": "{\n  \"source\": \"/home/user/.local/share/nvim/shada/main.shada.tmp.a\",\n  \"destination\": \"/home/user/.local/share/nvim/shada/main.shada\"\n}",
					"outputDataExample": "{\n  \"source\": \"/home/user/.local/share/nvim/shada/main.shada.tmp.a\",\n  \"destination\": \"/home/user/.local/share/nvim/shada/main.shada\"\n}"
				},
				{
					"simStepId": "4e39780d-ae85-48aa-b6a1-18c6ee1f1c42",
					"diagramNodeId": "0a55535d-59e2-4a2a-9a10-ed967406be4c",
					"simStepLabel": "Flow: Save Session - Step 7: Shutdown Continues",
					"simStepDescription": "After successfully persisting the session state, Neovim continues its shutdown procedure and exits.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/nvim/main.c",
						"startLine": "787",
						"endLine": "790",
						"relevantVariables": [
							"v_dying"
						]
					},
					"inputDataExample": "{\n  \"write_status\": \"Success\"\n}",
					"outputDataExample": "{}"
				}
			],
			"description": "<ul><li>Neovim saves and restores session information across editor restarts, allowing users to resume their work where they left off</li><li>This replaces the older 'viminfo' feature from Vim</li><li>- Persists command history, search history, and input line history</li><li>- Saves and restores registers, marks (local and global), and the buffer list</li><li>- Helps maintain context and reduces friction when starting new editing sessions</li></ul>",
			"simulationNodesAndEdges": {
				"740ed89d-5e3a-495f-9de6-ba4011e07460": {
					"simStepIds": [
						"db84dff7-c246-409f-9d89-49b95e2ea413"
					]
				},
				"f96cb115-a054-4c97-8c4f-26c71ac71018": {
					"simStepIds": [
						"68470baa-c67e-427a-845b-0da191047596"
					]
				},
				"4d394212-6e1c-4cfb-b01a-edf7219aa619": {
					"simStepIds": [
						"c711debd-7b2b-4545-8e35-0ff796b2b17c"
					]
				},
				"00ea5702-7d96-4367-b992-361fb1209d10": {
					"simStepIds": [
						"24440508-8c7b-4e59-a317-cd461ea1ef2e"
					]
				},
				"fb6bf2d4-5a8f-47df-b923-7a36870d3745": {
					"simStepIds": [
						"c5571808-e2ec-47fc-a5de-9df864d59c28"
					]
				},
				"0c76e84d-8bce-42fb-8fe9-b7fcb367652c": {
					"simStepIds": [
						"4d4095e8-155c-485b-829e-3fee86027fcb"
					]
				},
				"bd389178-8e76-4b0c-8185-5d361c46f242": {
					"simStepIds": [
						"6d6d7f55-fb2e-4dbd-b996-bf17a8df685d"
					]
				},
				"0a55535d-59e2-4a2a-9a10-ed967406be4c": {
					"simStepIds": [
						"4e39780d-ae85-48aa-b6a1-18c6ee1f1c42"
					]
				},
				"f0b0406b-2704-4638-a274-af3587bf8124": {
					"simStepIds": [
						"a2e55f12-9ca4-4a8b-a997-3e38d1e89043"
					]
				},
				"c47938c7-97a4-4c2e-8f02-795503afdb74": {
					"simStepIds": [
						"41dbb30b-51d1-4b5c-9722-89eba53b9085"
					]
				},
				"e0b2d40c-02cc-46ac-99ee-863d04cddf64": {
					"simStepIds": [
						"95f365fa-0c74-4ce1-b3c1-7a52c1109915"
					]
				},
				"c14a0744-ebe3-4b4e-b700-651811c24bd5": {
					"simStepIds": [
						"0deb9a60-984c-41f3-a543-da8b82f5d471"
					]
				},
				"e42db962-cf80-495a-b05a-31ae87aeacd0": {
					"simStepIds": [
						"c5d68fbd-e725-44d3-990a-c2860aa0017b"
					]
				},
				"0d99bf65-8e28-4184-96a7-ef5670aa76b3": {
					"simStepIds": [
						"de56f49b-be1d-40e0-84b9-dc5e0393ef63"
					]
				}
			},
			"isAIGenerated": true,
			"keywords": "shada_read_everything, shada_write_file, shada.c",
			"generationPrompt": "Persistent Sessions with Shared Data (ShaDa)",
			"generationKeywords": "shada_read_everything, shada_write_file, shada.c"
		}
	},
	"cellToPath": {
		"d6a60112-6bc4-4474-8997-f4458fcc3328": "src",
		"3e82ef51-0ca1-4920-9642-822b9ab36245": "src/nvim",
		"daae3417-8258-49a6-a129-53b01c2aaa30": "src/nvim/main.c",
		"518c0162-31c6-4815-b119-eaa40b16f756": "src/nvim/normal.c",
		"009cda38-3911-4628-b7d7-f231e5b9d9c1": "src/nvim/edit.c",
		"fc227316-19fc-4c6b-858f-c5a2258e6038": "src/nvim/main.c-simstep-6cd87cb0-6e59-4149-819b-1f71b053ea56",
		"2c454cce-3d53-4ccd-8aad-bfb51ff68f2a": "src/nvim/normal.c-simstep-ce3da800-2568-4ad4-b612-180379aaff6d",
		"02a5eb0d-7779-4aa6-a386-2b0c7b32599c": "src/nvim/edit.c-simstep-9ba3df3f-324c-41ca-9dbd-7937612366b7",
		"20677a8e-f78e-4d90-b121-327ccef83669": "src/nvim/edit.c-simstep-ba30f07d-998c-4d61-95f2-cf0cfa3da97c",
		"b88cd60a-114c-4aa0-99ae-e71447500e62": "src/nvim/normal.c-simstep-29866267-f701-4727-927f-d97d94001177",
		"fe1e3d63-c1dd-4302-9c49-44ebd7bab5a6": "generated-edge-simstep-97f9849d-f37d-462d-9154-86af0bc326f3-fe1e3d63-c1dd-4302-9c49-44ebd7bab5a6",
		"d1f3cad6-6d29-4445-84a0-0495f39cfda5": "generated-edge-simstep-56d29906-e346-4deb-8233-ed01b8e2aa43-d1f3cad6-6d29-4445-84a0-0495f39cfda5",
		"5a19ec83-0c62-4f00-b056-a07cec0c77a6": "generated-edge-simstep-ce7bff20-72b5-4831-8b30-d545d67e90ec-5a19ec83-0c62-4f00-b056-a07cec0c77a6",
		"8765ad01-0c30-40ab-8037-fa7a2f7dfcf0": "generated-edge-simstep-c71c533b-e734-4cbd-91c5-6b0d7243c82a-8765ad01-0c30-40ab-8037-fa7a2f7dfcf0",
		"b52bf518-7886-464d-9f0c-143c99a095bd": "runtime",
		"87a748a7-1b4f-498c-a0e0-da2a5d827815": "test",
		"c922487a-a2f6-43f6-9277-9979bcda65df": "runtime/lua",
		"b4c81f3b-f7a8-48c1-a806-f4f685fda7d1": "test/functional",
		"c851f0f3-ad8b-4337-b109-5813415e3dd0": "runtime/lua/vim",
		"75e68e6b-cd4c-44d6-915e-f762027767fe": "test/functional/plugin",
		"1de65660-86b9-4e74-9809-48c7ed511209": "runtime/lua/vim/lsp.lua",
		"3e57265c-f610-4d80-a76c-a4ea5aa05a60": "runtime/lua/vim/lsp",
		"7d942eb2-d170-48d7-960e-2a880f5f9412": "test/functional/plugin/lsp",
		"71e6ac0f-df3a-4d68-8a74-686275b1132d": "runtime/lua/vim/lsp/client.lua",
		"f9f72dfc-2e7a-4acc-bad7-056824c3b13c": "runtime/lua/vim/lsp/buf.lua",
		"9cc89460-e83b-4fa1-a5bc-8530c4ca6ef8": "runtime/lua/vim/lsp/handlers.lua",
		"f57e2f28-09e1-4d7c-bc12-257c87bad075": "test/functional/plugin/lsp/diagnostic_spec.lua",
		"e293cc75-5e20-4786-8bd5-3ead6698bac2": "runtime/lua/vim/lsp.lua-simstep-7285d70b-8e21-4aa6-90b8-4626e8d15fce",
		"e0ce6135-616a-4bd8-8342-4d89d1a3639d": "runtime/lua/vim/lsp/client.lua-simstep-260ab1a1-c622-4a14-bd33-cf9a1cf5f83c",
		"f095a9dc-2d06-437b-93aa-3a7dd3ed833f": "test/functional/plugin/lsp/diagnostic_spec.lua-simstep-33be5e65-fed2-40c8-8efb-07b9cc952325",
		"4bca555a-8aaa-4a0a-911c-c9888268799d": "runtime/lua/vim/lsp.lua-simstep-1aa5f8e4-cfa3-4a67-af6f-017ce5243174",
		"bf73463f-8a85-4599-a168-942be8f9397a": "runtime/lua/vim/lsp/handlers.lua-simstep-bd6ae996-e127-46cb-b8a3-ef60eb19bd3c",
		"37af7ff0-4bcd-403d-9163-e048b49ba847": "generated-edge-simstep-991e652b-dec8-4511-9657-040f168c1f1e-37af7ff0-4bcd-403d-9163-e048b49ba847",
		"b84506f1-1881-4b72-9130-976d8f9f4dc0": "generated-edge-simstep-c91b6617-1f87-4eb0-9c2d-e158c33d22ad-b84506f1-1881-4b72-9130-976d8f9f4dc0",
		"45325d38-b4bd-4abf-bbac-e3412106c58d": "generated-edge-simstep-96875ef8-e9b3-4a79-bcf9-36d53942e9a8-45325d38-b4bd-4abf-bbac-e3412106c58d",
		"1f01c4c8-b7af-43de-b0b0-90fe2b54c7f4": "generated-edge-simstep-1c87e4cd-3060-479a-b444-c6231b81416a-1f01c4c8-b7af-43de-b0b0-90fe2b54c7f4",
		"24a46775-e82d-4010-a07a-ca429e687577": "src/gen",
		"4030d70f-0fed-4a0f-8778-d844f56b88f7": "src/nvim/api",
		"4926e922-21e0-43d4-99c5-888a53fd1496": "src/nvim/msgpack_rpc",
		"e70de9ac-eaa8-40f0-8d38-6b65bf87ec20": "src/nvim/lua",
		"1bc9a917-6299-4cd3-89c5-f72aba8a049b": "src/nvim/buffer_updates.c",
		"4b4eb64a-101c-4009-941e-c6f336d94ff0": "src/gen/gen_api_dispatch.lua",
		"6dc96ed4-5374-4d39-97e8-f84e6912f0c9": "src/nvim/api/vim.c",
		"770e342b-bb36-468b-b859-cbf415542d91": "src/nvim/api/buffer.c",
		"ffc21c72-aa11-4a85-829b-250f0719530b": "src/nvim/api/events.c",
		"043e230c-2dcd-42ad-be8f-d32dd9d140f0": "src/nvim/msgpack_rpc/channel.c",
		"2504cc8a-889d-4471-9d56-2b97a6275447": "src/nvim/lua/executor.c",
		"31e11097-71a3-4628-a17e-03bcd497f17a": "src/nvim/api/vim.c-simstep-e90fe967-7096-4e2a-a379-5da61500f5ad",
		"fff81b0f-701d-42b5-b480-35ba647a110b": "src/gen/gen_api_dispatch.lua-simstep-8ae7f84a-1a1b-4322-b57f-b46112a80606",
		"85a2b631-046a-4d2e-9688-b377359baf28": "src/nvim/lua/executor.c-simstep-b4ea1d34-c777-4eef-99a2-055ab46ebae3",
		"4fbea5b8-b765-4807-b632-8b786d0a0d70": "src/nvim/msgpack_rpc/channel.c-simstep-a1524e46-90af-42d0-932d-0409e297ac6a",
		"46f86789-0248-4b10-bead-693655638e6c": "src/nvim/api/buffer.c-simstep-0d69d455-ba83-4959-9cb2-45699a974fd0",
		"e426ac26-0c5f-452f-95ef-0bc4d3155e13": "src/nvim/buffer_updates.c-simstep-b658af9c-ebd9-494e-b291-212321993faa",
		"5dc1c1a8-b187-4f36-b145-1ff67f3f0491": "src/nvim/msgpack_rpc/channel.c-simstep-ca2f44d1-d6e3-466d-89eb-002ddce8c542",
		"482a08e2-311f-426b-966a-80fe2545beec": "src/nvim/api/events.c-simstep-b29b725a-05a6-4330-b933-4b5840467ce4",
		"c4370b54-f066-4dd4-b415-a34ea80dece1": "generated-edge-simstep-6edc8b6c-ad0d-4b49-9d4f-ff2a5541fc12-c4370b54-f066-4dd4-b415-a34ea80dece1",
		"18624e15-0ced-41b9-95df-80fc52ad2372": "generated-edge-simstep-25537fc1-ca1f-4165-ab60-a95291896749-18624e15-0ced-41b9-95df-80fc52ad2372",
		"b1fd5e98-d66d-4c75-9d33-f83579123e5f": "generated-edge-simstep-60ab6c21-5fbe-4b3f-827c-ba58ef4822a8-b1fd5e98-d66d-4c75-9d33-f83579123e5f",
		"bf182636-f4f4-4bfb-a7a4-554cc41c8581": "generated-edge-simstep-380198f0-45b1-4d1a-8c80-0009eebec9f3-bf182636-f4f4-4bfb-a7a4-554cc41c8581",
		"c04837e6-8337-4bea-8515-40e0a03f4142": "generated-edge-simstep-6d5e5c2b-9cfb-4004-b761-37a44ad6d3ba-c04837e6-8337-4bea-8515-40e0a03f4142",
		"a94f68c5-32d9-43da-905d-bc6447da521c": "generated-edge-simstep-adcaaaaa-777b-45f5-b480-33caf014d0cb-a94f68c5-32d9-43da-905d-bc6447da521c",
		"59aeeb9e-643a-4601-8a22-39c6e11be803": "generated-edge-simstep-bec04672-ed73-4355-b5f1-9d50d4645de4-59aeeb9e-643a-4601-8a22-39c6e11be803",
		"d70166f9-1da5-433d-884b-384ff4d58776": "src/nvim/drawscreen.c",
		"542a18b2-cf80-43f4-925a-89bb18c92962": "runtime/lua/vim/treesitter.lua",
		"803fa254-ad17-4d23-add4-b6ebfc965164": "runtime/lua/vim/treesitter",
		"cc9f7eb2-fe91-4acf-984b-22486f94d4f1": "runtime/lua/vim/treesitter/highlighter.lua",
		"7aa38225-a4b8-4f1d-9141-12e9852e4e34": "runtime/lua/vim/treesitter.lua-simstep-2ce887f3-1c98-4e7c-86ca-933fcc495bde",
		"93970937-dacb-4c62-9725-9ad01d11a22b": "runtime/lua/vim/treesitter.lua-simstep-b106e0a3-768d-4282-9ec6-deb881ed3a1f",
		"faf022ed-202f-4486-a745-9879dddddd64": "runtime/lua/vim/treesitter.lua-simstep-a3288e50-6bde-43b0-bc27-3c65c895f56b",
		"4557371b-3e9f-4a57-964a-a28fd8585a02": "runtime/lua/vim/treesitter/highlighter.lua-simstep-337810a2-50ef-4efc-b86b-493e5700c80f",
		"976474cd-262a-4313-a059-c0248bc26b98": "runtime/lua/vim/treesitter/highlighter.lua-simstep-7d7d67ad-119f-499e-9186-2a977659976b",
		"a743a49c-b55c-4563-ad38-b2b69b47642e": "src/nvim/drawscreen.c-simstep-34f99a2f-a13a-4e89-a5d8-c7e64326c236",
		"6b5b5667-53fe-46bd-a0c8-113bd6acf036": "generated-edge-simstep-5dba9709-8b53-4522-a226-1255977972e2-6b5b5667-53fe-46bd-a0c8-113bd6acf036",
		"c982b52f-3fbc-4b47-9bf1-7ca1b1bae9be": "generated-edge-simstep-530b9af3-8047-4f6c-91e5-701c96342342-c982b52f-3fbc-4b47-9bf1-7ca1b1bae9be",
		"e3d6dd51-b944-4735-8529-14e3983629fc": "generated-edge-simstep-e6ebf4a4-da88-40bf-b8de-f0c56ef6348e-e3d6dd51-b944-4735-8529-14e3983629fc",
		"88fd2a96-8449-40d8-a0d0-316a2165218a": "generated-edge-simstep-98d1a2a4-a75c-4e5e-b766-25dedda3d53b-88fd2a96-8449-40d8-a0d0-316a2165218a",
		"4cb73b91-a5c3-4c64-b0f0-fe8eba752b22": "generated-edge-simstep-bc86d8cf-ccf7-4600-a925-84771a4a0ee3-4cb73b91-a5c3-4c64-b0f0-fe8eba752b22",
		"8578861f-8170-4a8a-9974-0142b8687f15": "src/nvim/ui_client.c",
		"763b600d-b62e-4a11-b879-9e4529d1d127": "src/nvim/tui",
		"75816457-6537-45f4-9f6f-b99311adeb07": "src/nvim/api/ui.c",
		"1c885fa8-a209-4898-99d8-421d28e73253": "src/nvim/msgpack_rpc/unpacker.c",
		"acb15131-a0a0-4b55-8a5c-74da55812314": "src/nvim/tui/tui.c",
		"eb988e14-0f6e-4a6c-b3a0-20009c1358bb": "src/nvim/tui/input.c",
		"d2058d49-5713-40ad-aa79-7f0a87d825e7": "src/nvim/main.c-simstep-bd547437-aeee-4b1b-a24a-91af1ee23455",
		"739cc0c2-efa4-4397-b7a6-0cf371bac1a9": "src/nvim/ui_client.c-simstep-f51d4fdd-ccd9-485e-8d82-a073f5e2ee79",
		"064b054f-eb44-46f6-bb51-d2c517892272": "src/nvim/api/ui.c-simstep-af3845c8-ab94-4da5-b1e7-04372753c599",
		"637d4bcb-6409-494b-a9b0-57d561789aa6": "src/nvim/msgpack_rpc/unpacker.c-simstep-29d0f4f4-e4c6-4dba-b7d4-d1f45c37a1da",
		"3caca7f9-b3a0-40c6-b966-caf1225e1b63": "src/nvim/tui/tui.c-simstep-ceb51e25-a97d-4cd8-ab64-1a5c96cdf406",
		"80844e97-be3f-47e7-a830-5577cffe4fd8": "src/nvim/tui/input.c-simstep-e7e73eee-1300-4377-b62b-1c992d2960ec",
		"fe447fc0-f2c4-4a83-a198-c416b698f099": "src/nvim/normal.c-simstep-42cde6a0-47ec-4b89-9ec0-8d82e2532167",
		"7b1257bc-c084-4eec-8ca2-65ba9874666a": "generated-edge-simstep-4b389c9e-933e-44db-b5aa-f3f1148b3769-7b1257bc-c084-4eec-8ca2-65ba9874666a",
		"b2046855-5406-44fb-958e-a9e19d8e129a": "generated-edge-simstep-c358cd0e-60dc-40fe-9bac-f2e5d8400c03-b2046855-5406-44fb-958e-a9e19d8e129a",
		"ba8de695-e9cb-4c92-9a0b-fb69c242c2fc": "generated-edge-simstep-74a1c33c-43c0-448f-9906-3a4178dd3a31-ba8de695-e9cb-4c92-9a0b-fb69c242c2fc",
		"c5715033-dc43-4006-bd6d-9397f73c9bc8": "generated-edge-simstep-b3dd751d-c580-4842-97bd-9afa464993ee-c5715033-dc43-4006-bd6d-9397f73c9bc8",
		"72ec73c0-e19b-49c9-a503-7b578cdb2a39": "generated-edge-simstep-68c05877-afb1-4b3c-840b-8c92f51136ec-72ec73c0-e19b-49c9-a503-7b578cdb2a39",
		"ff4fa952-81de-48aa-abfa-7e50dd6a72da": "None",
		"167aa0f6-b357-4338-b535-12f91d334c0e": "src/nvim/ex_docmd.c",
		"8845d34c-e1ba-4e90-9d8f-e1390c8dc458": "src/nvim/terminal.c",
		"c00488d0-c1e1-43a1-b816-b3744ac83b9f": "src/nvim/vterm",
		"ec73ace7-c209-4021-ae84-1dd9665a81cf": "src/nvim/vterm/screen.c",
		"d0580ce7-c403-4e51-9297-4989adc23028": "src/nvim/vterm/keyboard.c",
		"66323267-7878-4c7d-a54e-faa10a9b9084": "src/nvim/ex_docmd.c-simstep-36e59f38-15cc-431c-8640-a92071154959",
		"f3d78296-92bc-4f34-b368-b8bae4d007b2": "src/nvim/terminal.c-simstep-82b5e0c0-1920-412d-beb0-b48d28562f8f",
		"1c36f471-98cb-4227-82e5-8c03c8ef4bd8": "src/nvim/terminal.c-simstep-287eeff7-3ed4-448f-8d07-0c2c6e67d5e5",
		"4b86a0d0-4891-412e-9225-fd7ad36c85e1": "src/nvim/terminal.c-simstep-42d54e9c-9ec8-4255-a575-4998f3ca24a1",
		"86594b87-1e11-4579-afc4-1ea1e00eb9a0": "src/nvim/vterm/keyboard.c-simstep-03602d2f-aa8f-4926-92fb-167fffd3ad26",
		"d13bafa9-23dd-461c-b089-beb67e67a085": "None-simstep-d2a22a49-5703-4f60-b612-15bd4cfb2dc0",
		"11236c9f-7d26-47af-bd4e-492373cf7248": "generated-edge-simstep-36f31f11-7759-4bf0-96c2-b375fa87b19b-11236c9f-7d26-47af-bd4e-492373cf7248",
		"200b032e-e435-4ef6-a2f2-bdc22f9e39f3": "generated-edge-simstep-60b5122a-a154-4ee4-a21c-4d48bcac2ff7-200b032e-e435-4ef6-a2f2-bdc22f9e39f3",
		"5cbbd26c-671e-4ee2-84a1-9896eebab5da": "generated-edge-simstep-f31d6198-2ea5-4353-81c4-3785742f5c64-5cbbd26c-671e-4ee2-84a1-9896eebab5da",
		"5097f44b-0d1a-4410-9299-eee71fa9f5fd": "generated-edge-simstep-5b7a2baf-9571-4221-9c9d-257245ca99fa-5097f44b-0d1a-4410-9299-eee71fa9f5fd",
		"75f4916a-1203-48f2-8979-315a523f1d20": "generated-edge-simstep-c0a71715-b4b1-489a-8307-38a04362ebe4-75f4916a-1203-48f2-8979-315a523f1d20",
		"de04d0f9-b63d-4791-a845-19c24d9fcf9b": "test/functional/core",
		"b4185b59-5067-4365-922a-5ad077381cd6": "src/nvim/eval.lua",
		"042d484f-3bcd-4f24-878d-22a640843dbf": "src/nvim/eval",
		"20fcfc79-9ca0-4d2e-b076-0fe710245289": "src/nvim/channel.c",
		"6bbecf0c-33f3-4e39-8222-2d1c0afce663": "test/functional/core/job_spec.lua",
		"d77ec535-eb4c-4752-a7f5-6e51b52f0e71": "src/nvim/eval/funcs.c",
		"47f9e9b7-d4b7-49f7-8157-a5ae44bbe279": "test/functional/core/job_spec.lua-simstep-eaaca010-42e5-4cce-aef6-fa32b3b82b6e",
		"e0741b89-dca2-427b-8632-74ddd0c749a9": "src/nvim/eval/funcs.c-simstep-aedec869-e86a-432a-bfd6-ace49b1a815e",
		"7931c951-7161-4ac6-9dca-153a999780ea": "src/nvim/channel.c-simstep-854ff8f5-8f8a-4698-9668-18eb81c62445",
		"ff421c80-1416-4bdf-8ab5-fb3bb3a21a1f": "src/nvim/channel.c-simstep-50982715-7e99-41eb-ad7a-444adf002b76",
		"52556006-bb10-4851-8d08-3f8bfcf9ecdb": "src/nvim/channel.c-simstep-8cb74844-a3b5-47ab-bf0b-70ac8cae0f2e",
		"b8e65988-6335-4647-b8fa-24d7ff9e16ff": "src/nvim/channel.c-simstep-8f80b898-11ed-4b06-ac47-1c81e36fd8e7",
		"dd67a7c9-97d7-45d2-8e8d-6dd1492aa6c9": "test/functional/core/job_spec.lua-simstep-e7b85c33-fd85-47cb-8ecb-a0d12c8f7a8e",
		"c48bd66b-41f7-4337-b9cf-b5f88da890d1": "generated-edge-simstep-103a1597-6de0-406e-96b9-9fca9a9c5115-c48bd66b-41f7-4337-b9cf-b5f88da890d1",
		"bf20c421-9fc3-49ce-9c99-2c60de4276de": "generated-edge-simstep-62e6b30c-49b3-419c-8deb-8aea8a8bc143-bf20c421-9fc3-49ce-9c99-2c60de4276de",
		"119b18a8-cd31-4000-802d-3e74a806de24": "generated-edge-simstep-6ba113f7-7e4f-405b-ade9-f411aa541633-119b18a8-cd31-4000-802d-3e74a806de24",
		"b3b70102-09b0-468f-b689-19b4430d8095": "generated-edge-simstep-c9cc507e-1487-433a-a333-1eb5675ea9c8-b3b70102-09b0-468f-b689-19b4430d8095",
		"fc039d57-f1ee-4b21-bf72-c349a5f09c05": "generated-edge-simstep-791f5139-40d2-4d59-941c-0bcdef01a513-fc039d57-f1ee-4b21-bf72-c349a5f09c05",
		"4831c9a5-b950-4eba-be29-d11fd0d886d1": "generated-edge-simstep-8b4a9eea-0998-4d38-b614-26dfed71dca7-4831c9a5-b950-4eba-be29-d11fd0d886d1",
		"5ed19d61-b36f-4e7e-92d4-44d9cff8557d": "src/nvim/ex_cmds.lua",
		"f9b33e30-d2b7-431f-bb0d-7c471ad2a424": "src/nvim/runtime.c",
		"12f119a2-b00d-4406-b448-72ee123e040a": "src/nvim/eval.c",
		"d796ed6c-23d7-4b7e-bda2-1b111eae56f0": "src/nvim/api/vimscript.c",
		"214dc308-877b-49e3-b633-c5cce30f8c77": "src/nvim/api/vimscript.c-simstep-1f86bd67-1f46-4692-a8a6-07d602732c45",
		"4d776b34-6826-44ed-89bb-850cb3a2b5b7": "src/nvim/ex_docmd.c-simstep-2457a8c1-7c83-4d28-9732-9a8321da9eca",
		"9c795b05-0144-41ba-acb2-be2f7205c35f": "src/nvim/runtime.c-simstep-a9c1483a-e524-4548-938f-1e858991fb17",
		"f0c576ca-6f38-4f81-b475-0afc425c8e55": "src/nvim/eval/funcs.c-simstep-87627dcb-783c-4f41-bb38-8de49d48016d",
		"79938310-92f3-492d-a5e5-eb0bc4d5741b": "src/nvim/eval.c-simstep-0712ca23-aeff-4f04-b68b-42a5bc59f0d7",
		"b45e90f1-db79-4bd1-a1a7-b256fdafde6d": "generated-edge-simstep-1486590b-d67c-407d-99d5-572f84a8be49-b45e90f1-db79-4bd1-a1a7-b256fdafde6d",
		"311fdd15-bcbd-4e83-a181-e46232837504": "generated-edge-simstep-84534a40-54c0-4e79-ab6c-99047722e648-311fdd15-bcbd-4e83-a181-e46232837504",
		"9f62d16b-da91-42ab-8ec0-ddb2ae29d8bc": "generated-edge-simstep-276c5788-3c39-4f4d-99ad-0dfa57c95e7b-9f62d16b-da91-42ab-8ec0-ddb2ae29d8bc",
		"2b165210-c766-43e8-8f7a-dffb18f42866": "generated-edge-simstep-4e920e03-135d-4e4f-a4e1-22c3e69ac694-2b165210-c766-43e8-8f7a-dffb18f42866",
		"c61bd152-dcea-427a-b0b9-0691812637d8": "src/nvim/window.c",
		"f429c250-0493-40e0-9440-54177c9eaf4c": "src/nvim/ex_docmd.c-simstep-09103307-3564-4428-88ea-68f85c5a11e7",
		"3ae7a6d9-1459-4042-9034-c90226a6240c": "src/nvim/window.c-simstep-ede6f7ce-ff71-4955-a1ee-759d468b14ba",
		"b6a93422-d237-4b2c-a516-66573c166c14": "src/nvim/window.c-simstep-93f995ef-1a38-48c1-96a1-08044a13ca4f",
		"3181d556-f0cf-4a23-be2d-37bcf7e696a2": "src/nvim/normal.c-simstep-fdfba2d4-9a1d-4d6d-8699-3368ea7f2ce1",
		"42890fde-b233-4d8a-8d22-466d3fb364b0": "src/nvim/window.c-simstep-f73213a7-afc2-436d-8760-49676497d7e0",
		"404214da-428b-49fb-83f8-d1e3a93fc15e": "src/nvim/window.c-simstep-9295a909-2af8-4f26-8a06-027a48c2764f",
		"992a8c59-0ac5-4caf-8281-b2350262c5dd": "src/nvim/window.c-simstep-53db624a-1c7f-490c-950f-7a6c769446c4",
		"7d80f3a4-fc27-4bf6-831f-251d437ae594": "src/nvim/window.c-simstep-012ef29c-1b5d-48c8-b22a-89b00092f74e",
		"9e0bf39e-f266-4d9a-9c03-0d22b7ce12fb": "generated-edge-simstep-a50368ba-3026-4949-9850-040fea7d5ea2-9e0bf39e-f266-4d9a-9c03-0d22b7ce12fb",
		"ead144be-ab0f-4248-ad7f-e5fb30eec014": "generated-edge-simstep-168b0668-7eb4-4476-9283-ff1ee1b503e5-ead144be-ab0f-4248-ad7f-e5fb30eec014",
		"4b443096-05fe-4898-9296-98eb5db2ae29": "generated-edge-simstep-9a41d88b-7b69-41fd-993a-1a519ef61c5e-4b443096-05fe-4898-9296-98eb5db2ae29",
		"50e97e8d-bb86-4a46-b410-42d0b2f46057": "generated-edge-simstep-fc05e133-dad0-4a77-ab39-c3552475cae4-50e97e8d-bb86-4a46-b410-42d0b2f46057",
		"13c0d90e-f6aa-4a24-bc82-47075b8c930c": "generated-edge-simstep-9b4aed79-8301-42c1-a047-e3c67385bda2-13c0d90e-f6aa-4a24-bc82-47075b8c930c",
		"4c9bbdcc-7533-41c0-b3b0-55ccef072e58": "src/nvim/shada.c",
		"740ed89d-5e3a-495f-9de6-ba4011e07460": "src/nvim/main.c-simstep-db84dff7-c246-409f-9d89-49b95e2ea413",
		"f96cb115-a054-4c97-8c4f-26c71ac71018": "src/nvim/shada.c-simstep-68470baa-c67e-427a-845b-0da191047596",
		"4d394212-6e1c-4cfb-b01a-edf7219aa619": "src/nvim/shada.c-simstep-c711debd-7b2b-4545-8e35-0ff796b2b17c",
		"00ea5702-7d96-4367-b992-361fb1209d10": "src/nvim/main.c-simstep-24440508-8c7b-4e59-a317-cd461ea1ef2e",
		"fb6bf2d4-5a8f-47df-b923-7a36870d3745": "src/nvim/main.c-simstep-c5571808-e2ec-47fc-a5de-9df864d59c28",
		"0c76e84d-8bce-42fb-8fe9-b7fcb367652c": "src/nvim/shada.c-simstep-4d4095e8-155c-485b-829e-3fee86027fcb",
		"bd389178-8e76-4b0c-8185-5d361c46f242": "src/nvim/shada.c-simstep-6d6d7f55-fb2e-4dbd-b996-bf17a8df685d",
		"0a55535d-59e2-4a2a-9a10-ed967406be4c": "src/nvim/main.c-simstep-4e39780d-ae85-48aa-b6a1-18c6ee1f1c42",
		"f0b0406b-2704-4638-a274-af3587bf8124": "generated-edge-simstep-a2e55f12-9ca4-4a8b-a997-3e38d1e89043-f0b0406b-2704-4638-a274-af3587bf8124",
		"c47938c7-97a4-4c2e-8f02-795503afdb74": "generated-edge-simstep-41dbb30b-51d1-4b5c-9722-89eba53b9085-c47938c7-97a4-4c2e-8f02-795503afdb74",
		"e0b2d40c-02cc-46ac-99ee-863d04cddf64": "generated-edge-simstep-95f365fa-0c74-4ce1-b3c1-7a52c1109915-e0b2d40c-02cc-46ac-99ee-863d04cddf64",
		"c14a0744-ebe3-4b4e-b700-651811c24bd5": "generated-edge-simstep-0deb9a60-984c-41f3-a543-da8b82f5d471-c14a0744-ebe3-4b4e-b700-651811c24bd5",
		"e42db962-cf80-495a-b05a-31ae87aeacd0": "generated-edge-simstep-c5d68fbd-e725-44d3-990a-c2860aa0017b-e42db962-cf80-495a-b05a-31ae87aeacd0",
		"0d99bf65-8e28-4184-96a7-ef5670aa76b3": "generated-edge-simstep-de56f49b-be1d-40e0-84b9-dc5e0393ef63-0d99bf65-8e28-4184-96a7-ef5670aa76b3"
	}
}