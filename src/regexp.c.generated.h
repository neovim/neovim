static char_u *reg_getline_submatch(linenr_T lnum);
static int vim_regsub_both(char_u *source, char_u *dest, int copy,
                           int magic,
                           int backslash);
static fptr_T do_Lower(int *, int);
static fptr_T do_lower(int *, int);
static fptr_T do_Upper(int *, int);
static fptr_T do_upper(int *, int);
static void mb_decompose(int c, int *c1, int *c2, int *c3);
static int reg_match_visual(void);
static int reg_prev_class(void);
static reg_extmatch_T *make_extmatch(void);
static long bt_regexec_multi(regmmatch_T *rmp, win_T *win, buf_T *buf,
                             linenr_T lnum, colnr_T col,
                             proftime_T *tm);
static void regstack_pop(char_u **scan);
static regitem_T *regstack_push(regstate_T state, char_u *scan);
static int regrepeat(char_u *p, long maxcount);
static int regmatch(char_u *prog);
static int match_with_backref(linenr_T start_lnum, colnr_T start_col,
                              linenr_T end_lnum, colnr_T end_col,
                              int *bytelen);
static int re_num_cmp(long_u val, char_u *scan);
static void save_se_one(save_se_T *savep, char_u **pp);
static void save_se_multi(save_se_T *savep, lpos_T *posp);
static int reg_save_equal(regsave_T *save);
static void reg_restore(regsave_T *save, garray_T *gap);
static void reg_save(regsave_T *save, garray_T *gap);
static void reg_nextline(void);
static void restore_subexpr(regbehind_T *bp);
static void save_subexpr(regbehind_T *bp);
static void cleanup_zsubexpr(void);
static void cleanup_subexpr(void);
static long regtry(bt_regprog_T *prog, colnr_T col);
static long bt_regexec_both(char_u *line, colnr_T col, proftime_T *tm);
static char_u   *reg_getline(linenr_T lnum);
static void bt_regfree(regprog_T *prog);
static regprog_T  *bt_regcomp(char_u *expr, int re_flags);
static void get_cpo_flags(void);
static void regoptail(char_u *, char_u *);
static void regtail(char_u *, char_u *);
static int read_limits(long *, long *);
static char_u   *re_put_long(char_u *pr, long_u val);
static void reginsert_limits(int, long, long, char_u *);
static void reginsert_nr(int op, long val, char_u *opnd);
static void reginsert(int, char_u *);
static void regmbc(int c);
static void regc(int b);
static char_u   *regnext(char_u *);
static int prog_magic_wrong(void);
static int use_multibytecode(int c);
static char_u   *regnode(int);
static char_u   *regatom(int *);
static char_u   *regpiece(int *);
static char_u   *regconcat(int *flagp);
static char_u   *regbranch(int *flagp);
static char_u   *reg(int, int *);
static void regcomp_start(char_u *expr, int flags);
static int coll_get_char(void);
static int getdecchrs(void);
static int getoctchrs(void);
static int gethexchrs(int maxinputlen);
static void ungetchr(void);
static void skipchr(void);
static int peekchr(void);
static void skipchr_keepstart(void);
static int getchr(void);
static void restore_parse_state(parse_state_T *ps);
static void save_parse_state(parse_state_T *ps);
static void initchr(char_u *);
static void init_class_tab(void);
static char_u   *skip_anyof(char_u *p);
static int get_coll_element(char_u **pp);
static void reg_equi_class(int c);
static int get_equi_class(char_u **pp);
static int get_char_class(char_u **pp);
static int backslash_trans(int c);
static char_u *cstrchr(char_u *, int);
static int cstrncmp(char_u *s1, char_u *s2, int *n);
static int re_multi_type(int);
static int toggle_Magic(int x);
static int no_Magic(int x);
static int bt_regexec_nl(regmatch_T *rmp, char_u *line, colnr_T col, bool line_lbr);
