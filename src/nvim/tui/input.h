#ifndef NVIM_TUI_INPUT_H
#define NVIM_TUI_INPUT_H

#include <stdbool.h>
#include <termkey.h>

#include "nvim/event/stream.h"
#include "nvim/event/time.h"

typedef struct term_input {
  int in_fd;
  // Phases: -1=all 0=disabled 1=first-chunk 2=continue 3=last-chunk
  int8_t paste;
  bool waiting;
  bool ttimeout;
  int8_t waiting_for_bg_response;
  long ttimeoutlen;
  TermKey *tk;
#if TERMKEY_VERSION_MAJOR > 0 || TERMKEY_VERSION_MINOR > 18
  TermKey_Terminfo_Getstr_Hook *tk_ti_hook_fn;  ///< libtermkey terminfo hook
#endif
  TimeWatcher timer_handle;
  Loop *loop;
  Stream read_stream;
  RBuffer *key_buffer;
  uv_mutex_t key_buffer_mutex;
  uv_cond_t key_buffer_cond;
} TermInput;

typedef enum {
  KITTY_MOD_NONE   = 0x00,
  KITTY_MOD_SHIFT  = 0x01,
  KITTY_MOD_ALT    = 0x02,
  KITTY_MOD_CTRL   = 0x04,
  KITTY_MOD_SUPER  = 0x08,
  KITTY_MOD_HYPER  = 0x10,
  KITTY_MOD_META   = 0x20,
  KITTY_MOD_CAPS   = 0x40,
  KITTY_MOD_NUM    = 0x80,
} KittyModefier;

typedef enum {
  KITTY_KEY_ESC                  = 57344,
  KITTY_KEY_CAR                  = 57345,
  KITTY_KEY_TAB                  = 57346,
  KITTY_KEY_BS                   = 57347,
  KITTY_KEY_INS                  = 57348,
  KITTY_KEY_DEL                  = 57349,
  KITTY_KEY_LEFT                 = 57350,
  KITTY_KEY_RIGHT                = 57351,
  KITTY_KEY_UP                   = 57352,
  KITTY_KEY_DOWN                 = 57353,
  KITTY_KEY_PAGEUP               = 57354,
  KITTY_KEY_PAGEDOWN             = 57355,
  KITTY_KEY_HOME                 = 57356,
  KITTY_KEY_END                  = 57357,
  KITTY_KEY_CAPS_LOCK            = 57358,
  KITTY_KEY_SCROLL_LOCK          = 57359,
  KITTY_KEY_NUM_LOCK             = 57360,
  KITTY_KEY_PRINT_SCREEN         = 57361,
  KITTY_KEY_PAUSE                = 57362,
  KITTY_KEY_MENU                 = 57363,
  KITTY_KEY_F1                   = 57364,
  KITTY_KEY_F2                   = 57365,
  KITTY_KEY_F3                   = 57366,
  KITTY_KEY_F4                   = 57367,
  KITTY_KEY_F5                   = 57368,
  KITTY_KEY_F6                   = 57369,
  KITTY_KEY_F7                   = 57370,
  KITTY_KEY_F8                   = 57371,
  KITTY_KEY_F9                   = 57372,
  KITTY_KEY_F10                  = 57373,
  KITTY_KEY_F11                  = 57374,
  KITTY_KEY_F12                  = 57375,
  KITTY_KEY_F13                  = 57376,
  KITTY_KEY_F14                  = 57377,
  KITTY_KEY_F15                  = 57378,
  KITTY_KEY_F16                  = 57379,
  KITTY_KEY_F17                  = 57380,
  KITTY_KEY_F18                  = 57381,
  KITTY_KEY_F19                  = 57382,
  KITTY_KEY_F20                  = 57383,
  KITTY_KEY_F21                  = 57384,
  KITTY_KEY_F22                  = 57385,
  KITTY_KEY_F23                  = 57386,
  KITTY_KEY_F24                  = 57387,
  KITTY_KEY_F25                  = 57388,
  KITTY_KEY_F26                  = 57389,
  KITTY_KEY_F27                  = 57390,
  KITTY_KEY_F28                  = 57391,
  KITTY_KEY_F29                  = 57392,
  KITTY_KEY_F30                  = 57393,
  KITTY_KEY_F31                  = 57394,
  KITTY_KEY_F32                  = 57395,
  KITTY_KEY_F33                  = 57396,
  KITTY_KEY_F34                  = 57397,
  KITTY_KEY_F35                  = 57398,
  KITTY_KEY_K0                   = 57399,
  KITTY_KEY_K1                   = 57400,
  KITTY_KEY_K2                   = 57401,
  KITTY_KEY_K3                   = 57402,
  KITTY_KEY_K4                   = 57403,
  KITTY_KEY_K5                   = 57404,
  KITTY_KEY_K6                   = 57405,
  KITTY_KEY_K7                   = 57406,
  KITTY_KEY_K8                   = 57407,
  KITTY_KEY_K9                   = 57408,
  KITTY_KEY_KP_DECIMAL           = 57409,
  KITTY_KEY_KDIVIDE              = 57410,
  KITTY_KEY_KMULTIPLY            = 57411,
  KITTY_KEY_KMINUS               = 57412,
  KITTY_KEY_KPLUS                = 57413,
  KITTY_KEY_KENTER               = 57414,
  KITTY_KEY_KEQUAL               = 57415,
  KITTY_KEY_KP_SEPARATOR         = 57416,
  KITTY_KEY_KP_LEFT              = 57417,
  KITTY_KEY_KP_RIGHT             = 57418,
  KITTY_KEY_KP_UP                = 57419,
  KITTY_KEY_KP_DOWN              = 57420,
  KITTY_KEY_KPAGEUP              = 57421,
  KITTY_KEY_KPAGEDOWN            = 57422,
  KITTY_KEY_KHOME                = 57423,
  KITTY_KEY_KEND                 = 57424,
  KITTY_KEY_KINS                 = 57425,
  KITTY_KEY_KP_DELETE            = 57426,
  KITTY_KEY_KP_BEGIN             = 57427,
  KITTY_KEY_MEDIA_PLAY           = 57428,
  KITTY_KEY_MEDIA_PAUSE          = 57429,
  KITTY_KEY_MEDIA_PLAY_PAUSE     = 57430,
  KITTY_KEY_MEDIA_REVERSE        = 57431,
  KITTY_KEY_MEDIA_STOP           = 57432,
  KITTY_KEY_MEDIA_FAST_FORWARD   = 57433,
  KITTY_KEY_MEDIA_REWIND         = 57434,
  KITTY_KEY_MEDIA_TRACK_NEXT     = 57435,
  KITTY_KEY_MEDIA_TRACK_PREVIOUS = 57436,
  KITTY_KEY_MEDIA_RECORD         = 57437,
  KITTY_KEY_LOWER_VOLUME         = 57438,
  KITTY_KEY_RAISE_VOLUME         = 57439,
  KITTY_KEY_MUTE_VOLUME          = 57440,
  KITTY_KEY_LEFT_SHIFT           = 57441,
  KITTY_KEY_LEFT_CONTROL         = 57442,
  KITTY_KEY_LEFT_ALT             = 57443,
  KITTY_KEY_LEFT_SUPER           = 57444,
  KITTY_KEY_LEFT_HYPER           = 57445,
  KITTY_KEY_LEFT_META            = 57446,
  KITTY_KEY_RIGHT_SHIFT          = 57447,
  KITTY_KEY_RIGHT_CONTROL        = 57448,
  KITTY_KEY_RIGHT_ALT            = 57449,
  KITTY_KEY_RIGHT_SUPER          = 57450,
  KITTY_KEY_RIGHT_HYPER          = 57451,
  KITTY_KEY_RIGHT_META           = 57452,
  KITTY_KEY_ISO_LEVEL3_SHIFT     = 57453,
  KITTY_KEY_ISO_LEVEL5_SHIFT     = 57454,
} KittyKey;

static const struct kitty_key_map_entry {
  KittyKey key;
  const char *name;
} kitty_key_map_entry[] = {
  { KITTY_KEY_ESC,                 "Esc"  },
  { KITTY_KEY_CAR,                 "Enter"  },
  { KITTY_KEY_TAB,                 "Tab"  },
  { KITTY_KEY_BS,                  "BS"  },
  { KITTY_KEY_INS,                 "Ins"  },
  { KITTY_KEY_DEL,                 "Del"  },
  { KITTY_KEY_LEFT,                "Left"  },
  { KITTY_KEY_RIGHT,               "Right"  },
  { KITTY_KEY_UP,                  "Up"  },
  { KITTY_KEY_DOWN,                "Down"  },
  { KITTY_KEY_PAGEUP,              "Pageup"  },
  { KITTY_KEY_PAGEDOWN,            "Pagedown"  },
  { KITTY_KEY_HOME,                "Home"  },
  { KITTY_KEY_END,                 "End"  },
  // { KITTY_KEY_NUM_LOCK,            "NumLock"  },
  { KITTY_KEY_PRINT_SCREEN,        "Print"  },
  // { KITTY_KEY_PAUSE,               "Pause"  },
  // { KITTY_KEY_MENU,                "Menu"  },
  { KITTY_KEY_F1,                  "F1"  },
  { KITTY_KEY_F2,                  "F2"  },
  { KITTY_KEY_F3,                  "F3"  },
  { KITTY_KEY_F4,                  "F4"  },
  { KITTY_KEY_F5,                  "F5"  },
  { KITTY_KEY_F6,                  "F6"  },
  { KITTY_KEY_F7,                  "F7"  },
  { KITTY_KEY_F8,                  "F8"  },
  { KITTY_KEY_F9,                  "F9"  },
  { KITTY_KEY_F10,                 "F10"  },
  { KITTY_KEY_F11,                 "F11"  },
  { KITTY_KEY_F12,                 "F12"  },
  { KITTY_KEY_F13,                 "F13"  },
  { KITTY_KEY_F14,                 "F14"  },
  { KITTY_KEY_F15,                 "F15"  },
  { KITTY_KEY_F16,                 "F16"  },
  { KITTY_KEY_F17,                 "F17"  },
  { KITTY_KEY_F18,                 "F18"  },
  { KITTY_KEY_F19,                 "F19"  },
  { KITTY_KEY_F20,                 "F20"  },
  { KITTY_KEY_F21,                 "F21"  },
  { KITTY_KEY_F22,                 "F22"  },
  { KITTY_KEY_F23,                 "F23"  },
  { KITTY_KEY_F24,                 "F24"  },
  { KITTY_KEY_F25,                 "F25"  },
  { KITTY_KEY_F26,                 "F26"  },
  { KITTY_KEY_F27,                 "F27"  },
  { KITTY_KEY_F28,                 "F28"  },
  { KITTY_KEY_F29,                 "F29"  },
  { KITTY_KEY_F30,                 "F30"  },
  { KITTY_KEY_F31,                 "F31"  },
  { KITTY_KEY_F32,                 "F32"  },
  { KITTY_KEY_F33,                 "F33"  },
  { KITTY_KEY_F34,                 "F34"  },
  { KITTY_KEY_F35,                 "F35"  },
  { KITTY_KEY_K0,                  "K0"  },
  { KITTY_KEY_K1,                  "K1"  },
  { KITTY_KEY_K2,                  "K2"  },
  { KITTY_KEY_K3,                  "K3"  },
  { KITTY_KEY_K4,                  "K4"  },
  { KITTY_KEY_K5,                  "K5"  },
  { KITTY_KEY_K6,                  "K6"  },
  { KITTY_KEY_K7,                  "K7"  },
  { KITTY_KEY_K8,                  "K8"  },
  { KITTY_KEY_K9,                  "K9"  },
  { KITTY_KEY_KP_DECIMAL,          "kDecimal"  },
  { KITTY_KEY_KDIVIDE,             "kDivide"  },
  { KITTY_KEY_KMULTIPLY,           "kMultiply"  },
  { KITTY_KEY_KMINUS,              "kMinus"  },
  { KITTY_KEY_KPLUS,               "kPlus"  },
  { KITTY_KEY_KENTER,              "kEnter"  },
  { KITTY_KEY_KEQUAL,              "kEqual"  },
  { KITTY_KEY_KP_SEPARATOR,        "kSeparator"  },
  { KITTY_KEY_KP_LEFT,             "kLeft"  },
  { KITTY_KEY_KP_RIGHT,            "kRight"  },
  { KITTY_KEY_KP_UP,               "kUp"  },
  { KITTY_KEY_KP_DOWN,             "kDown"  },
  { KITTY_KEY_KPAGEUP,             "kPageup"  },
  { KITTY_KEY_KPAGEDOWN,           "kPagedown"  },
  { KITTY_KEY_KHOME,               "kHome"  },
  { KITTY_KEY_KEND,                "kEnd"  },
  { KITTY_KEY_KINS,                "kInsert"  },
  { KITTY_KEY_KP_DELETE,           "kDel"  },
  // { KITTY_KEY_KP_BEGIN,            "kBegin"  },
  { KITTY_KEY_MEDIA_PLAY,          "Play"  },
  // { KITTY_KEY_MEDIA_PAUSE,         "PAUSE"  },
  // { KITTY_KEY_MEDIA_PLAY_PAUSE,    "PAUSE"  },
  // { KITTY_KEY_MEDIA_REVERSE,       "REVERSE"  },
  // { KITTY_KEY_MEDIA_STOP,          "STOP"  },
  // { KITTY_KEY_MEDIA_FAST_FORWARD,  "FORWARD"  },
  // { KITTY_KEY_MEDIA_REWIND,        "REWIND"  },
  // { KITTY_KEY_MEDIA_TRACK_NEXT,    "NEXT"  },
  // { KITTY_KEY_MEDIA_TRACK_PREVIOUS,"PREVIOUS" },
  // { KITTY_KEY_MEDIA_RECORD,        "RECORD"  },
  // { KITTY_KEY_LOWER_VOLUME,        "VOLUME"  },
  // { KITTY_KEY_RAISE_VOLUME,        "VOLUME"  },
  // { KITTY_KEY_MUTE_VOLUME,         "VOLUME"  },
  // { KITTY_KEY_LEFT_SHIFT,          "SHIFT"  },
  // { KITTY_KEY_LEFT_CONTROL,        "CONTROL"  },
  // { KITTY_KEY_LEFT_ALT,            "ALT"  },
  // { KITTY_KEY_LEFT_SUPER,          "SUPER"  },
  // { KITTY_KEY_LEFT_HYPER,          "HYPER"  },
  // { KITTY_KEY_LEFT_META,           "META"  },
  // { KITTY_KEY_RIGHT_SHIFT,         "SHIFT"  },
  // { KITTY_KEY_RIGHT_CONTROL,       "CONTROL"  },
  // { KITTY_KEY_RIGHT_ALT,           "ALT"  },
  // { KITTY_KEY_RIGHT_SUPER,         "SUPER"  },
  // { KITTY_KEY_RIGHT_HYPER,         "HYPER"  },
  // { KITTY_KEY_RIGHT_META,          "META"  },
  // { KITTY_KEY_ISO_LEVEL3_SHIFT,    "SHIFT"  },
  // { KITTY_KEY_ISO_LEVEL5_SHIFT,    "SHIFT"  },
};

#ifdef INCLUDE_GENERATED_DECLARATIONS
# include "tui/input.h.generated.h"
#endif

#ifdef UNIT_TESTING
typedef enum {
  kIncomplete = -1,
  kNotApplicable = 0,
  kComplete = 1,
} HandleState;

HandleState ut_handle_background_color(TermInput *input);
#endif

#endif  // NVIM_TUI_INPUT_H
