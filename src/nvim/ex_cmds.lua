local bit = require 'bit'

local module = {}

-- Description of the values below is contained in ex_cmds_defs.h file.
-- "EX_" prefix is omitted.
local RANGE = 0x001
local BANG = 0x002
local EXTRA = 0x004
local XFILE = 0x008
local NOSPC = 0x010
local DFLALL = 0x020
local WHOLEFOLD = 0x040
local NEEDARG = 0x080
local TRLBAR = 0x100
local REGSTR = 0x200
local COUNT = 0x400
local NOTRLCOM = 0x800
local ZEROR = 0x1000
local CTRLV = 0x2000
local CMDARG = 0x4000
local BUFNAME = 0x8000
local BUFUNL = 0x10000
local ARGOPT = 0x20000
local SBOXOK = 0x40000
local CMDWIN = 0x80000
local MODIFY = 0x100000
local FLAGS = 0x200000
local LOCK_OK = 0x1000000
local PREVIEW = 0x8000000
local FILES = bit.bor(XFILE, EXTRA)
local WORD1 = bit.bor(EXTRA, NOSPC)
local FILE1 = bit.bor(FILES, NOSPC)

module.flags = {
  RANGE = RANGE,
  DFLALL = DFLALL,
  PREVIEW = PREVIEW,
}

--- See `src/nvim/ex_cmds_defs.h` for the meaning of each field
--- @class vim.ExCmd
--- @field command string name of Ex command, e.g., 'edit'
--- @field short_command string shorter name without the optional part, e.g., 'e' for :e[dit].
--- @field desc string a brief description, see |ex-cmd-index|
--- @field enum? string
--- @field flags integer
--- @field addr_type string
--- @field func string
--- @field removed? boolean deprecated or removed in neovim, should not appear in the docs

-- The following table is described in ex_cmds_defs.h file.
--- @type vim.ExCmd[]
module.cmds = {
  {
    command = 'append',
    short_command = 'a',
    desc = [[append text]],
    flags = bit.bor(BANG, RANGE, ZEROR, TRLBAR, CMDWIN, LOCK_OK, MODIFY),
    addr_type = 'ADDR_LINES',
    func = 'ex_append',
  },
  {
    command = 'abbreviate',
    short_command = 'ab',
    desc = [[enter abbreviation]],
    flags = bit.bor(EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_abbreviate',
  },
  {
    command = 'abclear',
    short_command = 'abc',
    desc = [[remove all abbreviations]],
    flags = bit.bor(EXTRA, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_abclear',
  },
  {
    command = 'aboveleft',
    short_command = 'abo',
    desc = [[make split window appear left or above]],
    flags = bit.bor(NEEDARG, EXTRA, NOTRLCOM),
    addr_type = 'ADDR_NONE',
    func = 'ex_wrongmodifier',
  },
  {
    command = 'all',
    short_command = 'al',
    desc = [[open a window for each file in the argument list]],
    flags = bit.bor(BANG, RANGE, COUNT, TRLBAR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_all',
  },
  {
    command = 'amenu',
    short_command = 'am',
    desc = [[enter new menu item for all modes]],
    flags = bit.bor(RANGE, ZEROR, EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_OTHER',
    func = 'ex_menu',
  },
  {
    command = 'anoremenu',
    short_command = 'an',
    desc = [[enter a new menu for all modes that will not be remapped]],
    flags = bit.bor(RANGE, ZEROR, EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_OTHER',
    func = 'ex_menu',
  },
  {
    command = 'args',
    short_command = 'ar',
    desc = [[print the argument list]],
    flags = bit.bor(BANG, FILES, CMDARG, ARGOPT, TRLBAR),
    addr_type = 'ADDR_NONE',
    func = 'ex_args',
  },
  {
    command = 'argadd',
    short_command = 'arga',
    desc = [[add items to the argument list]],
    flags = bit.bor(BANG, RANGE, ZEROR, FILES, TRLBAR),
    addr_type = 'ADDR_ARGUMENTS',
    func = 'ex_argadd',
  },
  {
    command = 'argdelete',
    short_command = 'argd',
    desc = [[delete items from the argument list]],
    flags = bit.bor(BANG, RANGE, FILES, TRLBAR),
    addr_type = 'ADDR_ARGUMENTS',
    func = 'ex_argdelete',
  },
  {
    command = 'argdo',
    short_command = 'argdo',
    desc = [[do a command on all items in the argument list]],
    flags = bit.bor(BANG, NEEDARG, EXTRA, NOTRLCOM, RANGE, DFLALL),
    addr_type = 'ADDR_ARGUMENTS',
    func = 'ex_listdo',
  },
  {
    command = 'argdedupe',
    short_command = 'argded',
    desc = [[remove duplicates from the argument list]],
    flags = TRLBAR,
    addr_type = 'ADDR_NONE',
    func = 'ex_argdedupe',
  },
  {
    command = 'argedit',
    short_command = 'arge',
    desc = [[add item to the argument list and edit it]],
    flags = bit.bor(BANG, NEEDARG, RANGE, ZEROR, FILES, CMDARG, ARGOPT, TRLBAR),
    addr_type = 'ADDR_ARGUMENTS',
    func = 'ex_argedit',
  },
  {
    command = 'argglobal',
    short_command = 'argg',
    desc = [[define the global argument list]],
    flags = bit.bor(BANG, FILES, CMDARG, ARGOPT, TRLBAR),
    addr_type = 'ADDR_NONE',
    func = 'ex_args',
  },
  {
    command = 'arglocal',
    short_command = 'argl',
    desc = [[define a local argument list]],
    flags = bit.bor(BANG, FILES, CMDARG, ARGOPT, TRLBAR),
    addr_type = 'ADDR_NONE',
    func = 'ex_args',
  },
  {
    command = 'argument',
    short_command = 'argu',
    desc = [[go to specific file in the argument list]],
    flags = bit.bor(BANG, RANGE, COUNT, EXTRA, CMDARG, ARGOPT, TRLBAR),
    addr_type = 'ADDR_ARGUMENTS',
    func = 'ex_argument',
  },
  {
    command = 'ascii',
    short_command = 'as',
    desc = [[print ascii value of character under the cursor]],
    flags = bit.bor(TRLBAR, SBOXOK, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'do_ascii',
  },
  {
    command = 'autocmd',
    short_command = 'au',
    desc = [[enter or show autocommands]],
    flags = bit.bor(BANG, EXTRA, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_autocmd',
  },
  {
    command = 'augroup',
    short_command = 'aug',
    desc = [[select the autocommand group to use]],
    flags = bit.bor(BANG, WORD1, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_autocmd',
  },
  {
    command = 'aunmenu',
    short_command = 'aun',
    desc = [[remove menu for all modes]],
    flags = bit.bor(EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_menu',
  },
  {
    command = 'buffer',
    short_command = 'b',
    desc = [[go to specific buffer in the buffer list]],
    flags = bit.bor(BANG, RANGE, BUFNAME, BUFUNL, COUNT, EXTRA, CMDARG, TRLBAR),
    addr_type = 'ADDR_BUFFERS',
    func = 'ex_buffer',
  },
  {
    command = 'bNext',
    short_command = 'bN',
    desc = [[go to previous buffer in the buffer list]],
    flags = bit.bor(BANG, RANGE, COUNT, CMDARG, TRLBAR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_bprevious',
  },
  {
    command = 'ball',
    short_command = 'ba',
    desc = [[open a window for each buffer in the buffer list]],
    flags = bit.bor(RANGE, COUNT, TRLBAR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_buffer_all',
  },
  {
    command = 'badd',
    short_command = 'bad',
    desc = [[add buffer to the buffer list]],
    flags = bit.bor(NEEDARG, FILE1, CMDARG, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_edit',
  },
  {
    command = 'balt',
    short_command = 'balt',
    desc = [[like ":badd" but also set the alternate file]],
    flags = bit.bor(NEEDARG, FILE1, CMDARG, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_edit',
  },
  {
    command = 'bdelete',
    short_command = 'bd',
    desc = [[remove a buffer from the buffer list]],
    flags = bit.bor(BANG, RANGE, BUFNAME, COUNT, EXTRA, TRLBAR),
    addr_type = 'ADDR_BUFFERS',
    func = 'ex_bunload',
  },
  {
    command = 'belowright',
    short_command = 'bel',
    desc = [[make split window appear right or below]],
    flags = bit.bor(NEEDARG, EXTRA, NOTRLCOM),
    addr_type = 'ADDR_NONE',
    func = 'ex_wrongmodifier',
  },
  {
    command = 'bfirst',
    short_command = 'bf',
    desc = [[go to first buffer in the buffer list]],
    flags = bit.bor(BANG, RANGE, CMDARG, TRLBAR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_brewind',
  },
  {
    command = 'blast',
    short_command = 'bl',
    desc = [[go to last buffer in the buffer list]],
    flags = bit.bor(BANG, RANGE, CMDARG, TRLBAR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_blast',
  },
  {
    command = 'bmodified',
    short_command = 'bm',
    desc = [[go to next buffer in the buffer list that has been modified]],
    flags = bit.bor(BANG, RANGE, COUNT, CMDARG, TRLBAR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_bmodified',
  },
  {
    command = 'bnext',
    short_command = 'bn',
    desc = [[go to next buffer in the buffer list]],
    flags = bit.bor(BANG, RANGE, COUNT, CMDARG, TRLBAR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_bnext',
  },
  {
    command = 'botright',
    short_command = 'bo',
    desc = [[make split window appear at bottom or far right]],
    flags = bit.bor(NEEDARG, EXTRA, NOTRLCOM),
    addr_type = 'ADDR_NONE',
    func = 'ex_wrongmodifier',
  },
  {
    command = 'bprevious',
    short_command = 'bp',
    desc = [[go to previous buffer in the buffer list]],
    flags = bit.bor(BANG, RANGE, COUNT, CMDARG, TRLBAR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_bprevious',
  },
  {
    command = 'brewind',
    short_command = 'br',
    desc = [[go to first buffer in the buffer list]],
    flags = bit.bor(BANG, RANGE, CMDARG, TRLBAR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_brewind',
  },
  {
    command = 'break',
    short_command = 'brea',
    desc = [[break out of while loop]],
    flags = bit.bor(TRLBAR, SBOXOK, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_break',
  },
  {
    command = 'breakadd',
    short_command = 'breaka',
    desc = [[add a debugger breakpoint]],
    flags = bit.bor(EXTRA, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_breakadd',
  },
  {
    command = 'breakdel',
    short_command = 'breakd',
    desc = [[delete a debugger breakpoint]],
    flags = bit.bor(EXTRA, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_breakdel',
  },
  {
    command = 'breaklist',
    short_command = 'breakl',
    desc = [[list debugger breakpoints]],
    flags = bit.bor(EXTRA, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_breaklist',
  },
  {
    command = 'browse',
    short_command = 'bro',
    desc = [[use file selection dialog]],
    flags = bit.bor(NEEDARG, EXTRA, NOTRLCOM, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_wrongmodifier',
  },
  {
    command = 'buffers',
    short_command = 'buffers',
    desc = [[list all files in the buffer list]],
    flags = bit.bor(BANG, EXTRA, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'buflist_list',
  },
  {
    command = 'bufdo',
    short_command = 'bufdo',
    desc = [[execute command in each listed buffer]],
    flags = bit.bor(BANG, NEEDARG, EXTRA, NOTRLCOM, RANGE, DFLALL),
    addr_type = 'ADDR_BUFFERS',
    func = 'ex_listdo',
  },
  {
    command = 'bunload',
    short_command = 'bun',
    desc = [[unload a specific buffer]],
    flags = bit.bor(BANG, RANGE, BUFNAME, COUNT, EXTRA, TRLBAR),
    addr_type = 'ADDR_LOADED_BUFFERS',
    func = 'ex_bunload',
  },
  {
    command = 'bwipeout',
    short_command = 'bw',
    desc = [[really delete a buffer]],
    flags = bit.bor(BANG, RANGE, BUFNAME, BUFUNL, COUNT, EXTRA, TRLBAR),
    addr_type = 'ADDR_BUFFERS',
    func = 'ex_bunload',
  },
  {
    command = 'change',
    short_command = 'c',
    desc = [[replace a line or series of lines]],
    flags = bit.bor(BANG, WHOLEFOLD, RANGE, COUNT, TRLBAR, CMDWIN, LOCK_OK, MODIFY),
    addr_type = 'ADDR_LINES',
    func = 'ex_change',
  },
  {
    command = 'cNext',
    short_command = 'cN',
    desc = [[go to previous error]],
    flags = bit.bor(RANGE, COUNT, TRLBAR, BANG),
    addr_type = 'ADDR_UNSIGNED',
    func = 'ex_cnext',
  },
  {
    command = 'cNfile',
    short_command = 'cNf',
    desc = [[go to last error in previous file]],
    flags = bit.bor(RANGE, COUNT, TRLBAR, BANG),
    addr_type = 'ADDR_UNSIGNED',
    func = 'ex_cnext',
  },
  {
    command = 'cabbrev',
    short_command = 'ca',
    desc = [[like ":abbreviate" but for Command-line mode]],
    flags = bit.bor(EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_abbreviate',
  },
  {
    command = 'cabclear',
    short_command = 'cabc',
    desc = [[clear all abbreviations for Command-line mode]],
    flags = bit.bor(EXTRA, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_abclear',
  },
  {
    command = 'cabove',
    short_command = 'cabo',
    desc = [[go to error above current line]],
    flags = bit.bor(RANGE, COUNT, TRLBAR),
    addr_type = 'ADDR_UNSIGNED',
    func = 'ex_cbelow',
  },
  {
    command = 'caddbuffer',
    short_command = 'cad',
    desc = [[add errors from buffer]],
    flags = bit.bor(RANGE, WORD1, TRLBAR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_cbuffer',
  },
  {
    command = 'caddexpr',
    short_command = 'cadde',
    desc = [[add errors from expr]],
    flags = bit.bor(NEEDARG, WORD1, NOTRLCOM),
    addr_type = 'ADDR_NONE',
    func = 'ex_cexpr',
  },
  {
    command = 'caddfile',
    short_command = 'caddf',
    desc = [[add error message to current quickfix list]],
    flags = bit.bor(TRLBAR, FILE1),
    addr_type = 'ADDR_NONE',
    func = 'ex_cfile',
  },
  {
    command = 'cafter',
    short_command = 'caf',
    desc = [[go to error after current cursor]],
    flags = bit.bor(RANGE, COUNT, TRLBAR),
    addr_type = 'ADDR_UNSIGNED',
    func = 'ex_cbelow',
  },
  {
    command = 'call',
    short_command = 'cal',
    desc = [[call a function]],
    flags = bit.bor(RANGE, NEEDARG, EXTRA, NOTRLCOM, SBOXOK, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_LINES',
    func = 'ex_call',
  },
  {
    command = 'catch',
    short_command = 'cat',
    desc = [[part of a :try command]],
    flags = bit.bor(EXTRA, SBOXOK, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_catch',
  },
  {
    command = 'cbuffer',
    short_command = 'cb',
    desc = [[parse error messages and jump to first error]],
    flags = bit.bor(BANG, RANGE, WORD1, TRLBAR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_cbuffer',
  },
  {
    command = 'cbefore',
    short_command = 'cbef',
    desc = [[go to error before current cursor]],
    flags = bit.bor(RANGE, COUNT, TRLBAR),
    addr_type = 'ADDR_UNSIGNED',
    func = 'ex_cbelow',
  },
  {
    command = 'cbelow',
    short_command = 'cbel',
    desc = [[go to error below current line]],
    flags = bit.bor(RANGE, COUNT, TRLBAR),
    addr_type = 'ADDR_UNSIGNED',
    func = 'ex_cbelow',
  },
  {
    command = 'cbottom',
    short_command = 'cbo',
    desc = [[scroll to the bottom of the quickfix window]],
    flags = bit.bor(TRLBAR),
    addr_type = 'ADDR_NONE',
    func = 'ex_cbottom',
  },
  {
    command = 'cc',
    short_command = 'cc',
    desc = [[go to specific error]],
    flags = bit.bor(RANGE, COUNT, TRLBAR, BANG),
    addr_type = 'ADDR_QUICKFIX',
    func = 'ex_cc',
  },
  {
    command = 'cclose',
    short_command = 'ccl',
    desc = [[close quickfix window]],
    flags = bit.bor(TRLBAR),
    addr_type = 'ADDR_NONE',
    func = 'ex_cclose',
  },
  {
    command = 'cd',
    short_command = 'cd',
    desc = [[change directory]],
    flags = bit.bor(BANG, FILE1, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_cd',
  },
  {
    command = 'cdo',
    short_command = 'cdo',
    desc = [[execute command in each valid error list entry]],
    flags = bit.bor(BANG, NEEDARG, EXTRA, NOTRLCOM, RANGE, DFLALL),
    addr_type = 'ADDR_QUICKFIX_VALID',
    func = 'ex_listdo',
  },
  {
    command = 'center',
    short_command = 'ce',
    desc = [[format lines at the center]],
    flags = bit.bor(TRLBAR, RANGE, WHOLEFOLD, EXTRA, CMDWIN, LOCK_OK, MODIFY),
    addr_type = 'ADDR_LINES',
    func = 'ex_align',
  },
  {
    command = 'cexpr',
    short_command = 'cex',
    desc = [[read errors from expr and jump to first]],
    flags = bit.bor(NEEDARG, WORD1, NOTRLCOM, BANG),
    addr_type = 'ADDR_NONE',
    func = 'ex_cexpr',
  },
  {
    command = 'cfile',
    short_command = 'cf',
    desc = [[read file with error messages and jump to first]],
    flags = bit.bor(TRLBAR, FILE1, BANG),
    addr_type = 'ADDR_NONE',
    func = 'ex_cfile',
  },
  -- Even though 'cfdo' is alphabetically lower than 'cfile', it is after
  -- 'cfile' in this cmd list to support the existing ":cf" abbreviation.
  {
    command = 'cfdo',
    short_command = 'cfd',
    desc = [[execute command in each file in error list]],
    flags = bit.bor(BANG, NEEDARG, EXTRA, NOTRLCOM, RANGE, DFLALL),
    addr_type = 'ADDR_QUICKFIX_VALID',
    func = 'ex_listdo',
  },
  {
    command = 'cfirst',
    short_command = 'cfir',
    desc = [[go to the specified error, default first one]],
    flags = bit.bor(RANGE, COUNT, TRLBAR, BANG),
    addr_type = 'ADDR_UNSIGNED',
    func = 'ex_cc',
  },
  {
    command = 'cgetfile',
    short_command = 'cg',
    desc = [[read file with error messages]],
    flags = bit.bor(TRLBAR, FILE1),
    addr_type = 'ADDR_NONE',
    func = 'ex_cfile',
  },
  {
    command = 'cgetbuffer',
    short_command = 'cgetb',
    desc = [[get errors from buffer]],
    flags = bit.bor(RANGE, WORD1, TRLBAR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_cbuffer',
  },
  {
    command = 'cgetexpr',
    short_command = 'cgete',
    desc = [[get errors from expr]],
    flags = bit.bor(NEEDARG, WORD1, NOTRLCOM),
    addr_type = 'ADDR_NONE',
    func = 'ex_cexpr',
  },
  {
    command = 'chdir',
    short_command = 'chd',
    desc = [[change directory]],
    flags = bit.bor(BANG, FILE1, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_cd',
  },
  {
    command = 'changes',
    short_command = 'changes',
    desc = [[print the change list]],
    flags = bit.bor(TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_changes',
  },
  {
    command = 'checkhealth',
    short_command = 'che',
    desc = [[run healthchecks]],
    flags = bit.bor(EXTRA, TRLBAR),
    addr_type = 'ADDR_NONE',
    func = 'ex_checkhealth',
  },
  {
    command = 'checkpath',
    short_command = 'checkp',
    desc = [[list included files]],
    flags = bit.bor(TRLBAR, BANG, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_checkpath',
  },
  {
    command = 'checktime',
    short_command = 'checkt',
    desc = [[check timestamp of loaded buffers]],
    flags = bit.bor(RANGE, BUFNAME, COUNT, EXTRA, TRLBAR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_checktime',
  },
  {
    command = 'chistory',
    short_command = 'chi',
    desc = [[list the error lists]],
    flags = bit.bor(RANGE, COUNT, TRLBAR),
    addr_type = 'ADDR_UNSIGNED',
    func = 'qf_history',
  },
  {
    command = 'clist',
    short_command = 'cl',
    desc = [[list all errors]],
    flags = bit.bor(BANG, EXTRA, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'qf_list',
  },
  {
    command = 'clast',
    short_command = 'cla',
    desc = [[go to the specified error, default last one]],
    flags = bit.bor(RANGE, COUNT, TRLBAR, BANG),
    addr_type = 'ADDR_UNSIGNED',
    func = 'ex_cc',
  },
  {
    command = 'close',
    short_command = 'clo',
    desc = [[close current window]],
    flags = bit.bor(BANG, RANGE, COUNT, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_WINDOWS',
    func = 'ex_close',
  },
  {
    command = 'clearjumps',
    short_command = 'cle',
    desc = [[clear the jump list]],
    flags = bit.bor(TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_clearjumps',
  },
  {
    command = 'cmap',
    short_command = 'cm',
    desc = [[like ":map" but for Command-line mode]],
    flags = bit.bor(EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_map',
  },
  {
    command = 'cmapclear',
    short_command = 'cmapc',
    desc = [[clear all mappings for Command-line mode]],
    flags = bit.bor(EXTRA, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_mapclear',
  },
  {
    command = 'cmenu',
    short_command = 'cme',
    desc = [[add menu for Command-line mode]],
    flags = bit.bor(RANGE, ZEROR, EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_OTHER',
    func = 'ex_menu',
  },
  {
    command = 'cnext',
    short_command = 'cn',
    desc = [[go to next error]],
    flags = bit.bor(RANGE, COUNT, TRLBAR, BANG),
    addr_type = 'ADDR_UNSIGNED',
    func = 'ex_cnext',
  },
  {
    command = 'cnewer',
    short_command = 'cnew',
    desc = [[go to newer error list]],
    flags = bit.bor(RANGE, COUNT, TRLBAR),
    addr_type = 'ADDR_UNSIGNED',
    func = 'qf_age',
  },
  {
    command = 'cnfile',
    short_command = 'cnf',
    desc = [[go to first error in next file]],
    flags = bit.bor(RANGE, COUNT, TRLBAR, BANG),
    addr_type = 'ADDR_UNSIGNED',
    func = 'ex_cnext',
  },
  {
    command = 'cnoremap',
    short_command = 'cno',
    desc = [[like ":noremap" but for Command-line mode]],
    flags = bit.bor(EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_map',
  },
  {
    command = 'cnoreabbrev',
    short_command = 'cnorea',
    desc = [[like ":noreabbrev" but for Command-line mode]],
    flags = bit.bor(EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_abbreviate',
  },
  {
    command = 'cnoremenu',
    short_command = 'cnoreme',
    desc = [[like ":noremenu" but for Command-line mode]],
    flags = bit.bor(RANGE, ZEROR, EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_OTHER',
    func = 'ex_menu',
  },
  {
    command = 'copy',
    short_command = 'co',
    desc = [[copy lines]],
    flags = bit.bor(RANGE, WHOLEFOLD, EXTRA, TRLBAR, CMDWIN, LOCK_OK, MODIFY),
    addr_type = 'ADDR_LINES',
    func = 'ex_copymove',
  },
  {
    command = 'colder',
    short_command = 'col',
    desc = [[go to older error list]],
    flags = bit.bor(RANGE, COUNT, TRLBAR),
    addr_type = 'ADDR_UNSIGNED',
    func = 'qf_age',
  },
  {
    command = 'colorscheme',
    short_command = 'colo',
    desc = [[load a specific color scheme]],
    flags = bit.bor(WORD1, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_colorscheme',
  },
  {
    command = 'command',
    short_command = 'com',
    desc = [[create user-defined command]],
    flags = bit.bor(EXTRA, BANG, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_command',
  },
  {
    command = 'comclear',
    short_command = 'comc',
    desc = [[clear all user-defined commands]],
    flags = bit.bor(TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_comclear',
  },
  {
    command = 'compiler',
    short_command = 'comp',
    desc = [[do settings for a specific compiler]],
    flags = bit.bor(BANG, TRLBAR, WORD1, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_compiler',
  },
  {
    command = 'continue',
    short_command = 'con',
    desc = [[go back to :while]],
    flags = bit.bor(TRLBAR, SBOXOK, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_continue',
  },
  {
    command = 'confirm',
    short_command = 'conf',
    desc = [[prompt user when confirmation required]],
    flags = bit.bor(NEEDARG, EXTRA, NOTRLCOM, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_wrongmodifier',
  },
  {
    command = 'const',
    short_command = 'cons',
    desc = [[create a variable as a constant]],
    flags = bit.bor(EXTRA, NOTRLCOM, SBOXOK, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_let',
  },
  {
    command = 'copen',
    short_command = 'cope',
    desc = [[open quickfix window]],
    flags = bit.bor(RANGE, COUNT, TRLBAR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_copen',
  },
  {
    command = 'cprevious',
    short_command = 'cp',
    desc = [[go to previous error]],
    flags = bit.bor(RANGE, COUNT, TRLBAR, BANG),
    addr_type = 'ADDR_UNSIGNED',
    func = 'ex_cnext',
  },
  {
    command = 'cpfile',
    short_command = 'cpf',
    desc = [[go to last error in previous file]],
    flags = bit.bor(RANGE, COUNT, TRLBAR, BANG),
    addr_type = 'ADDR_OTHER',
    func = 'ex_cnext',
  },
  {
    command = 'cquit',
    short_command = 'cq',
    desc = [[quit Vim with an error code]],
    flags = bit.bor(RANGE, COUNT, ZEROR, TRLBAR, BANG),
    addr_type = 'ADDR_UNSIGNED',
    func = 'ex_cquit',
  },
  {
    command = 'crewind',
    short_command = 'cr',
    desc = [[go to the specified error, default first one]],
    flags = bit.bor(RANGE, COUNT, TRLBAR, BANG),
    addr_type = 'ADDR_UNSIGNED',
    func = 'ex_cc',
  },
  {
    command = 'cunmap',
    short_command = 'cu',
    desc = [[like ":unmap" but for Command-line mode]],
    flags = bit.bor(EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_unmap',
  },
  {
    command = 'cunabbrev',
    short_command = 'cuna',
    desc = [[like ":unabbrev" but for Command-line mode]],
    flags = bit.bor(EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_abbreviate',
  },
  {
    command = 'cunmenu',
    short_command = 'cunme',
    desc = [[remove menu for Command-line mode]],
    flags = bit.bor(EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_menu',
  },
  {
    command = 'cwindow',
    short_command = 'cw',
    desc = [[open or close quickfix window]],
    flags = bit.bor(RANGE, COUNT, TRLBAR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_cwindow',
  },
  {
    command = 'delete',
    short_command = 'd',
    desc = [[delete lines]],
    flags = bit.bor(RANGE, WHOLEFOLD, REGSTR, COUNT, TRLBAR, CMDWIN, LOCK_OK, MODIFY),
    addr_type = 'ADDR_LINES',
    func = 'ex_operators',
  },
  {
    command = 'delmarks',
    short_command = 'delm',
    desc = [[delete marks]],
    flags = bit.bor(BANG, EXTRA, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_delmarks',
  },
  {
    command = 'debug',
    short_command = 'deb',
    desc = [[run a command in debugging mode]],
    flags = bit.bor(NEEDARG, EXTRA, NOTRLCOM, SBOXOK, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_debug',
  },
  {
    command = 'debuggreedy',
    short_command = 'debugg',
    desc = [[read debug mode commands from normal input]],
    flags = bit.bor(RANGE, ZEROR, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_OTHER',
    func = 'ex_debuggreedy',
  },
  {
    command = 'defer',
    short_command = 'defer',
    desc = [[call function when current function is done]],
    flags = bit.bor(NEEDARG, EXTRA, NOTRLCOM, SBOXOK, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_call',
  },
  {
    command = 'delcommand',
    short_command = 'delc',
    desc = [[delete user-defined command]],
    flags = bit.bor(BANG, NEEDARG, WORD1, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_delcommand',
  },
  {
    command = 'delfunction',
    short_command = 'delf',
    desc = [[delete a user function]],
    flags = bit.bor(BANG, NEEDARG, WORD1, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_delfunction',
  },
  {
    command = 'display',
    short_command = 'di',
    desc = [[display registers]],
    flags = bit.bor(EXTRA, NOTRLCOM, TRLBAR, SBOXOK, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_display',
  },
  {
    command = 'diffupdate',
    short_command = 'dif',
    desc = [[update 'diff' buffers]],
    flags = bit.bor(BANG, TRLBAR),
    addr_type = 'ADDR_NONE',
    func = 'ex_diffupdate',
  },
  {
    command = 'diffget',
    short_command = 'diffg',
    desc = [[remove differences in current buffer]],
    flags = bit.bor(RANGE, EXTRA, TRLBAR, MODIFY),
    addr_type = 'ADDR_LINES',
    func = 'ex_diffgetput',
  },
  {
    command = 'diffoff',
    short_command = 'diffo',
    desc = [[switch off diff mode]],
    flags = bit.bor(BANG, TRLBAR),
    addr_type = 'ADDR_NONE',
    func = 'ex_diffoff',
  },
  {
    command = 'diffpatch',
    short_command = 'diffp',
    desc = [[apply a patch and show differences]],
    flags = bit.bor(EXTRA, FILE1, TRLBAR, MODIFY),
    addr_type = 'ADDR_NONE',
    func = 'ex_diffpatch',
  },
  {
    command = 'diffput',
    short_command = 'diffpu',
    desc = [[remove differences in other buffer]],
    flags = bit.bor(RANGE, EXTRA, TRLBAR),
    addr_type = 'ADDR_LINES',
    func = 'ex_diffgetput',
  },
  {
    command = 'diffsplit',
    short_command = 'diffs',
    desc = [[show differences with another file]],
    flags = bit.bor(EXTRA, FILE1, TRLBAR),
    addr_type = 'ADDR_NONE',
    func = 'ex_diffsplit',
  },
  {
    command = 'diffthis',
    short_command = 'diffthis',
    desc = [[make current window a diff window]],
    flags = bit.bor(TRLBAR),
    addr_type = 'ADDR_NONE',
    func = 'ex_diffthis',
  },
  {
    command = 'digraphs',
    short_command = 'dig',
    desc = [[show or enter digraphs]],
    flags = bit.bor(BANG, EXTRA, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_digraphs',
  },
  {
    command = 'djump',
    short_command = 'dj',
    desc = [[jump to #define]],
    flags = bit.bor(BANG, RANGE, DFLALL, WHOLEFOLD, EXTRA),
    addr_type = 'ADDR_LINES',
    func = 'ex_findpat',
  },
  {
    command = 'dlist',
    short_command = 'dli',
    desc = [[list #defines]],
    flags = bit.bor(BANG, RANGE, DFLALL, WHOLEFOLD, EXTRA, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_LINES',
    func = 'ex_findpat',
  },
  {
    command = 'doautocmd',
    short_command = 'do',
    desc = [[apply autocommands to current buffer]],
    flags = bit.bor(EXTRA, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_doautocmd',
  },
  {
    command = 'doautoall',
    short_command = 'doautoa',
    desc = [[apply autocommands for all loaded buffers]],
    flags = bit.bor(EXTRA, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_doautoall',
  },
  {
    command = 'drop',
    short_command = 'dr',
    desc = [[jump to window editing file or edit file in current window]],
    flags = bit.bor(FILES, CMDARG, NEEDARG, ARGOPT, TRLBAR),
    addr_type = 'ADDR_NONE',
    func = 'ex_drop',
  },
  {
    command = 'dsearch',
    short_command = 'ds',
    desc = [[list one #define]],
    flags = bit.bor(BANG, RANGE, DFLALL, WHOLEFOLD, EXTRA, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_LINES',
    func = 'ex_findpat',
  },
  {
    command = 'dsplit',
    short_command = 'dsp',
    desc = [[split window and jump to #define]],
    flags = bit.bor(BANG, RANGE, DFLALL, WHOLEFOLD, EXTRA),
    addr_type = 'ADDR_LINES',
    func = 'ex_findpat',
  },
  {
    command = 'edit',
    short_command = 'e',
    desc = [[edit a file]],
    flags = bit.bor(BANG, FILE1, CMDARG, ARGOPT, TRLBAR),
    addr_type = 'ADDR_NONE',
    func = 'ex_edit',
  },
  {
    command = 'earlier',
    short_command = 'ea',
    desc = [[go to older change, undo]],
    flags = bit.bor(TRLBAR, EXTRA, NOSPC, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_later',
  },
  {
    command = 'echo',
    short_command = 'ec',
    desc = [[echoes the result of expressions]],
    flags = bit.bor(EXTRA, NOTRLCOM, SBOXOK, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_echo',
  },
  {
    command = 'echoerr',
    short_command = 'echoe',
    desc = [[like :echo, show like an error and use history]],
    flags = bit.bor(EXTRA, NOTRLCOM, SBOXOK, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_execute',
  },
  {
    command = 'echohl',
    short_command = 'echoh',
    desc = [[set highlighting for echo commands]],
    flags = bit.bor(EXTRA, TRLBAR, SBOXOK, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_echohl',
  },
  {
    command = 'echomsg',
    short_command = 'echom',
    desc = [[same as :echo, put message in history]],
    flags = bit.bor(EXTRA, NOTRLCOM, SBOXOK, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_execute',
  },
  {
    command = 'echon',
    short_command = 'echon',
    desc = [[same as :echo, but without <EOL>]],
    flags = bit.bor(EXTRA, NOTRLCOM, SBOXOK, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_echo',
  },
  {
    command = 'else',
    short_command = 'el',
    desc = [[part of an :if command]],
    flags = bit.bor(TRLBAR, SBOXOK, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_else',
  },
  {
    command = 'elseif',
    short_command = 'elsei',
    desc = [[part of an :if command]],
    flags = bit.bor(EXTRA, NOTRLCOM, SBOXOK, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_else',
  },
  {
    command = 'emenu',
    short_command = 'em',
    desc = [[execute a menu by name]],
    flags = bit.bor(NEEDARG, EXTRA, TRLBAR, NOTRLCOM, RANGE, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_OTHER',
    func = 'ex_emenu',
  },
  {
    command = 'endif',
    short_command = 'en',
    desc = [[end previous :if]],
    flags = bit.bor(TRLBAR, SBOXOK, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_endif',
  },
  {
    command = 'endfunction',
    short_command = 'endf',
    desc = [[end of a user function started with :function]],
    flags = bit.bor(TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_endfunction',
  },
  {
    command = 'endfor',
    short_command = 'endfo',
    desc = [[end previous :for]],
    flags = bit.bor(TRLBAR, SBOXOK, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_endwhile',
  },
  {
    command = 'endtry',
    short_command = 'endt',
    desc = [[end previous :try]],
    flags = bit.bor(TRLBAR, SBOXOK, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_endtry',
  },
  {
    command = 'endwhile',
    short_command = 'endw',
    desc = [[end previous :while]],
    flags = bit.bor(TRLBAR, SBOXOK, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_endwhile',
  },
  {
    command = 'enew',
    short_command = 'ene',
    desc = [[edit a new, unnamed buffer]],
    flags = bit.bor(BANG, TRLBAR),
    addr_type = 'ADDR_NONE',
    func = 'ex_edit',
  },
  {
    command = 'eval',
    short_command = 'ev',
    desc = [[evaluate an expression and discard the result]],
    flags = bit.bor(EXTRA, NOTRLCOM, SBOXOK, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_eval',
  },
  {
    command = 'ex',
    short_command = 'ex',
    desc = [[same as ":edit"]],
    flags = bit.bor(BANG, FILE1, CMDARG, ARGOPT, TRLBAR),
    addr_type = 'ADDR_NONE',
    func = 'ex_edit',
  },
  {
    command = 'execute',
    short_command = 'exe',
    desc = [[execute result of expressions]],
    flags = bit.bor(EXTRA, NOTRLCOM, SBOXOK, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_execute',
  },
  {
    command = 'exit',
    short_command = 'exi',
    desc = [[same as ":xit"]],
    flags = bit.bor(RANGE, WHOLEFOLD, BANG, FILE1, ARGOPT, DFLALL, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_LINES',
    func = 'ex_exit',
  },
  {
    command = 'exusage',
    short_command = 'exu',
    desc = [[overview of Ex commands]],
    flags = bit.bor(TRLBAR),
    addr_type = 'ADDR_NONE',
    func = 'ex_exusage',
  },
  {
    command = 'file',
    short_command = 'f',
    desc = [[show or set the current file name]],
    flags = bit.bor(RANGE, ZEROR, BANG, FILE1, TRLBAR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_file',
  },
  {
    command = 'files',
    short_command = 'files',
    desc = [[list all files in the buffer list]],
    flags = bit.bor(BANG, EXTRA, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'buflist_list',
  },
  {
    command = 'filetype',
    short_command = 'filet',
    desc = [[switch file type detection on/off]],
    flags = bit.bor(EXTRA, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_filetype',
  },
  {
    command = 'filter',
    short_command = 'filt',
    desc = [[filter output of following command]],
    flags = bit.bor(BANG, NEEDARG, EXTRA, NOTRLCOM),
    addr_type = 'ADDR_NONE',
    func = 'ex_wrongmodifier',
  },
  {
    command = 'find',
    short_command = 'fin',
    desc = [[find file in 'path' and edit it]],
    flags = bit.bor(RANGE, BANG, FILE1, CMDARG, ARGOPT, TRLBAR, NEEDARG),
    addr_type = 'ADDR_OTHER',
    func = 'ex_find',
  },
  {
    command = 'finally',
    short_command = 'fina',
    desc = [[part of a :try command]],
    flags = bit.bor(TRLBAR, SBOXOK, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_finally',
  },
  {
    command = 'finish',
    short_command = 'fini',
    desc = [[quit sourcing a Vim script]],
    flags = bit.bor(TRLBAR, SBOXOK, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_finish',
  },
  {
    command = 'first',
    short_command = 'fir',
    desc = [[go to the first file in the argument list]],
    flags = bit.bor(EXTRA, BANG, CMDARG, ARGOPT, TRLBAR),
    addr_type = 'ADDR_NONE',
    func = 'ex_rewind',
  },
  {
    command = 'fold',
    short_command = 'fo',
    desc = [[create a fold]],
    flags = bit.bor(RANGE, WHOLEFOLD, TRLBAR, SBOXOK, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_LINES',
    func = 'ex_fold',
  },
  {
    command = 'foldclose',
    short_command = 'foldc',
    desc = [[close folds]],
    flags = bit.bor(RANGE, BANG, WHOLEFOLD, TRLBAR, SBOXOK, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_LINES',
    func = 'ex_foldopen',
  },
  {
    command = 'folddoopen',
    short_command = 'foldd',
    desc = [[execute command on lines not in a closed fold]],
    flags = bit.bor(RANGE, DFLALL, NEEDARG, EXTRA, NOTRLCOM),
    addr_type = 'ADDR_LINES',
    func = 'ex_folddo',
  },
  {
    command = 'folddoclosed',
    short_command = 'folddoc',
    desc = [[execute command on lines in a closed fold]],
    flags = bit.bor(RANGE, DFLALL, NEEDARG, EXTRA, NOTRLCOM),
    addr_type = 'ADDR_LINES',
    func = 'ex_folddo',
  },
  {
    command = 'foldopen',
    short_command = 'foldo',
    desc = [[open folds]],
    flags = bit.bor(RANGE, BANG, WHOLEFOLD, TRLBAR, SBOXOK, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_LINES',
    func = 'ex_foldopen',
  },
  {
    command = 'for',
    short_command = 'for',
    desc = [[for loop]],
    flags = bit.bor(EXTRA, NOTRLCOM, SBOXOK, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_while',
  },
  {
    command = 'function',
    short_command = 'fu',
    desc = [[define a user function]],
    flags = bit.bor(EXTRA, BANG, SBOXOK, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_function',
  },
  {
    command = 'fclose',
    short_command = 'fc',
    desc = [[close floating window]],
    flags = bit.bor(BANG, RANGE),
    addr_type = 'ADDR_OTHER',
    func = 'ex_fclose',
  },
  {
    command = 'global',
    short_command = 'g',
    desc = [[execute commands for matching lines]],
    flags = bit.bor(RANGE, WHOLEFOLD, BANG, EXTRA, DFLALL, SBOXOK, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_LINES',
    func = 'ex_global',
  },
  {
    command = 'goto',
    short_command = 'go',
    desc = [[go to byte in the buffer]],
    flags = bit.bor(RANGE, COUNT, TRLBAR, SBOXOK, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_OTHER',
    func = 'ex_goto',
  },
  {
    command = 'grep',
    short_command = 'gr',
    desc = [[run 'grepprg' and jump to first match]],
    flags = bit.bor(RANGE, BANG, NEEDARG, EXTRA, NOTRLCOM, TRLBAR, XFILE),
    addr_type = 'ADDR_OTHER',
    func = 'ex_make',
  },
  {
    command = 'grepadd',
    short_command = 'grepa',
    desc = [[like :grep, but append to current list]],
    flags = bit.bor(RANGE, BANG, NEEDARG, EXTRA, NOTRLCOM, TRLBAR, XFILE),
    addr_type = 'ADDR_OTHER',
    func = 'ex_make',
  },
  {
    command = 'gui',
    short_command = 'gu',
    desc = [[start the GUI]],
    flags = bit.bor(BANG, FILES, CMDARG, ARGOPT, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_nogui',
  },
  {
    command = 'gvim',
    short_command = 'gv',
    desc = [[start the GUI]],
    flags = bit.bor(BANG, FILES, CMDARG, ARGOPT, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_nogui',
  },
  {
    command = 'help',
    short_command = 'h',
    desc = [[open a help window]],
    flags = bit.bor(BANG, EXTRA, NOTRLCOM),
    addr_type = 'ADDR_NONE',
    func = 'ex_help',
  },
  {
    command = 'helpclose',
    short_command = 'helpc',
    desc = [[close one help window]],
    flags = bit.bor(RANGE, COUNT, TRLBAR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_helpclose',
  },
  {
    command = 'helpgrep',
    short_command = 'helpg',
    desc = [[like ":grep" but searches help files]],
    flags = bit.bor(EXTRA, NOTRLCOM, NEEDARG),
    addr_type = 'ADDR_NONE',
    func = 'ex_helpgrep',
  },
  {
    command = 'helptags',
    short_command = 'helpt',
    desc = [[generate help tags for a directory]],
    flags = bit.bor(NEEDARG, FILES, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_helptags',
  },
  {
    command = 'highlight',
    short_command = 'hi',
    desc = [[specify highlighting methods]],
    flags = bit.bor(BANG, EXTRA, TRLBAR, SBOXOK, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_highlight',
  },
  {
    command = 'hide',
    short_command = 'hid',
    desc = [[hide current buffer for a command]],
    flags = bit.bor(BANG, RANGE, COUNT, EXTRA, TRLBAR),
    addr_type = 'ADDR_WINDOWS',
    func = 'ex_hide',
  },
  {
    command = 'history',
    short_command = 'his',
    desc = [[print a history list]],
    flags = bit.bor(EXTRA, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_history',
  },
  {
    command = 'horizontal',
    short_command = 'hor',
    desc = [[following window command work horizontally]],
    flags = bit.bor(NEEDARG, EXTRA, NOTRLCOM),
    addr_type = 'ADDR_NONE',
    func = 'ex_wrongmodifier',
  },
  {
    command = 'insert',
    short_command = 'i',
    desc = [[insert text]],
    flags = bit.bor(BANG, RANGE, TRLBAR, CMDWIN, LOCK_OK, MODIFY),
    addr_type = 'ADDR_LINES',
    func = 'ex_append',
  },
  {
    command = 'iabbrev',
    short_command = 'ia',
    desc = [[like ":abbrev" but for Insert mode]],
    flags = bit.bor(EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_abbreviate',
  },
  {
    command = 'iabclear',
    short_command = 'iabc',
    desc = [[like ":abclear" but for Insert mode]],
    flags = bit.bor(EXTRA, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_abclear',
  },
  {
    command = 'if',
    short_command = 'if',
    desc = [[execute commands when condition met]],
    flags = bit.bor(EXTRA, NOTRLCOM, SBOXOK, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_if',
  },
  {
    command = 'ijump',
    short_command = 'ij',
    desc = [[jump to definition of identifier]],
    flags = bit.bor(BANG, RANGE, DFLALL, WHOLEFOLD, EXTRA),
    addr_type = 'ADDR_LINES',
    func = 'ex_findpat',
  },
  {
    command = 'ilist',
    short_command = 'il',
    desc = [[list lines where identifier matches]],
    flags = bit.bor(BANG, RANGE, DFLALL, WHOLEFOLD, EXTRA, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_LINES',
    func = 'ex_findpat',
  },
  {
    command = 'imap',
    short_command = 'im',
    desc = [[like ":map" but for Insert mode]],
    flags = bit.bor(EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_map',
  },
  {
    command = 'imapclear',
    short_command = 'imapc',
    desc = [[like ":mapclear" but for Insert mode]],
    flags = bit.bor(EXTRA, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_mapclear',
  },
  {
    command = 'imenu',
    short_command = 'ime',
    desc = [[add menu for Insert mode]],
    flags = bit.bor(RANGE, ZEROR, EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_OTHER',
    func = 'ex_menu',
  },
  {
    command = 'inoremap',
    short_command = 'ino',
    desc = [[like ":noremap" but for Insert mode]],
    flags = bit.bor(EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_map',
  },
  {
    command = 'inoreabbrev',
    short_command = 'inorea',
    desc = [[like ":noreabbrev" but for Insert mode]],
    flags = bit.bor(EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_abbreviate',
  },
  {
    command = 'inoremenu',
    short_command = 'inoreme',
    desc = [[like ":noremenu" but for Insert mode]],
    flags = bit.bor(RANGE, ZEROR, EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_OTHER',
    func = 'ex_menu',
  },
  {
    command = 'intro',
    short_command = 'int',
    desc = [[print the introductory message]],
    flags = bit.bor(TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_intro',
  },
  {
    command = 'isearch',
    short_command = 'is',
    desc = [[list one line where identifier matches]],
    flags = bit.bor(BANG, RANGE, DFLALL, WHOLEFOLD, EXTRA, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_LINES',
    func = 'ex_findpat',
  },
  {
    command = 'isplit',
    short_command = 'isp',
    desc = [[split window and jump to definition of identifier]],
    flags = bit.bor(BANG, RANGE, DFLALL, WHOLEFOLD, EXTRA),
    addr_type = 'ADDR_LINES',
    func = 'ex_findpat',
  },
  {
    command = 'iunmap',
    short_command = 'iu',
    desc = [[like ":unmap" but for Insert mode]],
    flags = bit.bor(EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_unmap',
  },
  {
    command = 'iunabbrev',
    short_command = 'iuna',
    desc = [[like ":unabbrev" but for Insert mode]],
    flags = bit.bor(EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_abbreviate',
  },
  {
    command = 'iunmenu',
    short_command = 'iunme',
    desc = [[remove menu for Insert mode]],
    flags = bit.bor(EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_menu',
  },
  {
    command = 'join',
    short_command = 'j',
    desc = [[join lines]],
    flags = bit.bor(BANG, RANGE, WHOLEFOLD, COUNT, FLAGS, TRLBAR, CMDWIN, LOCK_OK, MODIFY),
    addr_type = 'ADDR_LINES',
    func = 'ex_join',
  },
  {
    command = 'jumps',
    short_command = 'ju',
    desc = [[print the jump list]],
    flags = bit.bor(TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_jumps',
  },
  {
    command = 'k',
    short_command = 'k',
    desc = [[set a mark]],
    flags = bit.bor(RANGE, WORD1, TRLBAR, SBOXOK, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_LINES',
    func = 'ex_mark',
  },
  {
    command = 'keepmarks',
    short_command = 'kee',
    desc = [[following command keeps marks where they are]],
    flags = bit.bor(NEEDARG, EXTRA, NOTRLCOM),
    addr_type = 'ADDR_NONE',
    func = 'ex_wrongmodifier',
  },
  {
    command = 'keepjumps',
    short_command = 'keepj',
    desc = [[following command keeps jumplist and marks]],
    flags = bit.bor(NEEDARG, EXTRA, NOTRLCOM),
    addr_type = 'ADDR_NONE',
    func = 'ex_wrongmodifier',
  },
  {
    command = 'keeppatterns',
    short_command = 'keepp',
    desc = [[following command keeps search pattern history]],
    flags = bit.bor(NEEDARG, EXTRA, NOTRLCOM),
    addr_type = 'ADDR_NONE',
    func = 'ex_wrongmodifier',
  },
  {
    command = 'keepalt',
    short_command = 'keepa',
    desc = [[following command keeps the alternate file]],
    flags = bit.bor(NEEDARG, EXTRA, NOTRLCOM),
    addr_type = 'ADDR_NONE',
    func = 'ex_wrongmodifier',
  },
  {
    command = 'list',
    short_command = 'l',
    desc = [[print lines]],
    flags = bit.bor(RANGE, WHOLEFOLD, COUNT, FLAGS, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_LINES',
    func = 'ex_print',
  },
  {
    command = 'lNext',
    short_command = 'lN',
    desc = [[go to previous entry in location list]],
    flags = bit.bor(RANGE, COUNT, TRLBAR, BANG),
    addr_type = 'ADDR_UNSIGNED',
    func = 'ex_cnext',
  },
  {
    command = 'lNfile',
    short_command = 'lNf',
    desc = [[go to last entry in previous file]],
    flags = bit.bor(RANGE, COUNT, TRLBAR, BANG),
    addr_type = 'ADDR_UNSIGNED',
    func = 'ex_cnext',
  },
  {
    command = 'last',
    short_command = 'la',
    desc = [[go to the last file in the argument list]],
    flags = bit.bor(EXTRA, BANG, CMDARG, ARGOPT, TRLBAR),
    addr_type = 'ADDR_NONE',
    func = 'ex_last',
  },
  {
    command = 'labove',
    short_command = 'lab',
    desc = [[go to location above current line]],
    flags = bit.bor(RANGE, COUNT, TRLBAR),
    addr_type = 'ADDR_UNSIGNED',
    func = 'ex_cbelow',
  },
  {
    command = 'language',
    short_command = 'lan',
    desc = [[set the language (locale)]],
    flags = bit.bor(EXTRA, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_language',
  },
  {
    command = 'laddexpr',
    short_command = 'lad',
    desc = [[add locations from expr]],
    flags = bit.bor(NEEDARG, WORD1, NOTRLCOM),
    addr_type = 'ADDR_NONE',
    func = 'ex_cexpr',
  },
  {
    command = 'laddbuffer',
    short_command = 'laddb',
    desc = [[add locations from buffer]],
    flags = bit.bor(RANGE, WORD1, TRLBAR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_cbuffer',
  },
  {
    command = 'laddfile',
    short_command = 'laddf',
    desc = [[add locations to current location list]],
    flags = bit.bor(TRLBAR, FILE1),
    addr_type = 'ADDR_NONE',
    func = 'ex_cfile',
  },
  {
    command = 'lafter',
    short_command = 'laf',
    desc = [[go to location after current cursor]],
    flags = bit.bor(RANGE, COUNT, TRLBAR),
    addr_type = 'ADDR_UNSIGNED',
    func = 'ex_cbelow',
  },
  {
    command = 'later',
    short_command = 'lat',
    desc = [[go to newer change, redo]],
    flags = bit.bor(TRLBAR, EXTRA, NOSPC, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_later',
  },
  {
    command = 'lbuffer',
    short_command = 'lb',
    desc = [[parse locations and jump to first location]],
    flags = bit.bor(BANG, RANGE, WORD1, TRLBAR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_cbuffer',
  },
  {
    command = 'lbefore',
    short_command = 'lbef',
    desc = [[go to location before current cursor]],
    flags = bit.bor(RANGE, COUNT, TRLBAR),
    addr_type = 'ADDR_UNSIGNED',
    func = 'ex_cbelow',
  },
  {
    command = 'lbelow',
    short_command = 'lbel',
    desc = [[go to location below current line]],
    flags = bit.bor(RANGE, COUNT, TRLBAR),
    addr_type = 'ADDR_UNSIGNED',
    func = 'ex_cbelow',
  },
  {
    command = 'lbottom',
    short_command = 'lbo',
    desc = [[scroll to the bottom of the location window]],
    flags = bit.bor(TRLBAR),
    addr_type = 'ADDR_NONE',
    func = 'ex_cbottom',
  },
  {
    command = 'lcd',
    short_command = 'lc',
    desc = [[change directory locally]],
    flags = bit.bor(BANG, FILE1, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_cd',
  },
  {
    command = 'lchdir',
    short_command = 'lch',
    desc = [[change directory locally]],
    flags = bit.bor(BANG, FILE1, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_cd',
  },
  {
    command = 'lclose',
    short_command = 'lcl',
    desc = [[close location window]],
    flags = bit.bor(RANGE, COUNT, TRLBAR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_cclose',
  },
  {
    command = 'ldo',
    short_command = 'ld',
    desc = [[execute command in valid location list entries]],
    flags = bit.bor(BANG, NEEDARG, EXTRA, NOTRLCOM, RANGE, DFLALL),
    addr_type = 'ADDR_QUICKFIX_VALID',
    func = 'ex_listdo',
  },
  {
    command = 'left',
    short_command = 'le',
    desc = [[left align lines]],
    flags = bit.bor(TRLBAR, RANGE, WHOLEFOLD, EXTRA, CMDWIN, LOCK_OK, MODIFY),
    addr_type = 'ADDR_LINES',
    func = 'ex_align',
  },
  {
    command = 'leftabove',
    short_command = 'lefta',
    desc = [[make split window appear left or above]],
    flags = bit.bor(NEEDARG, EXTRA, NOTRLCOM),
    addr_type = 'ADDR_NONE',
    func = 'ex_wrongmodifier',
  },
  {
    command = 'let',
    short_command = 'let',
    desc = [[assign a value to a variable or option]],
    flags = bit.bor(EXTRA, NOTRLCOM, SBOXOK, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_let',
  },
  {
    command = 'lexpr',
    short_command = 'lex',
    desc = [[read locations from expr and jump to first]],
    flags = bit.bor(NEEDARG, WORD1, NOTRLCOM, BANG),
    addr_type = 'ADDR_NONE',
    func = 'ex_cexpr',
  },
  {
    command = 'lfile',
    short_command = 'lf',
    desc = [[read file with locations and jump to first]],
    flags = bit.bor(TRLBAR, FILE1, BANG),
    addr_type = 'ADDR_NONE',
    func = 'ex_cfile',
  },
  -- Even though 'lfdo' is alphabetically lower than 'lfile', it is after
  -- 'lfile' in this cmd list to support the existing ":lf" abbreviation.
  {
    command = 'lfdo',
    short_command = 'lfd',
    desc = [[execute command in each file in location list]],
    flags = bit.bor(BANG, NEEDARG, EXTRA, NOTRLCOM, RANGE, DFLALL),
    addr_type = 'ADDR_QUICKFIX_VALID',
    func = 'ex_listdo',
  },
  {
    command = 'lfirst',
    short_command = 'lfir',
    desc = [[go to the specified location, default first one]],
    flags = bit.bor(RANGE, COUNT, TRLBAR, BANG),
    addr_type = 'ADDR_UNSIGNED',
    func = 'ex_cc',
  },
  {
    command = 'lgetfile',
    short_command = 'lg',
    desc = [[read file with locations]],
    flags = bit.bor(TRLBAR, FILE1),
    addr_type = 'ADDR_NONE',
    func = 'ex_cfile',
  },
  {
    command = 'lgetbuffer',
    short_command = 'lgetb',
    desc = [[get locations from buffer]],
    flags = bit.bor(RANGE, WORD1, TRLBAR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_cbuffer',
  },
  {
    command = 'lgetexpr',
    short_command = 'lgete',
    desc = [[get locations from expr]],
    flags = bit.bor(NEEDARG, WORD1, NOTRLCOM),
    addr_type = 'ADDR_NONE',
    func = 'ex_cexpr',
  },
  {
    command = 'lgrep',
    short_command = 'lgr',
    desc = [[run 'grepprg' and jump to first match]],
    flags = bit.bor(RANGE, BANG, NEEDARG, EXTRA, NOTRLCOM, TRLBAR, XFILE),
    addr_type = 'ADDR_OTHER',
    func = 'ex_make',
  },
  {
    command = 'lgrepadd',
    short_command = 'lgrepa',
    desc = [[like :grep, but append to current list]],
    flags = bit.bor(RANGE, BANG, NEEDARG, EXTRA, NOTRLCOM, TRLBAR, XFILE),
    addr_type = 'ADDR_OTHER',
    func = 'ex_make',
  },
  {
    command = 'lhelpgrep',
    short_command = 'lh',
    desc = [[like ":helpgrep" but uses location list]],
    flags = bit.bor(EXTRA, NOTRLCOM, NEEDARG),
    addr_type = 'ADDR_NONE',
    func = 'ex_helpgrep',
  },
  {
    command = 'lhistory',
    short_command = 'lhi',
    desc = [[list the location lists]],
    flags = bit.bor(RANGE, COUNT, TRLBAR),
    addr_type = 'ADDR_UNSIGNED',
    func = 'qf_history',
  },
  {
    command = 'll',
    short_command = 'll',
    desc = [[go to specific location]],
    flags = bit.bor(RANGE, COUNT, TRLBAR, BANG),
    addr_type = 'ADDR_QUICKFIX',
    func = 'ex_cc',
  },
  {
    command = 'llast',
    short_command = 'lla',
    desc = [[go to the specified location, default last one]],
    flags = bit.bor(RANGE, COUNT, TRLBAR, BANG),
    addr_type = 'ADDR_UNSIGNED',
    func = 'ex_cc',
  },
  {
    command = 'llist',
    short_command = 'lli',
    desc = [[list all locations]],
    flags = bit.bor(BANG, EXTRA, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'qf_list',
  },
  {
    command = 'lmap',
    short_command = 'lm',
    desc = [[like ":map!" but includes Lang-Arg mode]],
    flags = bit.bor(EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_map',
  },
  {
    command = 'lmapclear',
    short_command = 'lmapc',
    desc = [[like ":mapclear!" but includes Lang-Arg mode]],
    flags = bit.bor(EXTRA, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_mapclear',
  },
  {
    command = 'lmake',
    short_command = 'lmak',
    desc = [[execute external command 'makeprg' and parse error messages]],
    flags = bit.bor(BANG, EXTRA, NOTRLCOM, TRLBAR, XFILE),
    addr_type = 'ADDR_NONE',
    func = 'ex_make',
  },
  {
    command = 'lnoremap',
    short_command = 'ln',
    desc = [[like ":noremap!" but includes Lang-Arg mode]],
    flags = bit.bor(EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_map',
  },
  {
    command = 'lnext',
    short_command = 'lne',
    desc = [[go to next location]],
    flags = bit.bor(RANGE, COUNT, TRLBAR, BANG),
    addr_type = 'ADDR_UNSIGNED',
    func = 'ex_cnext',
  },
  {
    command = 'lnewer',
    short_command = 'lnew',
    desc = [[go to newer location list]],
    flags = bit.bor(RANGE, COUNT, TRLBAR),
    addr_type = 'ADDR_UNSIGNED',
    func = 'qf_age',
  },
  {
    command = 'lnfile',
    short_command = 'lnf',
    desc = [[go to first location in next file]],
    flags = bit.bor(RANGE, COUNT, TRLBAR, BANG),
    addr_type = 'ADDR_UNSIGNED',
    func = 'ex_cnext',
  },
  {
    command = 'loadview',
    short_command = 'lo',
    desc = [[load view for current window from a file]],
    flags = bit.bor(FILE1, TRLBAR),
    addr_type = 'ADDR_NONE',
    func = 'ex_loadview',
  },
  {
    command = 'loadkeymap',
    short_command = 'loadk',
    desc = [[load the following keymaps until EOF]],
    flags = bit.bor(CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_loadkeymap',
  },
  {
    command = 'lockmarks',
    short_command = 'loc',
    desc = [[following command keeps marks where they are]],
    flags = bit.bor(NEEDARG, EXTRA, NOTRLCOM),
    addr_type = 'ADDR_NONE',
    func = 'ex_wrongmodifier',
  },
  {
    command = 'lockvar',
    short_command = 'lockv',
    desc = [[lock variables]],
    flags = bit.bor(BANG, EXTRA, NEEDARG, SBOXOK, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_lockvar',
  },
  {
    command = 'lolder',
    short_command = 'lol',
    desc = [[go to older location list]],
    flags = bit.bor(RANGE, COUNT, TRLBAR),
    addr_type = 'ADDR_UNSIGNED',
    func = 'qf_age',
  },
  {
    command = 'lopen',
    short_command = 'lope',
    desc = [[open location window]],
    flags = bit.bor(RANGE, COUNT, TRLBAR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_copen',
  },
  {
    command = 'lprevious',
    short_command = 'lp',
    desc = [[go to previous location]],
    flags = bit.bor(RANGE, COUNT, TRLBAR, BANG),
    addr_type = 'ADDR_UNSIGNED',
    func = 'ex_cnext',
  },
  {
    command = 'lpfile',
    short_command = 'lpf',
    desc = [[go to last location in previous file]],
    flags = bit.bor(RANGE, COUNT, TRLBAR, BANG),
    addr_type = 'ADDR_OTHER',
    func = 'ex_cnext',
  },
  {
    command = 'lrewind',
    short_command = 'lr',
    desc = [[go to the specified location, default first one]],
    flags = bit.bor(RANGE, COUNT, TRLBAR, BANG),
    addr_type = 'ADDR_UNSIGNED',
    func = 'ex_cc',
  },
  {
    command = 'ltag',
    short_command = 'lt',
    desc = [[jump to tag and add matching tags to the location list]],
    flags = bit.bor(TRLBAR, BANG, WORD1),
    addr_type = 'ADDR_NONE',
    func = 'ex_tag',
  },
  {
    command = 'lunmap',
    short_command = 'lu',
    desc = [[like ":unmap!" but includes Lang-Arg mode]],
    flags = bit.bor(EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_unmap',
  },
  {
    command = 'lua',
    short_command = 'lua',
    desc = [[execute |Lua| command]],
    flags = bit.bor(RANGE, EXTRA, NEEDARG, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_LINES',
    func = 'ex_lua',
  },
  {
    command = 'luado',
    short_command = 'luad',
    desc = [[execute Lua command for each line]],
    flags = bit.bor(RANGE, DFLALL, EXTRA, NEEDARG, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_LINES',
    func = 'ex_luado',
  },
  {
    command = 'luafile',
    short_command = 'luaf',
    desc = [[execute |Lua| script file]],
    flags = bit.bor(RANGE, FILE1, NEEDARG, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_LINES',
    func = 'ex_luafile',
  },
  {
    command = 'lvimgrep',
    short_command = 'lv',
    desc = [[search for pattern in files]],
    flags = bit.bor(RANGE, BANG, NEEDARG, EXTRA, NOTRLCOM, TRLBAR, XFILE, LOCK_OK),
    addr_type = 'ADDR_OTHER',
    func = 'ex_vimgrep',
  },
  {
    command = 'lvimgrepadd',
    short_command = 'lvimgrepa',
    desc = [[like :vimgrep, but append to current list]],
    flags = bit.bor(RANGE, BANG, NEEDARG, EXTRA, NOTRLCOM, TRLBAR, XFILE, LOCK_OK),
    addr_type = 'ADDR_OTHER',
    func = 'ex_vimgrep',
  },
  {
    command = 'lwindow',
    short_command = 'lw',
    desc = [[open or close location window]],
    flags = bit.bor(RANGE, COUNT, TRLBAR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_cwindow',
  },
  {
    command = 'ls',
    short_command = 'ls',
    desc = [[list all buffers]],
    flags = bit.bor(BANG, EXTRA, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'buflist_list',
  },
  {
    command = 'move',
    short_command = 'm',
    desc = [[move lines]],
    flags = bit.bor(RANGE, WHOLEFOLD, EXTRA, TRLBAR, CMDWIN, LOCK_OK, MODIFY),
    addr_type = 'ADDR_LINES',
    func = 'ex_copymove',
  },
  {
    command = 'mark',
    short_command = 'ma',
    desc = [[set a mark]],
    flags = bit.bor(RANGE, WORD1, TRLBAR, SBOXOK, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_LINES',
    func = 'ex_mark',
  },
  {
    command = 'make',
    short_command = 'mak',
    desc = [[execute external command 'makeprg' and parse error messages]],
    flags = bit.bor(BANG, EXTRA, NOTRLCOM, TRLBAR, XFILE),
    addr_type = 'ADDR_NONE',
    func = 'ex_make',
  },
  {
    command = 'map',
    short_command = 'map',
    desc = [[show or enter a mapping]],
    flags = bit.bor(BANG, EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_map',
  },
  {
    command = 'mapclear',
    short_command = 'mapc',
    desc = [[clear all mappings for Normal and Visual mode]],
    flags = bit.bor(EXTRA, BANG, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_mapclear',
  },
  {
    command = 'marks',
    short_command = 'marks',
    desc = [[list all marks]],
    flags = bit.bor(EXTRA, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_marks',
  },
  {
    command = 'match',
    short_command = 'mat',
    desc = [[define a match to highlight]],
    flags = bit.bor(RANGE, EXTRA, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_OTHER',
    func = 'ex_match',
  },
  {
    command = 'menu',
    short_command = 'me',
    desc = [[enter a new menu item]],
    flags = bit.bor(RANGE, ZEROR, BANG, EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_OTHER',
    func = 'ex_menu',
  },
  {
    command = 'menutranslate',
    short_command = 'menut',
    desc = [[add a menu translation item]],
    flags = bit.bor(EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_menutranslate',
  },
  {
    command = 'messages',
    short_command = 'mes',
    desc = [[view previously displayed messages]],
    flags = bit.bor(EXTRA, TRLBAR, RANGE, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_OTHER',
    func = 'ex_messages',
  },
  {
    command = 'mkexrc',
    short_command = 'mk',
    desc = [[write current mappings and settings to a file]],
    flags = bit.bor(BANG, FILE1, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_mkrc',
  },
  {
    command = 'mksession',
    short_command = 'mks',
    desc = [[write session info to a file]],
    flags = bit.bor(BANG, FILE1, TRLBAR),
    addr_type = 'ADDR_NONE',
    func = 'ex_mkrc',
  },
  {
    command = 'mkspell',
    short_command = 'mksp',
    desc = [[produce .spl spell file]],
    flags = bit.bor(BANG, NEEDARG, EXTRA, NOTRLCOM, TRLBAR, XFILE),
    addr_type = 'ADDR_NONE',
    func = 'ex_mkspell',
  },
  {
    command = 'mkvimrc',
    short_command = 'mkv',
    desc = [[write current mappings and settings to a file]],
    flags = bit.bor(BANG, FILE1, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_mkrc',
  },
  {
    command = 'mkview',
    short_command = 'mkvie',
    desc = [[write view of current window to a file]],
    flags = bit.bor(BANG, FILE1, TRLBAR),
    addr_type = 'ADDR_NONE',
    func = 'ex_mkrc',
  },
  {
    command = 'mode',
    short_command = 'mod',
    desc = [[show or change the screen mode]],
    flags = bit.bor(WORD1, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_mode',
  },
  {
    command = 'mzscheme',
    short_command = 'mz',
    desc = [[execute MzScheme command]],
    flags = bit.bor(RANGE, EXTRA, DFLALL, NEEDARG, CMDWIN, LOCK_OK, SBOXOK),
    addr_type = 'ADDR_LINES',
    func = 'ex_script_ni',
    removed = true,
  },
  {
    command = 'mzfile',
    short_command = 'mzf',
    desc = [[execute MzScheme script file]],
    flags = bit.bor(RANGE, FILE1, NEEDARG, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_LINES',
    func = 'ex_ni',
    removed = true,
  },
  {
    command = 'next',
    short_command = 'n',
    desc = [[go to next file in the argument list]],
    flags = bit.bor(RANGE, BANG, FILES, CMDARG, ARGOPT, TRLBAR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_next',
  },
  {
    command = 'new',
    short_command = 'new',
    desc = [[create a new empty window]],
    flags = bit.bor(BANG, FILE1, RANGE, CMDARG, ARGOPT, TRLBAR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_splitview',
  },
  {
    command = 'nmap',
    short_command = 'nm',
    desc = [[like ":map" but for Normal mode]],
    flags = bit.bor(EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_map',
  },
  {
    command = 'nmapclear',
    short_command = 'nmapc',
    desc = [[clear all mappings for Normal mode]],
    flags = bit.bor(EXTRA, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_mapclear',
  },
  {
    command = 'nmenu',
    short_command = 'nme',
    desc = [[add menu for Normal mode]],
    flags = bit.bor(RANGE, ZEROR, EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_OTHER',
    func = 'ex_menu',
  },
  {
    command = 'nnoremap',
    short_command = 'nn',
    desc = [[like ":noremap" but for Normal mode]],
    flags = bit.bor(EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_map',
  },
  {
    command = 'nnoremenu',
    short_command = 'nnoreme',
    desc = [[like ":noremenu" but for Normal mode]],
    flags = bit.bor(RANGE, ZEROR, EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_OTHER',
    func = 'ex_menu',
  },
  {
    command = 'noremap',
    short_command = 'no',
    desc = [[enter a mapping that will not be remapped]],
    flags = bit.bor(BANG, EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_map',
  },
  {
    command = 'noautocmd',
    short_command = 'noa',
    desc = [[following commands don't trigger autocommands]],
    flags = bit.bor(NEEDARG, EXTRA, NOTRLCOM),
    addr_type = 'ADDR_NONE',
    func = 'ex_wrongmodifier',
  },
  {
    command = 'nohlsearch',
    short_command = 'noh',
    desc = [[suspend 'hlsearch' highlighting]],
    flags = bit.bor(TRLBAR, SBOXOK, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_nohlsearch',
  },
  {
    command = 'noreabbrev',
    short_command = 'norea',
    desc = [[enter an abbreviation that will not be remapped]],
    flags = bit.bor(EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_abbreviate',
  },
  {
    command = 'noremenu',
    short_command = 'noreme',
    desc = [[enter a menu that will not be remapped]],
    flags = bit.bor(RANGE, ZEROR, BANG, EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_OTHER',
    func = 'ex_menu',
  },
  {
    command = 'noswapfile',
    short_command = 'nos',
    desc = [[following commands don't create a swap file]],
    flags = bit.bor(NEEDARG, EXTRA, NOTRLCOM),
    addr_type = 'ADDR_NONE',
    func = 'ex_wrongmodifier',
  },
  {
    command = 'normal',
    short_command = 'norm',
    desc = [[execute Normal mode commands]],
    flags = bit.bor(RANGE, BANG, EXTRA, NEEDARG, NOTRLCOM, CTRLV, SBOXOK, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_LINES',
    func = 'ex_normal',
  },
  {
    command = 'number',
    short_command = 'nu',
    desc = [[print lines with line number]],
    flags = bit.bor(RANGE, WHOLEFOLD, COUNT, FLAGS, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_LINES',
    func = 'ex_print',
  },
  {
    command = 'nunmap',
    short_command = 'nun',
    desc = [[like ":unmap" but for Normal mode]],
    flags = bit.bor(EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_unmap',
  },
  {
    command = 'nunmenu',
    short_command = 'nunme',
    desc = [[remove menu for Normal mode]],
    flags = bit.bor(EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_menu',
  },
  {
    command = 'oldfiles',
    short_command = 'ol',
    desc = [[list files that have marks in the |shada| file]],
    flags = bit.bor(BANG, TRLBAR, SBOXOK, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_oldfiles',
  },
  {
    command = 'omap',
    short_command = 'om',
    desc = [[like ":map" but for Operator-pending mode]],
    flags = bit.bor(EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_map',
  },
  {
    command = 'omapclear',
    short_command = 'omapc',
    desc = [[remove all mappings for Operator-pending mode]],
    flags = bit.bor(EXTRA, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_mapclear',
  },
  {
    command = 'omenu',
    short_command = 'ome',
    desc = [[add menu for Operator-pending mode]],
    flags = bit.bor(RANGE, ZEROR, EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_OTHER',
    func = 'ex_menu',
  },
  {
    command = 'only',
    short_command = 'on',
    desc = [[close all windows except the current one]],
    flags = bit.bor(BANG, RANGE, COUNT, TRLBAR),
    addr_type = 'ADDR_WINDOWS',
    func = 'ex_only',
  },
  {
    command = 'onoremap',
    short_command = 'ono',
    desc = [[like ":noremap" but for Operator-pending mode]],
    flags = bit.bor(EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_map',
  },
  {
    command = 'onoremenu',
    short_command = 'onoreme',
    desc = [[like ":noremenu" but for Operator-pending mode]],
    flags = bit.bor(RANGE, ZEROR, EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_OTHER',
    func = 'ex_menu',
  },
  {
    command = 'options',
    short_command = 'opt',
    desc = [[open the options-window]],
    flags = bit.bor(TRLBAR),
    addr_type = 'ADDR_NONE',
    func = 'ex_options',
  },
  {
    command = 'ounmap',
    short_command = 'ou',
    desc = [[like ":unmap" but for Operator-pending mode]],
    flags = bit.bor(EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_unmap',
  },
  {
    command = 'ounmenu',
    short_command = 'ounme',
    desc = [[remove menu for Operator-pending mode]],
    flags = bit.bor(EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_menu',
  },
  {
    command = 'ownsyntax',
    short_command = 'ow',
    desc = [[set new local syntax highlight for this window]],
    flags = bit.bor(EXTRA, NOTRLCOM, SBOXOK, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_ownsyntax',
  },
  {
    command = 'print',
    short_command = 'p',
    desc = [[print lines]],
    flags = bit.bor(RANGE, WHOLEFOLD, COUNT, FLAGS, TRLBAR, CMDWIN, LOCK_OK, SBOXOK),
    addr_type = 'ADDR_LINES',
    func = 'ex_print',
  },
  {
    command = 'packadd',
    short_command = 'pa',
    desc = [[add a plugin from 'packpath']],
    flags = bit.bor(BANG, FILE1, NEEDARG, TRLBAR, SBOXOK, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_packadd',
  },
  {
    command = 'packloadall',
    short_command = 'packl',
    desc = [[load all packages under 'packpath']],
    flags = bit.bor(BANG, TRLBAR, SBOXOK, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_packloadall',
  },
  {
    command = 'pclose',
    short_command = 'pc',
    desc = [[close preview window]],
    flags = bit.bor(BANG, TRLBAR),
    addr_type = 'ADDR_NONE',
    func = 'ex_pclose',
  },
  {
    command = 'perl',
    short_command = 'pe',
    desc = [[execute perl command]],
    flags = bit.bor(RANGE, EXTRA, DFLALL, NEEDARG, SBOXOK, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_LINES',
    func = 'ex_perl',
  },
  {
    command = 'perldo',
    short_command = 'perld',
    desc = [[execute perl command for each line]],
    flags = bit.bor(RANGE, EXTRA, DFLALL, NEEDARG, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_LINES',
    func = 'ex_perldo',
  },
  {
    command = 'perlfile',
    short_command = 'perlf',
    desc = [[execute perl script file]],
    flags = bit.bor(RANGE, FILE1, NEEDARG, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_LINES',
    func = 'ex_perlfile',
  },
  {
    command = 'pedit',
    short_command = 'ped',
    desc = [[edit file in the preview window]],
    flags = bit.bor(BANG, FILE1, CMDARG, ARGOPT, TRLBAR),
    addr_type = 'ADDR_NONE',
    func = 'ex_pedit',
  },
  {
    command = 'pop',
    short_command = 'po',
    desc = [[jump to older entry in tag stack]],
    flags = bit.bor(RANGE, BANG, COUNT, TRLBAR, ZEROR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_tag',
  },
  {
    command = 'popup',
    short_command = 'popu',
    desc = [[popup a menu by name]],
    flags = bit.bor(NEEDARG, EXTRA, BANG, TRLBAR, NOTRLCOM, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_popup',
  },
  {
    command = 'ppop',
    short_command = 'pp',
    desc = [[":pop" in preview window]],
    flags = bit.bor(RANGE, BANG, COUNT, TRLBAR, ZEROR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_ptag',
  },
  {
    command = 'preserve',
    short_command = 'pre',
    desc = [[write all text to swap file]],
    flags = bit.bor(TRLBAR),
    addr_type = 'ADDR_NONE',
    func = 'ex_preserve',
  },
  {
    command = 'previous',
    short_command = 'prev',
    desc = [[go to previous file in argument list]],
    flags = bit.bor(EXTRA, RANGE, COUNT, BANG, CMDARG, ARGOPT, TRLBAR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_previous',
  },
  {
    command = 'profile',
    short_command = 'prof',
    desc = [[profiling functions and scripts]],
    flags = bit.bor(BANG, EXTRA, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_profile',
  },
  {
    command = 'profdel',
    short_command = 'profd',
    desc = [[stop profiling a function or script]],
    flags = bit.bor(EXTRA, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_breakdel',
  },
  {
    command = 'psearch',
    short_command = 'ps',
    desc = [[like ":ijump" but shows match in preview window]],
    flags = bit.bor(BANG, RANGE, WHOLEFOLD, DFLALL, EXTRA),
    addr_type = 'ADDR_LINES',
    func = 'ex_psearch',
  },
  {
    command = 'ptag',
    short_command = 'pt',
    desc = [[show tag in preview window]],
    flags = bit.bor(RANGE, BANG, WORD1, TRLBAR, ZEROR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_ptag',
  },
  {
    command = 'ptNext',
    short_command = 'ptN',
    desc = [[|:tNext| in preview window]],
    flags = bit.bor(RANGE, BANG, TRLBAR, ZEROR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_ptag',
  },
  {
    command = 'ptfirst',
    short_command = 'ptf',
    desc = [[|:trewind| in preview window]],
    flags = bit.bor(RANGE, BANG, TRLBAR, ZEROR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_ptag',
  },
  {
    command = 'ptjump',
    short_command = 'ptj',
    desc = [[|:tjump| and show tag in preview window]],
    flags = bit.bor(BANG, TRLBAR, WORD1),
    addr_type = 'ADDR_NONE',
    func = 'ex_ptag',
  },
  {
    command = 'ptlast',
    short_command = 'ptl',
    desc = [[|:tlast| in preview window]],
    flags = bit.bor(BANG, TRLBAR),
    addr_type = 'ADDR_NONE',
    func = 'ex_ptag',
  },
  {
    command = 'ptnext',
    short_command = 'ptn',
    desc = [[|:tnext| in preview window]],
    flags = bit.bor(RANGE, BANG, TRLBAR, ZEROR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_ptag',
  },
  {
    command = 'ptprevious',
    short_command = 'ptp',
    desc = [[|:tprevious| in preview window]],
    flags = bit.bor(RANGE, BANG, TRLBAR, ZEROR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_ptag',
  },
  {
    command = 'ptrewind',
    short_command = 'ptr',
    desc = [[|:trewind| in preview window]],
    flags = bit.bor(RANGE, BANG, TRLBAR, ZEROR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_ptag',
  },
  {
    command = 'ptselect',
    short_command = 'pts',
    desc = [[|:tselect| and show tag in preview window]],
    flags = bit.bor(BANG, TRLBAR, WORD1),
    addr_type = 'ADDR_NONE',
    func = 'ex_ptag',
  },
  {
    command = 'put',
    short_command = 'pu',
    desc = [[insert contents of register in the text]],
    flags = bit.bor(RANGE, WHOLEFOLD, BANG, REGSTR, TRLBAR, ZEROR, CMDWIN, LOCK_OK, MODIFY),
    addr_type = 'ADDR_LINES',
    func = 'ex_put',
  },
  {
    command = 'pwd',
    short_command = 'pw',
    desc = [[print current directory]],
    flags = bit.bor(TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_pwd',
  },
  {
    command = 'python',
    short_command = 'py',
    desc = [[execute Python command]],
    flags = bit.bor(RANGE, EXTRA, NEEDARG, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_LINES',
    func = 'ex_python3',
  },
  {
    command = 'pydo',
    short_command = 'pyd',
    desc = [[execute Python command for each line]],
    flags = bit.bor(RANGE, DFLALL, EXTRA, NEEDARG, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_LINES',
    func = 'ex_pydo3',
  },
  {
    command = 'pyfile',
    short_command = 'pyf',
    desc = [[execute Python script file]],
    flags = bit.bor(RANGE, FILE1, NEEDARG, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_LINES',
    func = 'ex_py3file',
  },
  {
    command = 'py3',
    short_command = 'py3',
    desc = [[execute Python 3 command]],
    flags = bit.bor(RANGE, EXTRA, NEEDARG, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_LINES',
    func = 'ex_python3',
  },
  {
    command = 'py3do',
    short_command = 'py3d',
    desc = [[execute Python 3 command for each line]],
    flags = bit.bor(RANGE, DFLALL, EXTRA, NEEDARG, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_LINES',
    func = 'ex_pydo3',
  },
  {
    command = 'python3',
    short_command = 'python3',
    desc = [[same as :py3]],
    flags = bit.bor(RANGE, EXTRA, NEEDARG, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_LINES',
    func = 'ex_python3',
  },
  {
    command = 'py3file',
    short_command = 'py3f',
    desc = [[execute Python 3 script file]],
    flags = bit.bor(RANGE, FILE1, NEEDARG, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_LINES',
    func = 'ex_py3file',
  },
  {
    command = 'pyx',
    short_command = 'pyx',
    desc = [[execute |python_x| command]],
    flags = bit.bor(RANGE, EXTRA, NEEDARG, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_LINES',
    func = 'ex_python3',
  },
  {
    command = 'pyxdo',
    short_command = 'pyxd',
    desc = [[execute |python_x| command for each line]],
    flags = bit.bor(RANGE, DFLALL, EXTRA, NEEDARG, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_LINES',
    func = 'ex_pydo3',
  },
  {
    command = 'pythonx',
    short_command = 'pythonx',
    desc = [[same as :pyx]],
    flags = bit.bor(RANGE, EXTRA, NEEDARG, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_LINES',
    func = 'ex_python3',
  },
  {
    command = 'pyxfile',
    short_command = 'pyxf',
    desc = [[execute |python_x| script file]],
    flags = bit.bor(RANGE, FILE1, NEEDARG, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_LINES',
    func = 'ex_py3file',
  },
  {
    command = 'quit',
    short_command = 'q',
    desc = [[quit current window (when one window quit Vim)]],
    flags = bit.bor(BANG, RANGE, COUNT, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_WINDOWS',
    func = 'ex_quit',
  },
  {
    command = 'quitall',
    short_command = 'quita',
    desc = [[quit Vim]],
    flags = bit.bor(BANG, TRLBAR),
    addr_type = 'ADDR_NONE',
    func = 'ex_quit_all',
  },
  {
    command = 'qall',
    short_command = 'qa',
    desc = [[quit Vim]],
    flags = bit.bor(BANG, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_quit_all',
  },
  {
    command = 'read',
    short_command = 'r',
    desc = [[read file into the text]],
    flags = bit.bor(BANG, RANGE, WHOLEFOLD, FILE1, ARGOPT, TRLBAR, ZEROR, CMDWIN, LOCK_OK, MODIFY),
    addr_type = 'ADDR_LINES',
    func = 'ex_read',
  },
  {
    command = 'recover',
    short_command = 'rec',
    desc = [[recover a file from a swap file]],
    flags = bit.bor(BANG, FILE1, TRLBAR),
    addr_type = 'ADDR_NONE',
    func = 'ex_recover',
  },
  {
    command = 'redo',
    short_command = 'red',
    desc = [[redo one undone change]],
    flags = bit.bor(TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_redo',
  },
  {
    command = 'redir',
    short_command = 'redi',
    desc = [[redirect messages to a file or register]],
    flags = bit.bor(BANG, FILES, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_redir',
  },
  {
    command = 'redraw',
    short_command = 'redr',
    desc = [[force a redraw of the display]],
    flags = bit.bor(BANG, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_redraw',
  },
  {
    command = 'redrawstatus',
    short_command = 'redraws',
    desc = [[force a redraw of the status line(s) and window bar(s)]],
    flags = bit.bor(BANG, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_redrawstatus',
  },
  {
    command = 'redrawtabline',
    short_command = 'redrawt',
    desc = [[force a redraw of the tabline]],
    flags = bit.bor(TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_redrawtabline',
  },
  {
    command = 'registers',
    short_command = 'reg',
    desc = [[display the contents of registers]],
    flags = bit.bor(EXTRA, NOTRLCOM, TRLBAR, SBOXOK, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_display',
  },
  {
    command = 'resize',
    short_command = 'res',
    desc = [[change current window height]],
    flags = bit.bor(RANGE, TRLBAR, WORD1, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_OTHER',
    func = 'ex_resize',
  },
  {
    command = 'retab',
    short_command = 'ret',
    desc = [[change tab size]],
    flags = bit.bor(TRLBAR, RANGE, WHOLEFOLD, DFLALL, BANG, WORD1, CMDWIN, LOCK_OK, MODIFY),
    addr_type = 'ADDR_LINES',
    func = 'ex_retab',
  },
  {
    command = 'return',
    short_command = 'retu',
    desc = [[return from a user function]],
    flags = bit.bor(EXTRA, NOTRLCOM, SBOXOK, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_return',
  },
  {
    command = 'rewind',
    short_command = 'rew',
    desc = [[go to the first file in the argument list]],
    flags = bit.bor(EXTRA, BANG, CMDARG, ARGOPT, TRLBAR),
    addr_type = 'ADDR_NONE',
    func = 'ex_rewind',
  },
  {
    command = 'right',
    short_command = 'ri',
    desc = [[right align text]],
    flags = bit.bor(TRLBAR, RANGE, WHOLEFOLD, EXTRA, CMDWIN, LOCK_OK, MODIFY),
    addr_type = 'ADDR_LINES',
    func = 'ex_align',
  },
  {
    command = 'rightbelow',
    short_command = 'rightb',
    desc = [[make split window appear right or below]],
    flags = bit.bor(NEEDARG, EXTRA, NOTRLCOM),
    addr_type = 'ADDR_NONE',
    func = 'ex_wrongmodifier',
  },
  {
    command = 'rshada',
    short_command = 'rsh',
    desc = [[read from |shada| file]],
    flags = bit.bor(BANG, FILE1, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_shada',
  },
  {
    command = 'runtime',
    short_command = 'ru',
    desc = [[source vim scripts in 'runtimepath']],
    flags = bit.bor(BANG, NEEDARG, FILES, TRLBAR, SBOXOK, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_runtime',
  },
  {
    command = 'rundo',
    short_command = 'rund',
    desc = [[read undo information from a file]],
    flags = bit.bor(NEEDARG, FILE1),
    addr_type = 'ADDR_NONE',
    func = 'ex_rundo',
  },
  {
    command = 'ruby',
    short_command = 'rub',
    desc = [[execute Ruby command]],
    flags = bit.bor(RANGE, EXTRA, NEEDARG, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_LINES',
    func = 'ex_ruby',
  },
  {
    command = 'rubydo',
    short_command = 'rubyd',
    desc = [[execute Ruby command for each line]],
    flags = bit.bor(RANGE, DFLALL, EXTRA, NEEDARG, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_LINES',
    func = 'ex_rubydo',
  },
  {
    command = 'rubyfile',
    short_command = 'rubyf',
    desc = [[execute Ruby script file]],
    flags = bit.bor(RANGE, FILE1, NEEDARG, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_LINES',
    func = 'ex_rubyfile',
  },
  {
    command = 'rviminfo',
    short_command = 'rv',
    desc = [[read from vininfo file]],
    flags = bit.bor(BANG, FILE1, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_shada',
    removed = true, -- deprecated
  },
  {
    command = 'substitute',
    short_command = 's',
    desc = [[find and replace text]],
    flags = bit.bor(RANGE, WHOLEFOLD, EXTRA, CMDWIN, LOCK_OK, PREVIEW),
    addr_type = 'ADDR_LINES',
    func = 'ex_substitute',
    preview_func = 'ex_substitute_preview',
  },
  {
    command = 'sNext',
    short_command = 'sN',
    desc = [[split window and go to previous file in argument list]],
    flags = bit.bor(EXTRA, RANGE, COUNT, BANG, CMDARG, ARGOPT, TRLBAR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_previous',
  },
  {
    command = 'sargument',
    short_command = 'sa',
    desc = [[split window and go to specific file in argument list]],
    flags = bit.bor(BANG, RANGE, COUNT, EXTRA, CMDARG, ARGOPT, TRLBAR),
    addr_type = 'ADDR_ARGUMENTS',
    func = 'ex_argument',
  },
  {
    command = 'sall',
    short_command = 'sal',
    desc = [[open a window for each file in argument list]],
    flags = bit.bor(BANG, RANGE, COUNT, TRLBAR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_all',
  },
  {
    command = 'sandbox',
    short_command = 'san',
    desc = [[execute a command in the sandbox]],
    flags = bit.bor(NEEDARG, EXTRA, NOTRLCOM),
    addr_type = 'ADDR_NONE',
    func = 'ex_wrongmodifier',
  },
  {
    command = 'saveas',
    short_command = 'sav',
    desc = [[save file under another name.]],
    flags = bit.bor(BANG, FILE1, ARGOPT, CMDWIN, LOCK_OK, TRLBAR),
    addr_type = 'ADDR_NONE',
    func = 'ex_write',
  },
  {
    command = 'sbuffer',
    short_command = 'sb',
    desc = [[split window and go to specific file in the buffer list]],
    flags = bit.bor(BANG, RANGE, BUFNAME, BUFUNL, COUNT, EXTRA, CMDARG, TRLBAR),
    addr_type = 'ADDR_BUFFERS',
    func = 'ex_buffer',
  },
  {
    command = 'sbNext',
    short_command = 'sbN',
    desc = [[split window and go to previous file in the buffer list]],
    flags = bit.bor(RANGE, COUNT, CMDARG, TRLBAR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_bprevious',
  },
  {
    command = 'sball',
    short_command = 'sba',
    desc = [[open a window for each file in the buffer list]],
    flags = bit.bor(RANGE, COUNT, CMDARG, TRLBAR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_buffer_all',
  },
  {
    command = 'sbfirst',
    short_command = 'sbf',
    desc = [[split window and go to first file in the buffer list]],
    flags = bit.bor(CMDARG, TRLBAR),
    addr_type = 'ADDR_NONE',
    func = 'ex_brewind',
  },
  {
    command = 'sblast',
    short_command = 'sbl',
    desc = [[split window and go to last file in buffer list]],
    flags = bit.bor(CMDARG, TRLBAR),
    addr_type = 'ADDR_NONE',
    func = 'ex_blast',
  },
  {
    command = 'sbmodified',
    short_command = 'sbm',
    desc = [[split window and go to modified file in the buffer list]],
    flags = bit.bor(RANGE, COUNT, CMDARG, TRLBAR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_bmodified',
  },
  {
    command = 'sbnext',
    short_command = 'sbn',
    desc = [[split window and go to next file in the buffer list]],
    flags = bit.bor(RANGE, COUNT, CMDARG, TRLBAR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_bnext',
  },
  {
    command = 'sbprevious',
    short_command = 'sbp',
    desc = [[split window and go to previous file in the buffer list]],
    flags = bit.bor(RANGE, COUNT, CMDARG, TRLBAR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_bprevious',
  },
  {
    command = 'sbrewind',
    short_command = 'sbr',
    desc = [[split window and go to first file in the buffer list]],
    flags = bit.bor(CMDARG, TRLBAR),
    addr_type = 'ADDR_NONE',
    func = 'ex_brewind',
  },
  {
    command = 'scriptnames',
    short_command = 'scr',
    desc = [[list names of all sourced Vim scripts]],
    flags = bit.bor(BANG, FILES, RANGE, COUNT, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_OTHER',
    func = 'ex_scriptnames',
  },
  {
    command = 'scriptencoding',
    short_command = 'scripte',
    desc = [[encoding used in sourced Vim script]],
    flags = bit.bor(WORD1, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_scriptencoding',
  },
  {
    command = 'set',
    short_command = 'se',
    desc = [[show or set options]],
    flags = bit.bor(BANG, TRLBAR, EXTRA, CMDWIN, LOCK_OK, SBOXOK),
    addr_type = 'ADDR_NONE',
    func = 'ex_set',
  },
  {
    command = 'setfiletype',
    short_command = 'setf',
    desc = [[set 'filetype', unless it was set already]],
    flags = bit.bor(TRLBAR, EXTRA, NEEDARG, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_setfiletype',
  },
  {
    command = 'setglobal',
    short_command = 'setg',
    desc = [[show global values of options]],
    flags = bit.bor(BANG, TRLBAR, EXTRA, CMDWIN, LOCK_OK, SBOXOK),
    addr_type = 'ADDR_NONE',
    func = 'ex_set',
  },
  {
    command = 'setlocal',
    short_command = 'setl',
    desc = [[show or set options locally]],
    flags = bit.bor(BANG, TRLBAR, EXTRA, CMDWIN, LOCK_OK, SBOXOK),
    addr_type = 'ADDR_NONE',
    func = 'ex_set',
  },
  {
    command = 'sfind',
    short_command = 'sf',
    desc = [[split current window and edit file in 'path']],
    flags = bit.bor(BANG, FILE1, RANGE, CMDARG, ARGOPT, TRLBAR, NEEDARG),
    addr_type = 'ADDR_OTHER',
    func = 'ex_splitview',
  },
  {
    command = 'sfirst',
    short_command = 'sfir',
    desc = [[split window and go to first file in the argument list]],
    flags = bit.bor(EXTRA, BANG, CMDARG, ARGOPT, TRLBAR),
    addr_type = 'ADDR_NONE',
    func = 'ex_rewind',
  },
  {
    command = 'simalt',
    short_command = 'sim',
    desc = [[simulate pressing key while holding Alt pressed]],
    flags = bit.bor(NEEDARG, WORD1, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_ni',
    removed = true, -- removed
  },
  {
    command = 'sign',
    short_command = 'sig',
    desc = [[manipulate signs]],
    flags = bit.bor(NEEDARG, RANGE, EXTRA, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_OTHER',
    func = 'ex_sign',
  },
  {
    command = 'silent',
    short_command = 'sil',
    desc = [[run a command silently]],
    flags = bit.bor(NEEDARG, EXTRA, BANG, NOTRLCOM, SBOXOK, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_wrongmodifier',
  },
  {
    command = 'sleep',
    short_command = 'sl',
    desc = [[do nothing for a few seconds]],
    flags = bit.bor(BANG, RANGE, COUNT, EXTRA, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_OTHER',
    func = 'ex_sleep',
  },
  {
    command = 'slast',
    short_command = 'sla',
    desc = [[split window and go to last file in the argument list]],
    flags = bit.bor(EXTRA, BANG, CMDARG, ARGOPT, TRLBAR),
    addr_type = 'ADDR_NONE',
    func = 'ex_last',
  },
  {
    command = 'smagic',
    short_command = 'sm',
    desc = [[:substitute with 'magic']],
    flags = bit.bor(RANGE, WHOLEFOLD, EXTRA, CMDWIN, LOCK_OK, PREVIEW),
    addr_type = 'ADDR_LINES',
    func = 'ex_submagic',
    preview_func = 'ex_submagic_preview',
  },
  {
    command = 'smap',
    short_command = 'smap',
    desc = [[like ":map" but for Select mode]],
    flags = bit.bor(EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_map',
  },
  {
    command = 'smapclear',
    short_command = 'smapc',
    desc = [[remove all mappings for Select mode]],
    flags = bit.bor(EXTRA, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_mapclear',
  },
  {
    command = 'smenu',
    short_command = 'sme',
    desc = [[add menu for Select mode]],
    flags = bit.bor(RANGE, ZEROR, EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_OTHER',
    func = 'ex_menu',
  },
  {
    command = 'snext',
    short_command = 'sn',
    desc = [[split window and go to next file in the argument list]],
    flags = bit.bor(RANGE, BANG, FILES, CMDARG, ARGOPT, TRLBAR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_next',
  },
  {
    command = 'snomagic',
    short_command = 'sno',
    desc = [[:substitute with 'nomagic']],
    flags = bit.bor(RANGE, WHOLEFOLD, EXTRA, CMDWIN, LOCK_OK, PREVIEW),
    addr_type = 'ADDR_LINES',
    func = 'ex_submagic',
    preview_func = 'ex_submagic_preview',
  },
  {
    command = 'snoremap',
    short_command = 'snor',
    desc = [[like ":noremap" but for Select mode]],
    flags = bit.bor(EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_map',
  },
  {
    command = 'snoremenu',
    short_command = 'snoreme',
    desc = [[like ":noremenu" but for Select mode]],
    flags = bit.bor(RANGE, ZEROR, EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_OTHER',
    func = 'ex_menu',
  },
  {
    command = 'source',
    short_command = 'so',
    desc = [[read Vim or Ex commands from a file]],
    flags = bit.bor(RANGE, DFLALL, WHOLEFOLD, BANG, FILE1, TRLBAR, SBOXOK, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_LINES',
    func = 'ex_source',
  },
  {
    command = 'sort',
    short_command = 'sor',
    desc = [[sort lines]],
    flags = bit.bor(RANGE, DFLALL, WHOLEFOLD, BANG, EXTRA, NOTRLCOM, MODIFY),
    addr_type = 'ADDR_LINES',
    func = 'ex_sort',
  },
  {
    command = 'split',
    short_command = 'sp',
    desc = [[split current window]],
    flags = bit.bor(BANG, FILE1, RANGE, CMDARG, ARGOPT, TRLBAR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_splitview',
  },
  {
    command = 'spellgood',
    short_command = 'spe',
    desc = [[add good word for spelling]],
    flags = bit.bor(BANG, RANGE, NEEDARG, EXTRA, TRLBAR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_spell',
  },
  {
    command = 'spelldump',
    short_command = 'spelld',
    desc = [[split window and fill with all correct words]],
    flags = bit.bor(BANG, TRLBAR),
    addr_type = 'ADDR_NONE',
    func = 'ex_spelldump',
  },
  {
    command = 'spellinfo',
    short_command = 'spelli',
    desc = [[show info about loaded spell files]],
    flags = bit.bor(TRLBAR),
    addr_type = 'ADDR_NONE',
    func = 'ex_spellinfo',
  },
  {
    command = 'spellrepall',
    short_command = 'spellr',
    desc = [[replace all bad words like last |z=|]],
    flags = bit.bor(TRLBAR),
    addr_type = 'ADDR_NONE',
    func = 'ex_spellrepall',
  },
  {
    command = 'spellrare',
    short_command = 'spellra',
    desc = [[add rare word for spelling]],
    flags = bit.bor(BANG, RANGE, NEEDARG, EXTRA, TRLBAR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_spell',
  },
  {
    command = 'spellundo',
    short_command = 'spellu',
    desc = [[remove good or bad word]],
    flags = bit.bor(BANG, RANGE, NEEDARG, EXTRA, TRLBAR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_spell',
  },
  {
    command = 'spellwrong',
    short_command = 'spellw',
    desc = [[add spelling mistake]],
    flags = bit.bor(BANG, RANGE, NEEDARG, EXTRA, TRLBAR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_spell',
  },
  {
    command = 'sprevious',
    short_command = 'spr',
    desc = [[split window and go to previous file in the argument list]],
    flags = bit.bor(EXTRA, RANGE, COUNT, BANG, CMDARG, ARGOPT, TRLBAR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_previous',
  },
  {
    command = 'srewind',
    short_command = 'sre',
    desc = [[split window and go to first file in the argument list]],
    flags = bit.bor(EXTRA, BANG, CMDARG, ARGOPT, TRLBAR),
    addr_type = 'ADDR_NONE',
    func = 'ex_rewind',
  },
  {
    command = 'stop',
    short_command = 'st',
    desc = [[suspend the editor or escape to a shell]],
    flags = bit.bor(TRLBAR, BANG, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_stop',
  },
  {
    command = 'stag',
    short_command = 'sta',
    desc = [[split window and jump to a tag]],
    flags = bit.bor(RANGE, BANG, WORD1, TRLBAR, ZEROR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_stag',
  },
  {
    command = 'startinsert',
    short_command = 'star',
    desc = [[start Insert mode]],
    flags = bit.bor(BANG, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_startinsert',
  },
  {
    command = 'startgreplace',
    short_command = 'startg',
    desc = [[start Virtual Replace mode]],
    flags = bit.bor(BANG, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_startinsert',
  },
  {
    command = 'startreplace',
    short_command = 'startr',
    desc = [[start Replace mode]],
    flags = bit.bor(BANG, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_startinsert',
  },
  {
    command = 'stopinsert',
    short_command = 'stopi',
    desc = [[stop Insert mode]],
    flags = bit.bor(BANG, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_stopinsert',
  },
  {
    command = 'stjump',
    short_command = 'stj',
    desc = [[do ":tjump" and split window]],
    flags = bit.bor(BANG, TRLBAR, WORD1),
    addr_type = 'ADDR_NONE',
    func = 'ex_stag',
  },
  {
    command = 'stselect',
    short_command = 'sts',
    desc = [[do ":tselect" and split window]],
    flags = bit.bor(BANG, TRLBAR, WORD1),
    addr_type = 'ADDR_NONE',
    func = 'ex_stag',
  },
  {
    command = 'sunhide',
    short_command = 'sun',
    desc = [[same as ":unhide"]],
    flags = bit.bor(RANGE, COUNT, TRLBAR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_buffer_all',
  },
  {
    command = 'sunmap',
    short_command = 'sunm',
    desc = [[like ":unmap" but for Select mode]],
    flags = bit.bor(EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_unmap',
  },
  {
    command = 'sunmenu',
    short_command = 'sunme',
    desc = [[remove menu for Select mode]],
    flags = bit.bor(EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_menu',
  },
  {
    command = 'suspend',
    short_command = 'sus',
    desc = [[same as ":stop"]],
    flags = bit.bor(TRLBAR, BANG, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_stop',
  },
  {
    command = 'sview',
    short_command = 'sv',
    desc = [[split window and edit file read-only]],
    flags = bit.bor(BANG, FILE1, RANGE, CMDARG, ARGOPT, TRLBAR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_splitview',
  },
  {
    command = 'swapname',
    short_command = 'sw',
    desc = [[show the name of the current swap file]],
    flags = bit.bor(TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_swapname',
  },
  {
    command = 'syntax',
    short_command = 'sy',
    desc = [[syntax highlighting]],
    flags = bit.bor(EXTRA, NOTRLCOM, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_syntax',
  },
  {
    command = 'syntime',
    short_command = 'synti',
    desc = [[measure syntax highlighting speed]],
    flags = bit.bor(NEEDARG, WORD1, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_syntime',
  },
  {
    command = 'syncbind',
    short_command = 'sync',
    desc = [[sync scroll binding]],
    flags = bit.bor(TRLBAR),
    addr_type = 'ADDR_NONE',
    func = 'ex_syncbind',
  },
  {
    command = 't',
    short_command = 't',
    desc = [[same as ":copy"]],
    flags = bit.bor(RANGE, WHOLEFOLD, EXTRA, TRLBAR, CMDWIN, LOCK_OK, MODIFY),
    addr_type = 'ADDR_LINES',
    func = 'ex_copymove',
  },
  {
    command = 'tcd',
    short_command = 'tc',
    desc = [[change directory for tab page]],
    flags = bit.bor(BANG, FILE1, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_cd',
  },
  {
    command = 'tchdir',
    short_command = 'tch',
    desc = [[change directory for tab page]],
    flags = bit.bor(BANG, FILE1, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_cd',
  },
  {
    command = 'tNext',
    short_command = 'tN',
    desc = [[jump to previous matching tag]],
    flags = bit.bor(RANGE, BANG, TRLBAR, ZEROR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_tag',
  },
  {
    command = 'tag',
    short_command = 'ta',
    desc = [[jump to tag]],
    flags = bit.bor(RANGE, BANG, WORD1, TRLBAR, ZEROR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_tag',
  },
  {
    command = 'tags',
    short_command = 'tags',
    desc = [[show the contents of the tag stack]],
    flags = bit.bor(TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'do_tags',
  },
  {
    command = 'tab',
    short_command = 'tab',
    desc = [[create new tab when opening new window]],
    flags = bit.bor(NEEDARG, EXTRA, NOTRLCOM),
    addr_type = 'ADDR_NONE',
    func = 'ex_wrongmodifier',
  },
  {
    command = 'tabclose',
    short_command = 'tabc',
    desc = [[close current tab page]],
    flags = bit.bor(BANG, RANGE, ZEROR, EXTRA, NOSPC, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_TABS',
    func = 'ex_tabclose',
  },
  {
    command = 'tabdo',
    short_command = 'tabdo',
    desc = [[execute command in each tab page]],
    flags = bit.bor(NEEDARG, EXTRA, NOTRLCOM, RANGE, DFLALL),
    addr_type = 'ADDR_TABS',
    func = 'ex_listdo',
  },
  {
    command = 'tabedit',
    short_command = 'tabe',
    desc = [[edit a file in a new tab page]],
    flags = bit.bor(BANG, FILE1, RANGE, ZEROR, CMDARG, ARGOPT, TRLBAR),
    addr_type = 'ADDR_TABS',
    func = 'ex_splitview',
  },
  {
    command = 'tabfind',
    short_command = 'tabf',
    desc = [[find file in 'path', edit it in a new tab page]],
    flags = bit.bor(BANG, FILE1, RANGE, ZEROR, CMDARG, ARGOPT, NEEDARG, TRLBAR),
    addr_type = 'ADDR_TABS',
    func = 'ex_splitview',
  },
  {
    command = 'tabfirst',
    short_command = 'tabfir',
    desc = [[go to first tab page]],
    flags = bit.bor(TRLBAR),
    addr_type = 'ADDR_NONE',
    func = 'ex_tabnext',
  },
  {
    command = 'tabmove',
    short_command = 'tabm',
    desc = [[move tab page to other position]],
    flags = bit.bor(RANGE, ZEROR, EXTRA, NOSPC, TRLBAR),
    addr_type = 'ADDR_TABS',
    func = 'ex_tabmove',
  },
  {
    command = 'tablast',
    short_command = 'tabl',
    desc = [[go to last tab page]],
    flags = bit.bor(TRLBAR),
    addr_type = 'ADDR_NONE',
    func = 'ex_tabnext',
  },
  {
    command = 'tabnext',
    short_command = 'tabn',
    desc = [[go to next tab page]],
    flags = bit.bor(RANGE, ZEROR, EXTRA, NOSPC, TRLBAR),
    addr_type = 'ADDR_TABS',
    func = 'ex_tabnext',
  },
  {
    command = 'tabnew',
    short_command = 'tabnew',
    desc = [[edit a file in a new tab page]],
    flags = bit.bor(BANG, FILE1, RANGE, ZEROR, CMDARG, ARGOPT, TRLBAR),
    addr_type = 'ADDR_TABS',
    func = 'ex_splitview',
  },
  {
    command = 'tabonly',
    short_command = 'tabo',
    desc = [[close all tab pages except the current one]],
    flags = bit.bor(BANG, RANGE, ZEROR, EXTRA, NOSPC, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_TABS',
    func = 'ex_tabonly',
  },
  {
    command = 'tabprevious',
    short_command = 'tabp',
    desc = [[go to previous tab page]],
    flags = bit.bor(RANGE, ZEROR, EXTRA, NOSPC, TRLBAR),
    addr_type = 'ADDR_TABS_RELATIVE',
    func = 'ex_tabnext',
  },
  {
    command = 'tabNext',
    short_command = 'tabN',
    desc = [[go to previous tab page]],
    flags = bit.bor(RANGE, ZEROR, EXTRA, NOSPC, TRLBAR),
    addr_type = 'ADDR_TABS_RELATIVE',
    func = 'ex_tabnext',
  },
  {
    command = 'tabrewind',
    short_command = 'tabr',
    desc = [[go to first tab page]],
    flags = bit.bor(TRLBAR),
    addr_type = 'ADDR_NONE',
    func = 'ex_tabnext',
  },
  {
    command = 'tabs',
    short_command = 'tabs',
    desc = [[list the tab pages and what they contain]],
    flags = bit.bor(TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_tabs',
  },
  {
    command = 'tcl',
    short_command = 'tcl',
    desc = [[execute Tcl command]],
    flags = bit.bor(RANGE, EXTRA, NEEDARG, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_LINES',
    func = 'ex_script_ni',
    removed = true,
  },
  {
    command = 'tcldo',
    short_command = 'tcld',
    desc = [[execute Tcl command for each line]],
    flags = bit.bor(RANGE, DFLALL, EXTRA, NEEDARG, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_LINES',
    func = 'ex_ni',
    removed = true,
  },
  {
    command = 'tclfile',
    short_command = 'tclf',
    desc = [[execute Tcl script file]],
    flags = bit.bor(RANGE, FILE1, NEEDARG, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_LINES',
    func = 'ex_ni',
    removed = true,
  },
  {
    command = 'terminal',
    short_command = 'te',
    desc = [[open a terminal buffer]],
    flags = bit.bor(BANG, FILES, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_terminal',
  },
  {
    command = 'tfirst',
    short_command = 'tf',
    desc = [[jump to first matching tag]],
    flags = bit.bor(RANGE, BANG, TRLBAR, ZEROR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_tag',
  },
  {
    command = 'throw',
    short_command = 'th',
    desc = [[throw an exception]],
    flags = bit.bor(EXTRA, NEEDARG, SBOXOK, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_throw',
  },
  {
    command = 'tjump',
    short_command = 'tj',
    desc = [[like ":tselect", but jump directly when there is only one match]],
    flags = bit.bor(BANG, TRLBAR, WORD1),
    addr_type = 'ADDR_NONE',
    func = 'ex_tag',
  },
  {
    command = 'tlast',
    short_command = 'tl',
    desc = [[jump to last matching tag]],
    flags = bit.bor(BANG, TRLBAR),
    addr_type = 'ADDR_NONE',
    func = 'ex_tag',
  },
  {
    command = 'tlmenu',
    short_command = 'tlm',
    desc = [[add menu for |Terminal-mode|]],
    flags = bit.bor(RANGE, ZEROR, EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_OTHER',
    func = 'ex_menu',
  },
  {
    command = 'tlnoremenu',
    short_command = 'tln',
    desc = [[like ":noremenu" but for |Terminal-mode|]],
    flags = bit.bor(RANGE, ZEROR, EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_OTHER',
    func = 'ex_menu',
  },
  {
    command = 'tlunmenu',
    short_command = 'tlu',
    desc = [[remove menu for |Terminal-mode|]],
    flags = bit.bor(RANGE, ZEROR, EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_OTHER',
    func = 'ex_menu',
  },
  {
    command = 'tmenu',
    short_command = 'tm',
    desc = [[define menu tooltip]],
    flags = bit.bor(RANGE, ZEROR, EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_OTHER',
    func = 'ex_menu',
  },
  {
    command = 'tmap',
    short_command = 'tma',
    desc = [[like ":map" but for |Terminal-mode|]],
    flags = bit.bor(EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_map',
  },
  {
    command = 'tmapclear',
    short_command = 'tmapc',
    desc = [[remove all mappings for |Terminal-mode|]],
    flags = bit.bor(EXTRA, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_mapclear',
  },
  {
    command = 'tnext',
    short_command = 'tn',
    desc = [[jump to next matching tag]],
    flags = bit.bor(RANGE, BANG, TRLBAR, ZEROR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_tag',
  },
  {
    command = 'tnoremap',
    short_command = 'tno',
    desc = [[like ":noremap" but for |Terminal-mode|]],
    flags = bit.bor(EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_map',
  },
  {
    command = 'topleft',
    short_command = 'to',
    desc = [[make split window appear at top or far left]],
    flags = bit.bor(NEEDARG, EXTRA, NOTRLCOM),
    addr_type = 'ADDR_NONE',
    func = 'ex_wrongmodifier',
  },
  {
    command = 'tprevious',
    short_command = 'tp',
    desc = [[jump to previous matching tag]],
    flags = bit.bor(RANGE, BANG, TRLBAR, ZEROR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_tag',
  },
  {
    command = 'trewind',
    short_command = 'tr',
    desc = [[jump to first matching tag]],
    flags = bit.bor(RANGE, BANG, TRLBAR, ZEROR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_tag',
  },
  {
    command = 'trust',
    short_command = 'trust',
    desc = [[add or remove file from trust database]],
    flags = bit.bor(EXTRA, FILE1, TRLBAR, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_trust',
  },
  {
    command = 'try',
    short_command = 'try',
    desc = [[execute commands, abort on error or exception]],
    flags = bit.bor(TRLBAR, SBOXOK, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_try',
  },
  {
    command = 'tselect',
    short_command = 'ts',
    desc = [[list matching tags and select one]],
    flags = bit.bor(BANG, TRLBAR, WORD1),
    addr_type = 'ADDR_NONE',
    func = 'ex_tag',
  },
  {
    command = 'tunmenu',
    short_command = 'tu',
    desc = [[remove menu tooltip]],
    flags = bit.bor(EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_menu',
  },
  {
    command = 'tunmap',
    short_command = 'tunma',
    desc = [[like ":unmap" but for |Terminal-mode|]],
    flags = bit.bor(EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_unmap',
  },
  {
    command = 'undo',
    short_command = 'u',
    desc = [[undo last change(s)]],
    flags = bit.bor(BANG, RANGE, COUNT, ZEROR, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_OTHER',
    func = 'ex_undo',
  },
  {
    command = 'undojoin',
    short_command = 'undoj',
    desc = [[join next change with previous undo block]],
    flags = bit.bor(TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_undojoin',
  },
  {
    command = 'undolist',
    short_command = 'undol',
    desc = [[list leafs of the undo tree]],
    flags = bit.bor(TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_undolist',
  },
  {
    command = 'unabbreviate',
    short_command = 'una',
    desc = [[remove abbreviation]],
    flags = bit.bor(EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_abbreviate',
  },
  {
    command = 'unhide',
    short_command = 'unh',
    desc = [[open a window for each loaded file in the buffer list]],
    flags = bit.bor(RANGE, COUNT, TRLBAR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_buffer_all',
  },
  {
    command = 'unlet',
    short_command = 'unl',
    desc = [[delete variable]],
    flags = bit.bor(BANG, EXTRA, NEEDARG, SBOXOK, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_unlet',
  },
  {
    command = 'unlockvar',
    short_command = 'unlo',
    desc = [[unlock variables]],
    flags = bit.bor(BANG, EXTRA, NEEDARG, SBOXOK, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_lockvar',
  },
  {
    command = 'unmap',
    short_command = 'unm',
    desc = [[remove mapping]],
    flags = bit.bor(BANG, EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_unmap',
  },
  {
    command = 'unmenu',
    short_command = 'unme',
    desc = [[remove menu]],
    flags = bit.bor(BANG, EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_menu',
  },
  {
    command = 'unsilent',
    short_command = 'uns',
    desc = [[run a command not silently]],
    flags = bit.bor(NEEDARG, EXTRA, NOTRLCOM, SBOXOK, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_wrongmodifier',
  },
  {
    command = 'update',
    short_command = 'up',
    desc = [[write buffer if modified]],
    flags = bit.bor(RANGE, WHOLEFOLD, BANG, FILE1, ARGOPT, DFLALL, TRLBAR),
    addr_type = 'ADDR_LINES',
    func = 'ex_update',
  },
  {
    command = 'vglobal',
    short_command = 'v',
    desc = [[execute commands for not matching lines]],
    flags = bit.bor(RANGE, WHOLEFOLD, EXTRA, DFLALL, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_LINES',
    func = 'ex_global',
  },
  {
    command = 'version',
    short_command = 've',
    desc = [[print version number and other info]],
    flags = bit.bor(EXTRA, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_version',
  },
  {
    command = 'verbose',
    short_command = 'verb',
    desc = [[execute command with 'verbose' set]],
    flags = bit.bor(NEEDARG, RANGE, EXTRA, NOTRLCOM, SBOXOK, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_OTHER',
    func = 'ex_wrongmodifier',
  },
  {
    command = 'vertical',
    short_command = 'vert',
    desc = [[make following command split vertically]],
    flags = bit.bor(NEEDARG, EXTRA, NOTRLCOM),
    addr_type = 'ADDR_NONE',
    func = 'ex_wrongmodifier',
  },
  {
    command = 'visual',
    short_command = 'vi',
    desc = [[same as ":edit", but turns off "Ex" mode]],
    flags = bit.bor(BANG, FILE1, CMDARG, ARGOPT, TRLBAR),
    addr_type = 'ADDR_NONE',
    func = 'ex_edit',
  },
  {
    command = 'view',
    short_command = 'vie',
    desc = [[edit a file read-only]],
    flags = bit.bor(BANG, FILE1, CMDARG, ARGOPT, TRLBAR),
    addr_type = 'ADDR_NONE',
    func = 'ex_edit',
  },
  {
    command = 'vimgrep',
    short_command = 'vim',
    desc = [[search for pattern in files]],
    flags = bit.bor(RANGE, BANG, NEEDARG, EXTRA, NOTRLCOM, TRLBAR, XFILE, LOCK_OK),
    addr_type = 'ADDR_OTHER',
    func = 'ex_vimgrep',
  },
  {
    command = 'vimgrepadd',
    short_command = 'vimgrepa',
    desc = [[like :vimgrep, but append to current list]],
    flags = bit.bor(RANGE, BANG, NEEDARG, EXTRA, NOTRLCOM, TRLBAR, XFILE, LOCK_OK),
    addr_type = 'ADDR_OTHER',
    func = 'ex_vimgrep',
  },
  {
    command = 'viusage',
    short_command = 'viu',
    desc = [[overview of Normal mode commands]],
    flags = bit.bor(TRLBAR),
    addr_type = 'ADDR_NONE',
    func = 'ex_viusage',
  },
  {
    command = 'vmap',
    short_command = 'vm',
    desc = [[like ":map" but for Visual+Select mode]],
    flags = bit.bor(EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_map',
  },
  {
    command = 'vmapclear',
    short_command = 'vmapc',
    desc = [[remove all mappings for Visual+Select mode]],
    flags = bit.bor(EXTRA, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_mapclear',
  },
  {
    command = 'vmenu',
    short_command = 'vme',
    desc = [[add menu for Visual+Select mode]],
    flags = bit.bor(RANGE, ZEROR, EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_OTHER',
    func = 'ex_menu',
  },
  {
    command = 'vnoremap',
    short_command = 'vn',
    desc = [[like ":noremap" but for Visual+Select mode]],
    flags = bit.bor(EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_map',
  },
  {
    command = 'vnew',
    short_command = 'vne',
    desc = [[create a new empty window, vertically split]],
    flags = bit.bor(BANG, FILE1, RANGE, CMDARG, ARGOPT, TRLBAR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_splitview',
  },
  {
    command = 'vnoremenu',
    short_command = 'vnoreme',
    desc = [[like ":noremenu" but for Visual+Select mode]],
    flags = bit.bor(RANGE, ZEROR, EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_OTHER',
    func = 'ex_menu',
  },
  {
    command = 'vsplit',
    short_command = 'vs',
    desc = [[split current window vertically]],
    flags = bit.bor(BANG, FILE1, RANGE, CMDARG, ARGOPT, TRLBAR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_splitview',
  },
  {
    command = 'vunmap',
    short_command = 'vu',
    desc = [[like ":unmap" but for Visual+Select mode]],
    flags = bit.bor(EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_unmap',
  },
  {
    command = 'vunmenu',
    short_command = 'vunme',
    desc = [[remove menu for Visual+Select mode]],
    flags = bit.bor(EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_menu',
  },
  {
    command = 'write',
    short_command = 'w',
    desc = [[write to a file]],
    flags = bit.bor(RANGE, WHOLEFOLD, BANG, FILE1, ARGOPT, DFLALL, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_LINES',
    func = 'ex_write',
  },
  {
    command = 'wNext',
    short_command = 'wN',
    desc = [[write to a file and go to previous file in argument list]],
    flags = bit.bor(RANGE, WHOLEFOLD, BANG, FILE1, ARGOPT, TRLBAR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_wnext',
  },
  {
    command = 'wall',
    short_command = 'wa',
    desc = [[write all (changed) buffers]],
    flags = bit.bor(BANG, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'do_wqall',
  },
  {
    command = 'while',
    short_command = 'wh',
    desc = [[execute loop for as long as condition met]],
    flags = bit.bor(EXTRA, NOTRLCOM, SBOXOK, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_while',
  },
  {
    command = 'winsize',
    short_command = 'wi',
    desc = [[get or set window size (obsolete)]],
    flags = bit.bor(EXTRA, NEEDARG, TRLBAR),
    addr_type = 'ADDR_NONE',
    func = 'ex_winsize',
  },
  {
    command = 'wincmd',
    short_command = 'winc',
    desc = [[execute a Window (CTRL-W) command]],
    flags = bit.bor(NEEDARG, WORD1, RANGE, COUNT, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_OTHER',
    func = 'ex_wincmd',
  },
  {
    command = 'windo',
    short_command = 'windo',
    desc = [[execute command in each window]],
    flags = bit.bor(NEEDARG, EXTRA, NOTRLCOM, RANGE, DFLALL),
    addr_type = 'ADDR_WINDOWS',
    func = 'ex_listdo',
  },
  {
    command = 'winpos',
    short_command = 'winp',
    desc = [[get or set window position]],
    flags = bit.bor(EXTRA, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_ni',
  },
  {
    command = 'wnext',
    short_command = 'wn',
    desc = [[write to a file and go to next file in argument list]],
    flags = bit.bor(RANGE, BANG, FILE1, ARGOPT, TRLBAR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_wnext',
  },
  {
    command = 'wprevious',
    short_command = 'wp',
    desc = [[write to a file and go to previous file in argument list]],
    flags = bit.bor(RANGE, BANG, FILE1, ARGOPT, TRLBAR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_wnext',
  },
  {
    command = 'wq',
    short_command = 'wq',
    desc = [[write to a file and quit window or Vim]],
    flags = bit.bor(RANGE, WHOLEFOLD, BANG, FILE1, ARGOPT, DFLALL, TRLBAR),
    addr_type = 'ADDR_LINES',
    func = 'ex_exit',
  },
  {
    command = 'wqall',
    short_command = 'wqa',
    desc = [[write all changed buffers and quit Vim]],
    flags = bit.bor(BANG, FILE1, ARGOPT, TRLBAR),
    addr_type = 'ADDR_NONE',
    func = 'do_wqall',
  },
  {
    command = 'wshada',
    short_command = 'wsh',
    desc = [[write to ShaDa file]],
    flags = bit.bor(BANG, FILE1, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_shada',
  },
  {
    command = 'wundo',
    short_command = 'wu',
    desc = [[write undo information to a file]],
    flags = bit.bor(BANG, NEEDARG, FILE1),
    addr_type = 'ADDR_NONE',
    func = 'ex_wundo',
  },
  {
    command = 'wviminfo',
    short_command = 'wv',
    desc = [[write to viminfo file]],
    flags = bit.bor(BANG, FILE1, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_shada',
    removed = true, -- deprecated
  },
  {
    command = 'xit',
    short_command = 'x',
    desc = [[write if buffer changed and close window]],
    flags = bit.bor(RANGE, WHOLEFOLD, BANG, FILE1, ARGOPT, DFLALL, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_LINES',
    func = 'ex_exit',
  },
  {
    command = 'xall',
    short_command = 'xa',
    desc = [[same as ":wqall"]],
    flags = bit.bor(BANG, TRLBAR),
    addr_type = 'ADDR_NONE',
    func = 'do_wqall',
  },
  {
    command = 'xmap',
    short_command = 'xm',
    desc = [[like ":map" but for Visual mode]],
    flags = bit.bor(EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_map',
  },
  {
    command = 'xmapclear',
    short_command = 'xmapc',
    desc = [[remove all mappings for Visual mode]],
    flags = bit.bor(EXTRA, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_mapclear',
  },
  {
    command = 'xmenu',
    short_command = 'xme',
    desc = [[add menu for Visual mode]],
    flags = bit.bor(RANGE, ZEROR, EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_OTHER',
    func = 'ex_menu',
  },
  {
    command = 'xnoremap',
    short_command = 'xn',
    desc = [[like ":noremap" but for Visual mode]],
    flags = bit.bor(EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_map',
  },
  {
    command = 'xnoremenu',
    short_command = 'xnoreme',
    desc = [[like ":noremenu" but for Visual mode]],
    flags = bit.bor(RANGE, ZEROR, EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_OTHER',
    func = 'ex_menu',
  },
  {
    command = 'xunmap',
    short_command = 'xu',
    desc = [[like ":unmap" but for Visual mode]],
    flags = bit.bor(EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_unmap',
  },
  {
    command = 'xunmenu',
    short_command = 'xunme',
    desc = [[remove menu for Visual mode]],
    flags = bit.bor(EXTRA, TRLBAR, NOTRLCOM, CTRLV, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_NONE',
    func = 'ex_menu',
  },
  {
    command = 'yank',
    short_command = 'y',
    desc = [[yank lines into a register]],
    flags = bit.bor(RANGE, WHOLEFOLD, REGSTR, COUNT, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_LINES',
    func = 'ex_operators',
  },
  {
    command = 'z',
    short_command = 'z',
    desc = [[print some lines]],
    flags = bit.bor(RANGE, WHOLEFOLD, BANG, EXTRA, FLAGS, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_LINES',
    func = 'ex_z',
  },
  -- commands that don't start with a letter
  {
    command = '!',
    short_command = '!',
    desc = [[filter lines or execute an external command]],
    enum = 'CMD_bang',
    flags = bit.bor(RANGE, WHOLEFOLD, BANG, FILES, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_LINES',
    func = 'ex_bang',
  },
  {
    command = '#',
    short_command = '#',
    desc = [[same as ":number"]],
    enum = 'CMD_pound',
    flags = bit.bor(RANGE, WHOLEFOLD, COUNT, FLAGS, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_LINES',
    func = 'ex_print',
  },
  {
    command = '&',
    short_command = '&',
    desc = [[repeat last ":substitute"]],
    enum = 'CMD_and',
    flags = bit.bor(RANGE, WHOLEFOLD, EXTRA, CMDWIN, LOCK_OK, MODIFY),
    addr_type = 'ADDR_LINES',
    func = 'ex_substitute',
  },
  {
    command = '<',
    short_command = '<',
    desc = [[shift lines one 'shiftwidth' left]],
    enum = 'CMD_lshift',
    flags = bit.bor(RANGE, WHOLEFOLD, COUNT, FLAGS, TRLBAR, CMDWIN, LOCK_OK, MODIFY),
    addr_type = 'ADDR_LINES',
    func = 'ex_operators',
  },
  {
    command = '=',
    short_command = '=',
    desc = [[print the last line number]],
    enum = 'CMD_equal',
    flags = bit.bor(RANGE, EXTRA, DFLALL, ARGOPT, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_LINES',
    func = 'ex_equal',
  },
  {
    command = '>',
    short_command = '>',
    desc = [[shift lines one 'shiftwidth' right]],
    enum = 'CMD_rshift',
    flags = bit.bor(RANGE, WHOLEFOLD, COUNT, FLAGS, TRLBAR, CMDWIN, LOCK_OK, MODIFY),
    addr_type = 'ADDR_LINES',
    func = 'ex_operators',
  },
  {
    command = '@',
    short_command = '@',
    desc = [[execute contents of a register]],
    enum = 'CMD_at',
    flags = bit.bor(RANGE, WHOLEFOLD, EXTRA, TRLBAR, CMDWIN, LOCK_OK),
    addr_type = 'ADDR_LINES',
    func = 'ex_at',
  },
  {
    command = '~',
    short_command = '~',
    desc = [[repeat last ":substitute"]],
    enum = 'CMD_tilde',
    flags = bit.bor(RANGE, WHOLEFOLD, EXTRA, CMDWIN, LOCK_OK, MODIFY),
    addr_type = 'ADDR_LINES',
    func = 'ex_substitute',
  },
  -- commands that start with an uppercase letter
  {
    command = 'Next',
    short_command = 'N',
    desc = [[go to previous file in the argument list]],
    flags = bit.bor(EXTRA, RANGE, COUNT, BANG, CMDARG, ARGOPT, TRLBAR),
    addr_type = 'ADDR_OTHER',
    func = 'ex_previous',
  },
}

return module
