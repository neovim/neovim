-- File containing table with nv_cmds structure
local bit = require('bit')

local NONE = 0
local NCH = 0x01
local NCH_NOP = bit.bor(0x02, NCH)
local NCH_ALW = bit.bor(0x04, NCH)
local LANG = 0x08
local SS = 0x10
local SSS = 0x20
local STS = 0x40
local RL = 0x80
local KEEPREG = 0x100
local NCW = 0x200

local SEARCH_REV = 0x01
local BL_WHITE = 1
local BL_FIX = 4

local FORWARD = 1
local BACKWARD = -1

local TRUE = 1

local MSCR_DOWN = 0
local MSCR_UP = 1
local MSCR_LEFT = -1
local MSCR_RIGHT = -2

-- Keys:
--
--- @class vim.NormalCommands
--- @field char? string
--- @field func? string Name of the C function.
--- @field falgs? integer
--- @field arg? integer
local M = {}

M.nv_cmds = {
  {
    char = 'NUL',
    func = 'nv_error',
    flags = NONE,
    arg = NONE,
  },
  {
    char = 'Ctrl_A',
    func = 'nv_addsub',
    flags = NONE,
    arg = NONE,
  },
  {
    char = 'Ctrl_B',
    func = 'nv_page',
    flags = STS,
    arg = BACKWARD,
  },
  {
    char = 'Ctrl_C',
    func = 'nv_esc',
    flags = NONE,
    arg = TRUE,
  },
  {
    char = 'Ctrl_D',
    func = 'nv_halfpage',
    flags = NONE,
    arg = NONE,
  },
  {
    char = 'Ctrl_E',
    func = 'nv_scroll_line',
    flags = NONE,
    arg = TRUE,
  },
  {
    char = 'Ctrl_F',
    func = 'nv_page',
    flags = STS,
    arg = FORWARD,
  },
  {
    char = 'Ctrl_G',
    func = 'nv_ctrlg',
    flags = NONE,
    arg = NONE,
  },
  {
    char = 'Ctrl_H',
    func = 'nv_ctrlh',
    flags = NONE,
    arg = NONE,
  },
  {
    char = 'Ctrl_I',
    func = 'nv_pcmark',
    flags = NONE,
    arg = NONE,
  },
  {
    char = 'NL',
    func = 'nv_down',
    flags = NONE,
    arg = NONE,
  },
  {
    char = 'Ctrl_K',
    func = 'nv_error',
    flags = NONE,
    arg = NONE,
  },
  {
    char = 'Ctrl_L',
    func = 'nv_clear',
    flags = NONE,
    arg = NONE,
  },
  {
    char = 'CAR',
    func = 'nv_down',
    flags = NONE,
    arg = TRUE,
  },
  {
    char = 'Ctrl_N',
    func = 'nv_down',
    flags = STS,
    arg = NONE,
  },
  {
    char = 'Ctrl_O',
    func = 'nv_ctrlo',
    flags = NONE,
    arg = NONE,
  },
  {
    char = 'Ctrl_P',
    func = 'nv_up',
    flags = STS,
    arg = NONE,
  },
  {
    char = 'Ctrl_Q',
    func = 'nv_visual',
    flags = NONE,
    arg = NONE,
  },
  {
    char = 'Ctrl_R',
    func = 'nv_redo_or_register',
    flags = NONE,
    arg = NONE,
  },
  {
    char = 'Ctrl_S',
    func = 'nv_ignore',
    flags = NONE,
    arg = NONE,
  },
  {
    char = 'Ctrl_T',
    func = 'nv_tagpop',
    flags = NCW,
    arg = NONE,
  },
  {
    char = 'Ctrl_U',
    func = 'nv_halfpage',
    flags = NONE,
    arg = NONE,
  },
  {
    char = 'Ctrl_V',
    func = 'nv_visual',
    flags = NONE,
    arg = NONE,
  },
  {
    char = [['V']],
    func = 'nv_visual',
    flags = NONE,
    arg = NONE,
  },
  {
    char = [['v']],
    func = 'nv_visual',
    flags = NONE,
    arg = NONE,
  },
  {
    char = 'Ctrl_W',
    func = 'nv_window',
    flags = NONE,
    arg = NONE,
  },
  {
    char = 'Ctrl_X',
    func = 'nv_addsub',
    flags = NONE,
    arg = NONE,
  },
  {
    char = 'Ctrl_Y',
    func = 'nv_scroll_line',
    flags = NONE,
    arg = NONE,
  },
  {
    char = 'Ctrl_Z',
    func = 'nv_suspend',
    flags = NONE,
    arg = NONE,
  },
  {
    char = 'ESC',
    func = 'nv_esc',
    flags = NONE,
    arg = NONE,
  },
  {
    char = 'Ctrl_BSL',
    func = 'nv_normal',
    flags = NCH_ALW,
    arg = NONE,
  },
  {
    char = 'Ctrl_RSB',
    func = 'nv_ident',
    flags = NCW,
    arg = NONE,
  },
  {
    char = 'Ctrl_HAT',
    func = 'nv_hat',
    flags = NCW,
    arg = NONE,
  },
  {
    char = 'Ctrl__',
    func = 'nv_error',
    flags = NONE,
    arg = NONE,
  },
  {
    char = [[' ']],
    func = 'nv_right',
    flags = NONE,
    arg = NONE,
  },
  {
    char = [['!']],
    func = 'nv_operator',
    flags = NONE,
    arg = NONE,
  },
  {
    char = [['"']],
    func = 'nv_regname',
    flags = bit.bor(NCH_NOP, KEEPREG),
    arg = NONE,
  },
  {
    char = [['#']],
    func = 'nv_ident',
    flags = NONE,
    arg = NONE,
  },
  {
    char = [['$']],
    func = 'nv_dollar',
    flags = NONE,
    arg = NONE,
  },
  {
    char = [['%']],
    func = 'nv_percent',
    flags = NONE,
    arg = NONE,
  },
  {
    char = [['&']],
    func = 'nv_optrans',
    flags = NONE,
    arg = NONE,
  },
  {
    char = [['\'']],
    func = 'nv_gomark',
    flags = NCH_ALW,
    arg = TRUE,
  },
  {
    char = [['(']],
    func = 'nv_brace',
    flags = NONE,
    arg = BACKWARD,
  },
  {
    char = [[')']],
    func = 'nv_brace',
    flags = NONE,
    arg = FORWARD,
  },
  {
    char = [['*']],
    func = 'nv_ident',
    flags = NONE,
    arg = NONE,
  },
  {
    char = [['+']],
    func = 'nv_down',
    flags = NONE,
    arg = TRUE,
  },
  {
    char = [[',']],
    func = 'nv_csearch',
    flags = NONE,
    arg = TRUE,
  },
  {
    char = [['-']],
    func = 'nv_up',
    flags = NONE,
    arg = TRUE,
  },
  {
    char = [['.']],
    func = 'nv_dot',
    flags = KEEPREG,
    arg = NONE,
  },
  {
    char = [['/']],
    func = 'nv_search',
    flags = NONE,
    arg = NONE,
  },
  {
    char = [['0']],
    func = 'nv_beginline',
    flags = NONE,
    arg = NONE,
  },
  {
    char = [['1']],
    func = 'nv_ignore',
    flags = NONE,
    arg = NONE,
  },
  {
    char = [['2']],
    func = 'nv_ignore',
    flags = NONE,
    arg = NONE,
  },
  {
    char = [['3']],
    func = 'nv_ignore',
    flags = NONE,
    arg = NONE,
  },
  {
    char = [['4']],
    func = 'nv_ignore',
    flags = NONE,
    arg = NONE,
  },
  {
    char = [['5']],
    func = 'nv_ignore',
    flags = NONE,
    arg = NONE,
  },
  {
    char = [['6']],
    func = 'nv_ignore',
    flags = NONE,
    arg = NONE,
  },
  {
    char = [['7']],
    func = 'nv_ignore',
    flags = NONE,
    arg = NONE,
  },
  {
    char = [['8']],
    func = 'nv_ignore',
    flags = NONE,
    arg = NONE,
  },
  {
    char = [['9']],
    func = 'nv_ignore',
    flags = NONE,
    arg = NONE,
  },
  {
    char = [[':']],
    func = 'nv_colon',
    flags = NONE,
    arg = NONE,
  },
  {
    char = [[';']],
    func = 'nv_csearch',
    flags = NONE,
    arg = NONE,
  },
  {
    char = [['<']],
    func = 'nv_operator',
    flags = RL,
    arg = NONE,
  },
  {
    char = [['=']],
    func = 'nv_operator',
    flags = NONE,
    arg = NONE,
  },
  {
    char = [['>']],
    func = 'nv_operator',
    flags = RL,
    arg = NONE,
  },
  {
    char = [['?']],
    func = 'nv_search',
    flags = NONE,
    arg = NONE,
  },
  {
    char = [['@']],
    func = 'nv_at',
    flags = NCH_NOP,
    arg = NONE,
  },
  {
    char = [['A']],
    func = 'nv_edit',
    flags = NONE,
    arg = NONE,
  },
  {
    char = [['B']],
    func = 'nv_bck_word',
    flags = NONE,
    arg = 1,
  },
  {
    char = [['C']],
    func = 'nv_abbrev',
    flags = KEEPREG,
    arg = NONE,
  },
  {
    char = [['D']],
    func = 'nv_abbrev',
    flags = KEEPREG,
    arg = NONE,
  },
  {
    char = [['E']],
    func = 'nv_wordcmd',
    flags = NONE,
    arg = TRUE,
  },
  {
    char = [['F']],
    func = 'nv_csearch',
    flags = bit.bor(NCH_ALW, LANG),
    arg = BACKWARD,
  },
  {
    char = [['G']],
    func = 'nv_goto',
    flags = NONE,
    arg = TRUE,
  },
  {
    char = [['H']],
    func = 'nv_scroll',
    flags = NONE,
    arg = NONE,
  },
  {
    char = [['I']],
    func = 'nv_edit',
    flags = NONE,
    arg = NONE,
  },
  {
    char = [['J']],
    func = 'nv_join',
    flags = NONE,
    arg = NONE,
  },
  {
    char = [['K']],
    func = 'nv_ident',
    flags = NONE,
    arg = NONE,
  },
  {
    char = [['L']],
    func = 'nv_scroll',
    flags = NONE,
    arg = NONE,
  },
  {
    char = [['M']],
    func = 'nv_scroll',
    flags = NONE,
    arg = NONE,
  },
  {
    char = [['N']],
    func = 'nv_next',
    flags = NONE,
    arg = SEARCH_REV,
  },
  {
    char = [['O']],
    func = 'nv_open',
    flags = NONE,
    arg = NONE,
  },
  {
    char = [['P']],
    func = 'nv_put',
    flags = NONE,
    arg = NONE,
  },
  {
    char = [['Q']],
    func = 'nv_regreplay',
    flags = NONE,
    arg = NONE,
  },
  {
    char = [['R']],
    func = 'nv_Replace',
    flags = NONE,
    arg = NONE,
  },
  {
    char = [['S']],
    func = 'nv_subst',
    flags = KEEPREG,
    arg = NONE,
  },
  {
    char = [['T']],
    func = 'nv_csearch',
    flags = bit.bor(NCH_ALW, LANG),
    arg = BACKWARD,
  },
  {
    char = [['U']],
    func = 'nv_Undo',
    flags = NONE,
    arg = NONE,
  },
  {
    char = [['W']],
    func = 'nv_wordcmd',
    flags = NONE,
    arg = TRUE,
  },
  {
    char = [['X']],
    func = 'nv_abbrev',
    flags = KEEPREG,
    arg = NONE,
  },
  {
    char = [['Y']],
    func = 'nv_abbrev',
    flags = KEEPREG,
    arg = NONE,
  },
  {
    char = [['Z']],
    func = 'nv_Zet',
    flags = bit.bor(NCH_NOP, NCW),
    arg = NONE,
  },
  {
    char = [['[']],
    func = 'nv_brackets',
    flags = NCH_ALW,
    arg = BACKWARD,
  },
  {
    char = [['\\']],
    func = 'nv_error',
    flags = NONE,
    arg = NONE,
  },
  {
    char = [[']']],
    func = 'nv_brackets',
    flags = NCH_ALW,
    arg = FORWARD,
  },
  {
    char = [['^']],
    func = 'nv_beginline',
    flags = NONE,
    arg = bit.bor(BL_WHITE, BL_FIX),
  },
  {
    char = [['_']],
    func = 'nv_lineop',
    flags = NONE,
    arg = NONE,
  },
  {
    char = [['`']],
    func = 'nv_gomark',
    flags = NCH_ALW,
    arg = NONE,
  },
  {
    char = [['a']],
    func = 'nv_edit',
    flags = NCH,
    arg = NONE,
  },
  {
    char = [['b']],
    func = 'nv_bck_word',
    flags = NONE,
    arg = NONE,
  },
  {
    char = [['c']],
    func = 'nv_operator',
    flags = NONE,
    arg = NONE,
  },
  {
    char = [['d']],
    func = 'nv_operator',
    flags = NONE,
    arg = NONE,
  },
  {
    char = [['e']],
    func = 'nv_wordcmd',
    flags = NONE,
    arg = NONE,
  },
  {
    char = [['f']],
    func = 'nv_csearch',
    flags = bit.bor(NCH_ALW, LANG),
    arg = FORWARD,
  },
  {
    char = [['g']],
    func = 'nv_g_cmd',
    flags = NCH_ALW,
    arg = NONE,
  },
  {
    char = [['h']],
    func = 'nv_left',
    flags = RL,
    arg = NONE,
  },
  {
    char = [['i']],
    func = 'nv_edit',
    flags = NCH,
    arg = NONE,
  },
  {
    char = [['j']],
    func = 'nv_down',
    flags = NONE,
    arg = NONE,
  },
  {
    char = [['k']],
    func = 'nv_up',
    flags = NONE,
    arg = NONE,
  },
  {
    char = [['l']],
    func = 'nv_right',
    flags = RL,
    arg = NONE,
  },
  {
    char = [['m']],
    func = 'nv_mark',
    flags = NCH_NOP,
    arg = NONE,
  },
  {
    char = [['n']],
    func = 'nv_next',
    flags = NONE,
    arg = NONE,
  },
  {
    char = [['o']],
    func = 'nv_open',
    flags = NONE,
    arg = NONE,
  },
  {
    char = [['p']],
    func = 'nv_put',
    flags = NONE,
    arg = NONE,
  },
  {
    char = [['q']],
    func = 'nv_record',
    flags = NCH,
    arg = NONE,
  },
  {
    char = [['r']],
    func = 'nv_replace',
    flags = bit.bor(NCH_NOP, LANG),
    arg = NONE,
  },
  {
    char = [['s']],
    func = 'nv_subst',
    flags = KEEPREG,
    arg = NONE,
  },
  {
    char = [['t']],
    func = 'nv_csearch',
    flags = bit.bor(NCH_ALW, LANG),
    arg = FORWARD,
  },
  {
    char = [['u']],
    func = 'nv_undo',
    flags = NONE,
    arg = NONE,
  },
  {
    char = [['w']],
    func = 'nv_wordcmd',
    flags = NONE,
    arg = NONE,
  },
  {
    char = [['x']],
    func = 'nv_abbrev',
    flags = KEEPREG,
    arg = NONE,
  },
  {
    char = [['y']],
    func = 'nv_operator',
    flags = NONE,
    arg = NONE,
  },
  {
    char = [['z']],
    func = 'nv_zet',
    flags = NCH_ALW,
    arg = NONE,
  },
  {
    char = [['{']],
    func = 'nv_findpar',
    flags = NONE,
    arg = BACKWARD,
  },
  {
    char = [['|']],
    func = 'nv_pipe',
    flags = NONE,
    arg = NONE,
  },
  {
    char = [['}']],
    func = 'nv_findpar',
    flags = NONE,
    arg = FORWARD,
  },
  {
    char = [['~']],
    func = 'nv_tilde',
    flags = NONE,
    arg = NONE,
  },
  -- pound sign
  {
    char = 'POUND',
    func = 'nv_ident',
    flags = NONE,
    arg = NONE,
  },
  {
    char = 'K_MOUSEUP',
    func = 'nv_mousescroll',
    flags = NONE,
    arg = MSCR_UP,
  },
  {
    char = 'K_MOUSEDOWN',
    func = 'nv_mousescroll',
    flags = NONE,
    arg = MSCR_DOWN,
  },
  {
    char = 'K_MOUSELEFT',
    func = 'nv_mousescroll',
    flags = NONE,
    arg = MSCR_LEFT,
  },
  {
    char = 'K_MOUSERIGHT',
    func = 'nv_mousescroll',
    flags = NONE,
    arg = MSCR_RIGHT,
  },
  {
    char = 'K_LEFTMOUSE',
    func = 'nv_mouse',
    flags = NONE,
    arg = NONE,
  },
  {
    char = 'K_LEFTMOUSE_NM',
    func = 'nv_mouse',
    flags = NONE,
    arg = NONE,
  },
  {
    char = 'K_LEFTDRAG',
    func = 'nv_mouse',
    flags = NONE,
    arg = NONE,
  },
  {
    char = 'K_LEFTRELEASE',
    func = 'nv_mouse',
    flags = NONE,
    arg = NONE,
  },
  {
    char = 'K_LEFTRELEASE_NM',
    func = 'nv_mouse',
    flags = NONE,
    arg = NONE,
  },
  {
    char = 'K_MOUSEMOVE',
    func = 'nv_mouse',
    flags = NONE,
    arg = NONE,
  },
  {
    char = 'K_MIDDLEMOUSE',
    func = 'nv_mouse',
    flags = NONE,
    arg = NONE,
  },
  {
    char = 'K_MIDDLEDRAG',
    func = 'nv_mouse',
    flags = NONE,
    arg = NONE,
  },
  {
    char = 'K_MIDDLERELEASE',
    func = 'nv_mouse',
    flags = NONE,
    arg = NONE,
  },
  {
    char = 'K_RIGHTMOUSE',
    func = 'nv_mouse',
    flags = NONE,
    arg = NONE,
  },
  {
    char = 'K_RIGHTDRAG',
    func = 'nv_mouse',
    flags = NONE,
    arg = NONE,
  },
  {
    char = 'K_RIGHTRELEASE',
    func = 'nv_mouse',
    flags = NONE,
    arg = NONE,
  },
  {
    char = 'K_X1MOUSE',
    func = 'nv_mouse',
    flags = NONE,
    arg = NONE,
  },
  {
    char = 'K_X1DRAG',
    func = 'nv_mouse',
    flags = NONE,
    arg = NONE,
  },
  {
    char = 'K_X1RELEASE',
    func = 'nv_mouse',
    flags = NONE,
    arg = NONE,
  },
  {
    char = 'K_X2MOUSE',
    func = 'nv_mouse',
    flags = NONE,
    arg = NONE,
  },
  {
    char = 'K_X2DRAG',
    func = 'nv_mouse',
    flags = NONE,
    arg = NONE,
  },
  {
    char = 'K_X2RELEASE',
    func = 'nv_mouse',
    flags = NONE,
    arg = NONE,
  },
  {
    char = 'K_IGNORE',
    func = 'nv_ignore',
    flags = KEEPREG,
    arg = NONE,
  },
  {
    char = 'K_NOP',
    func = 'nv_nop',
    flags = NONE,
    arg = NONE,
  },
  {
    char = 'K_INS',
    func = 'nv_edit',
    flags = NONE,
    arg = NONE,
  },
  {
    char = 'K_KINS',
    func = 'nv_edit',
    flags = NONE,
    arg = NONE,
  },
  {
    char = 'K_BS',
    func = 'nv_ctrlh',
    flags = NONE,
    arg = NONE,
  },
  {
    char = 'K_UP',
    func = 'nv_up',
    flags = bit.bor(SSS, STS),
    arg = NONE,
  },
  {
    char = 'K_S_UP',
    func = 'nv_page',
    flags = SS,
    arg = BACKWARD,
  },
  {
    char = 'K_DOWN',
    func = 'nv_down',
    flags = bit.bor(SSS, STS),
    arg = NONE,
  },
  {
    char = 'K_S_DOWN',
    func = 'nv_page',
    flags = SS,
    arg = FORWARD,
  },
  {
    char = 'K_LEFT',
    func = 'nv_left',
    flags = bit.bor(SSS, STS, RL),
    arg = NONE,
  },
  {
    char = 'K_S_LEFT',
    func = 'nv_bck_word',
    flags = bit.bor(SS, RL),
    arg = NONE,
  },
  {
    char = 'K_C_LEFT',
    func = 'nv_bck_word',
    flags = bit.bor(SSS, RL, STS),
    arg = TRUE,
  },
  {
    char = 'K_RIGHT',
    func = 'nv_right',
    flags = bit.bor(SSS, STS, RL),
    arg = NONE,
  },
  {
    char = 'K_S_RIGHT',
    func = 'nv_wordcmd',
    flags = bit.bor(SS, RL),
    arg = NONE,
  },
  {
    char = 'K_C_RIGHT',
    func = 'nv_wordcmd',
    flags = bit.bor(SSS, RL, STS),
    arg = TRUE,
  },
  {
    char = 'K_PAGEUP',
    func = 'nv_page',
    flags = bit.bor(SSS, STS),
    arg = BACKWARD,
  },
  {
    char = 'K_KPAGEUP',
    func = 'nv_page',
    flags = bit.bor(SSS, STS),
    arg = BACKWARD,
  },
  {
    char = 'K_PAGEDOWN',
    func = 'nv_page',
    flags = bit.bor(SSS, STS),
    arg = FORWARD,
  },
  {
    char = 'K_KPAGEDOWN',
    func = 'nv_page',
    flags = bit.bor(SSS, STS),
    arg = FORWARD,
  },
  {
    char = 'K_END',
    func = 'nv_end',
    flags = bit.bor(SSS, STS),
    arg = NONE,
  },
  {
    char = 'K_KEND',
    func = 'nv_end',
    flags = bit.bor(SSS, STS),
    arg = NONE,
  },
  {
    char = 'K_S_END',
    func = 'nv_end',
    flags = SS,
    arg = NONE,
  },
  {
    char = 'K_C_END',
    func = 'nv_end',
    flags = bit.bor(SSS, STS),
    arg = TRUE,
  },
  {
    char = 'K_HOME',
    func = 'nv_home',
    flags = bit.bor(SSS, STS),
    arg = NONE,
  },
  {
    char = 'K_KHOME',
    func = 'nv_home',
    flags = bit.bor(SSS, STS),
    arg = NONE,
  },
  {
    char = 'K_S_HOME',
    func = 'nv_home',
    flags = SS,
    arg = NONE,
  },
  {
    char = 'K_C_HOME',
    func = 'nv_goto',
    flags = bit.bor(SSS, STS),
    arg = NONE,
  },
  {
    char = 'K_DEL',
    func = 'nv_abbrev',
    flags = NONE,
    arg = NONE,
  },
  {
    char = 'K_KDEL',
    func = 'nv_abbrev',
    flags = NONE,
    arg = NONE,
  },
  {
    char = 'K_UNDO',
    func = 'nv_kundo',
    flags = NONE,
    arg = NONE,
  },
  {
    char = 'K_HELP',
    func = 'nv_help',
    flags = NCW,
    arg = NONE,
  },
  {
    char = 'K_F1',
    func = 'nv_help',
    flags = NCW,
    arg = NONE,
  },
  {
    char = 'K_XF1',
    func = 'nv_help',
    flags = NCW,
    arg = NONE,
  },
  {
    char = 'K_SELECT',
    func = 'nv_select',
    flags = NONE,
    arg = NONE,
  },
  {
    char = 'K_EVENT',
    func = 'nv_event',
    flags = KEEPREG,
    arg = NONE,
  },
  {
    char = 'K_COMMAND',
    func = 'nv_colon',
    flags = NONE,
    arg = NONE,
  },
  {
    char = 'K_LUA',
    func = 'nv_colon',
    flags = NONE,
    arg = NONE,
  },
}

return M
