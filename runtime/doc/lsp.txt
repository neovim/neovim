*lsp.txt* The Language Server Protocol

        NVIM REFERENCE MANUAL


Neovim Language Server Protocol (LSP) API

Neovim exposes a powerful API that conforms to Microsoft's published Language
Server Protocol specification. The documentation can be found here:

    https://microsoft.github.io/language-server-protocol/


================================================================================
                                                                  *lsp-server*

Neovim only exposes a powerful API for the language server protocol. To get
the real benefits of this API, a language server must be installed. Many
examples can be found here:

  https://microsoft.github.io/language-server-protocol/implementors/servers/

After installing a language server to your machine, you must let Neovim know
how to start and interact with that language server. To do so, use the
following APIs:

                                                             *lsp#server#add()*
lsp#server#add({ftype}, {cmd}, {configuration}):
    Used to add a language server.

    This will add an autocmd that will start the server and handle any other
    startup activities whenever the |FileType| event is triggered for {ftype}.

    Parameters:~
        {ftype}: A string or list of strings of filetypes to associate with
        this server.

        {cmd}: See |jobstart()| for information on cmd.

        {configuration} (dictionary): Optional configuration for a server.
            `name`      (string):
              The name of the server

            `callbacks` (dict):
              A dictionary of callbacks to configure the server.

              Available callbacks are:

              `root_uri`: function(server) -> string.
                This function returns a string to populate the `root_uri`
                parameter in the initialize request for a server.

                Example:~
                TODO:  Update this example
>
  " Python example
  call lsp#server#add('python', 'pyls')

  " Typescript configuration
  call lsp#server#add('typescript', {
      \ 'name': 'ts', ....
      \ 'callbacks': {
        \ 'root_uri': { server -> RootFinderFromPlugin() }
      \ }})

================================================================================
                                                                  *lsp-request*
Requests

To make a request of the language server client running in Nvim, the following
API is defined:
>
    :call lsp#request(method, arguments, callback, filetype)
    :call lsp#request_async(method, arguments, callback, filetype)
<

                                                                *lsp#request()*
lsp#request({method} [, {arguments} [, {callback} [, {filetype}]]])
    Creates and sends a request to the server for [filetype]. Will fill in any
    missing required arguments as defined by the language server protocol. Will
    call the default callback for the request (if it exists), unless an
    [callback] is specified, in which case that will be called upon completion
    of the request.

    Returns the request's response data.

        Parameters:~
            {method}: The name of the request, as specified by the
            language server protocol.
                Example: 'textDocument/hover'

            [arguments]: The arguments that should be passed to the language
            server. If any required keys are missing, Nvim will fill those in
            with reasonable default values.
                Example (with 'textDocument/hover'):
                    Passed in:
                        `{}` or |v:null|

                    Sent:
>
                        {
                            'textDocument': '/home/user/test/example.lua',
                            'position': { 'line': 13, 'character': 17 }
                        }
<
                Example (with 'textDocument/rename'):
                    Passed in:
>
                        {
                            'newName': 'exampleRename'
                        }
<
                    Sent:
>
                        {
                            'textDocument': '/home/user/test/rename.lua',
                            'position': { 'line': 16, 'character': 8 }
                            'newName': 'exampleRename'
                        }
<

            [callback]: An optional callback that will be executed
            once the response has been received. If this is passed and not
            |v:null|, then the |lsp-default-callback| will not be executed for
            this request. If this request does not have a
            |lsp-default-callback| and this parameter is not passed, then no
            callback will be executed upon receiving the request.

            The callback must be a string with the name of the vimscript
            function to call. The signature must be:

                `func_name({success}, {data})`

                where {success} is a boolean where true means successful request
                and false means the request failed.

                The parameter {data} is a dictionary containing the possible
                response data (or error) data as specified by the language
                server protocol.

                The callback will be executed from lua running:

                    `vim.api.nvim_call_function('func_name', { success, data })`

            [filetype]: The filetype associated with the server.
            This will default to the current |filetype| if nothing is passed.

            Configuration for the default server can be found at
            |lsp-configuration|.

                                                          *lsp#request_async()*
lsp#request_async({method} [, {arguments} [, {callback} [, {filetype}]]])
    Creates and sends a request to the server for [filetype]. This request
    will not block and will call desired the [callback] upon completion.

    Returns the request ID.

    See |lsp#request()| for more information.

    Example:

autocmd CursorHold :lua require('lsp.plugin').client.request_async('textDocument/hover', {})

================================================================================
                                                         *lsp-default-callback*

The following requests have built-in callbacks defined to handle the response
in an idiomatic vim fashion.

  textDocument/definition~
  textDocument/hover~
  textDocument/publishDiagnostics~
  textDocument/references~

================================================================================
                                                                 *lsp-autocmds*

The language server implementation in Neovim will fire |autocmd-User| events
upon each request and response so that users can attach to whenever these
events are triggered.

For the request 'textDocument/hover', the following autocmds will be fired:

    Before sending the request:
        'textDocument/hover/pre'

    After sending the request:
        'textDocument/hover/post'

    Before handling the response:
        'textDocument/hover/response'

================================================================================
                                                            *lsp-configuration*

<

                                                              *lsp-add_check()*
require('lsp.checks').add_check({request}, {cb})
    Configure when methods will be requested.
    Can be used to disable certain methods, if you want the functionality to
    be disabled in the plugin.

    Parameters:~
        {request}: The name of the request, i.e. 'textDocument/hover'

        {cb}: A callback to execute to determine if the {request} should be
        sent.

        If `false`, the {request} will never be sent.

    Example:~
        To disable `'textDocument/hover'` in all python files, you could use
        the following snippet in your |init.vim|
>

    lua << EOF
        require('lsp.checks').add_check('textDocument/hover',
            function(client, request)
                if vim.api.nvim_buf_get_option(0, 'filetype') == 'python'
                    return false
                end

                return true
            end
        )
    EOF

<
        To completely disable a message request, you can simply pass
        `false` as the callback.

>
    :lua require('lsp.checks').add_check('textDocument/hover', false)
<


lsp#configure#file_log_level({level})
    Configure the level of logging to a file.

================================================================================
                                                               *lsp-completion*

To configure completion for a language server, add the following in your
init.vim

>
  augroup MyLanguageServer
    au!
    autocmd Filetype python inoremap <buffer> <c-n> <c-r>=lsp#completion#complete()<CR>
  augroup END
<

================================================================================
                                                            *lsp-handle-request*

The callbacks used to handle the responses and requests of the language server
protocol are exposed to users of Neovim to allow them to replicate these
actions easily and idiomatically.

For example, if a plugin author wants to replicate the hover functionality of
"textDocument/hover" without wanting to maintain an implementation and cater
to various users configuration preferences, the author of the plugin may use
the Neovim's built-in LSP callbacks to perform the hovering action.

To do so, the following APIs are provided:

    In VimL, use:  >

        call lsp#handle({request}, {data})
<

                                                                 *lsp#handle()*
lsp#handle({request}, {data})
    Used to provide API access to Neovim's language server protocol
    implementation.

    Parameters:~
        {request}: The name of the request, i.e. 'textDocument/hover'

        {data}: A dictionary containing the data that would normally be in the
        response section for the particular {request}.

    Example:~
>
        " Display "Hello", "World" on two lines
        call lsp#handle('textDocument/hover', {'content': ['Hello', 'World']})
<

 vim:tw=78:ts=8:ft=help:norl:
