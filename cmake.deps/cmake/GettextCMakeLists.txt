cmake_minimum_required(VERSION 3.10)

# Can be removed once minimum version is at least 3.15
if(POLICY CMP0092)
  cmake_policy(SET CMP0092 NEW)
endif()
project(gettext C)

add_compile_options(-w)
set(CMAKE_STATIC_LINKER_FLAGS "${CMAKE_STATIC_LINKER_FLAGS} /ignore:4006")

include(CheckFunctionExists)
function(check_function_exists2)
  check_function_exists(${ARGV})
  if(NOT ${ARGV1})
    set(${ARGV1} 0 PARENT_SCOPE)
  endif()
endfunction()

# Adds PREFIX to each item in LIST
macro(PREFIX_LIST_ITEMS LIST PREFIX)
  string(REPLACE ";" ";${PREFIX}" ${LIST} ";${${LIST}}")
endmacro()

file(READ gettext-runtime/config.h.in CONFIG_CONTENT)
string(REPLACE "#undef HAVE_GETCWD" "#define HAVE_GETCWD 1" CONFIG_CONTENT ${CONFIG_CONTENT})
string(REPLACE "#undef HAVE_LONG_LONG_INT" "#define HAVE_LONG_LONG_INT 1" CONFIG_CONTENT ${CONFIG_CONTENT})
string(REPLACE "#undef HAVE_ICONV_H" "#define HAVE_ICONV_H 1" CONFIG_CONTENT ${CONFIG_CONTENT})
string(REPLACE "#undef HAVE_ICONV" "#define HAVE_ICONV 1" CONFIG_CONTENT ${CONFIG_CONTENT})
string(REPLACE "#undef ICONV_CONST" "#define ICONV_CONST const" CONFIG_CONTENT ${CONFIG_CONTENT})
string(REPLACE "#undef uintmax_t" "
  #define intmax_t long long
  #define uintmax_t unsigned long long"
  CONFIG_CONTENT ${CONFIG_CONTENT})
file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/gettext-runtime/config.h ${CONFIG_CONTENT})

set(HAVE_POSIX_PRINTF 0)
check_function_exists2(newlocale HAVE_NEWLOCALE)
check_function_exists2(snprintf HAVE_SNPRINTF)
check_function_exists2(asprintf HAVE_ASPRINTF)
check_function_exists2(wprintf HAVE_WPRINTF)
set(HAVE_NAMELESS_LOCALES 0)
set(HAVE_LONG_LONG_INT 1)
configure_file(gettext-runtime/intl/libgnuintl.in.h
  ${CMAKE_CURRENT_BINARY_DIR}/gettext-runtime/intl/libgnuintl.h)

set(LOCALDIR "gettext")
set(LIBDIR "gettext")
set(PKGDATADIR "gettext")
set(PACKAGE_SUFFIX "gettext")
add_definitions(-DLOCALEDIR=\"${LOCALDIR}\"
  -DLOCALE_ALIAS_PATH=\"${LOCALDIR}\"
  -DLIBDIR=\"${LOCALDIR}\"
  -DINSTALLDIR=\"${LOCALDIR}\"
  -DEXEEXT=\".exe\"
  -DLOCALEDIR=\"${LOCALDIR}\"
  -DLIBDIR=\"${LIBDIR}\"
  -DPACKAGE_SUFFIX=\"${PACKAGE_SUFFIX}\"
  -DGETTEXTDATADIR=\"${PKGDATADIR}\"
  -DBISON_LOCALEDIR=\"${LOCALDIR}\"
  -DHAVE_CONFIG_H)

file(GLOB libintl_SOURCES gettext-runtime/intl/*.c)
set(REMOVE_FILES os2compat.c intl-exports.c)
PREFIX_LIST_ITEMS(REMOVE_FILES "${PROJECT_SOURCE_DIR}/gettext-runtime/intl/")
list(REMOVE_ITEM libintl_SOURCES ${REMOVE_FILES})

add_library(libintl ${libintl_SOURCES})
target_link_libraries(libintl PUBLIC ${LIBICONV_LIBRARIES})
target_include_directories(libintl PRIVATE
  ${CMAKE_CURRENT_BINARY_DIR}/gettext-runtime
  ${CMAKE_CURRENT_BINARY_DIR}/gettext-runtime/intl
  ${LIBICONV_INCLUDE_DIRS})
target_compile_definitions(libintl PRIVATE
  BUILDING_LIBINTL
  IN_LIBINTL
  ENABLE_RELOCATABLE=1
  IN_LIBRARY
  NO_XMALLOC
  set_relocation_prefix=libintl_set_relocation_prefix
  relocate=libintl_relocate
  HAVE_CONFIG_H)


file(READ gettext-tools/config.h.in CONFIG_CONTENT)
string(REPLACE "#undef FLEXIBLE_ARRAY_MEMBER" "#define FLEXIBLE_ARRAY_MEMBER 1" CONFIG_CONTENT ${CONFIG_CONTENT})
string(REPLACE "__declspec (dllimport)" "" CONFIG_CONTENT ${CONFIG_CONTENT})
string(REPLACE "#undef ENDIANNESS" "#define ENDIANNESS 0" CONFIG_CONTENT ${CONFIG_CONTENT})
string(REPLACE "#undef GNULIB_FWRITEERROR" "#define GNULIB_FWRITEERROR 1" CONFIG_CONTENT ${CONFIG_CONTENT})
string(REPLACE "#undef HAVE_DECL_STRERROR_R" "#define HAVE_DECL_STRERROR_R 0" CONFIG_CONTENT ${CONFIG_CONTENT})
string(REPLACE "#undef HAVE_DUP2" "#define HAVE_DUP2 1" CONFIG_CONTENT ${CONFIG_CONTENT})
string(REPLACE "#undef HAVE_ICONV_H" "#define HAVE_ICONV_H 1" CONFIG_CONTENT ${CONFIG_CONTENT})
string(REPLACE "#undef HAVE_ICONV" "#define HAVE_ICONV 1" CONFIG_CONTENT ${CONFIG_CONTENT})
string(REPLACE "#undef HAVE_LIBUNISTRING" "#define HAVE_LIBUNISTRING 1" CONFIG_CONTENT ${CONFIG_CONTENT})
string(REPLACE "#undef HAVE_STDINT_H_WITH_UINTMAX" "#define HAVE_STDINT_H_WITH_UINTMAX 1" CONFIG_CONTENT ${CONFIG_CONTENT})
string(REPLACE "#undef HAVE_STDINT_H" "#define HAVE_STDINT_H 1" CONFIG_CONTENT ${CONFIG_CONTENT})
string(REPLACE "#undef HAVE_LONG_LONG_INT" "#define HAVE_LONG_LONG_INT 1" CONFIG_CONTENT ${CONFIG_CONTENT})
string(REPLACE "#undef HAVE_STRING_H" "#define HAVE_STRING_H 1" CONFIG_CONTENT ${CONFIG_CONTENT})
string(REPLACE "#undef HAVE_SYS_TIMEB_H" "#define HAVE_SYS_TIMEB_H 1" CONFIG_CONTENT ${CONFIG_CONTENT})
string(REPLACE "#undef HAVE__FTIME" "#define HAVE__FTIME 1" CONFIG_CONTENT ${CONFIG_CONTENT})
string(REPLACE "#undef HAVE_FLOAT_H" "#define HAVE_FLOAT_H 1" CONFIG_CONTENT ${CONFIG_CONTENT})
string(REPLACE "#undef ICONV_CONST" "#define ICONV_CONST const" CONFIG_CONTENT ${CONFIG_CONTENT})
string(REPLACE "#undef PACKAGE" "#define PACKAGE \"gettext\"\n#define gettext_VERSION" CONFIG_CONTENT ${CONFIG_CONTENT})
string(REPLACE "#undef VERSION" "#define VERSION \"\"" CONFIG_CONTENT ${CONFIG_CONTENT})
string(REPLACE "#undef mode_t" "#define mode_t int" CONFIG_CONTENT ${CONFIG_CONTENT})
string(REPLACE "#undef pid_t" "#define pid_t int" CONFIG_CONTENT ${CONFIG_CONTENT})
string(REPLACE "#undef restrict" "#define restrict __restrict" CONFIG_CONTENT ${CONFIG_CONTENT})
string(REPLACE "#undef ssize_t" "#include <BaseTsd.h>\n#define ssize_t SSIZE_T" CONFIG_CONTENT ${CONFIG_CONTENT})
string(REPLACE "#undef uid_t" "#define uid_t int" CONFIG_CONTENT ${CONFIG_CONTENT})
string(REPLACE "#undef HAVE_DECL___ARGV" "#define HAVE_DECL___ARGV 1" CONFIG_CONTENT ${CONFIG_CONTENT})
set(CONFIG_CONTENT "${CONFIG_CONTENT}\n#define isatty libtextstyle_isatty")
file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/gettext-tools/config.h.in ${CONFIG_CONTENT})
configure_file(${CMAKE_CURRENT_BINARY_DIR}/gettext-tools/config.h.in
  ${CMAKE_CURRENT_BINARY_DIR}/gettext-tools/config.h)

file(GLOB libgettextsrc_SOURCES gettext-tools/src/*.c)
set(REMOVE_FILES_TOOLS msginit.c msggrep.c msgexec.c read-java.c)
PREFIX_LIST_ITEMS(REMOVE_FILES_TOOLS "${PROJECT_SOURCE_DIR}/gettext-tools/src/")
list(REMOVE_ITEM libgettextsrc_SOURCES ${REMOVE_FILES_TOOLS})

file(GLOB LIBXML_SOURCE gettext-tools/gnulib-lib/libxml/*.c)
file(GLOB UNISTR_SOURCE gettext-tools/gnulib-lib/unistr/*.c)
file(GLOB UNILBRK_SOURCE gettext-tools/gnulib-lib/unilbrk/*.c)

set(GLIBC_SOURCE javaexec.c unsetenv.c classpath.c setenv.c xsetenv.c
  sh-quote.c execute.c javaversion.c csharpcomp.c csharpexec.c javacomp.c
  gettimeofday.c getdtablesize.c fcntl.c dup-safer-flag.c cloexec.c
  fd-safer-flag.c fd-safer.c pipe2.c pipe2-safer.c spawn-pipe.c xmemdup0.c
  secure_getenv.c tmpdir.c tempname.c mkdtemp.c fnmatch.c clean-temp.c
  wait-process.c waitpid.c getdelim.c getline.c sigprocmask.c sigaction.c
  addext.c argmatch.c backupfile.c basename.c c-strcasecmp.c c-strncasecmp.c
  c-strstr.c closeout.c concat-filename.c error-progname.c error.c exitfail.c
  fstrcmp.c full-write.c fwriteerror.c getopt.c getopt1.c hash.c
  localcharset.c malloca.c mbchar.c mbslen.c mbsstr.c mbswidth.c obstack.c
  progname.c printf-args.c printf-parse.c propername.c quotearg.c rawmemchr.c
  safe-read.c safe-write.c stpcpy.c stpncpy.c strchrnul.c striconv.c
  striconveh.c striconveha.c strnlen1.c trim.c gcd.c gl_linkedhash_list.c
  fatal-signal.c copy-file.c read-file.c ftello.c utime.c gettime.c utimens.c
  vasnprintf.c vasprintf.c wcwidth.c xasprintf.c xconcat-filename.c xerror.c
  xmalloc.c xstrdup.c xstriconv.c xstriconveh.c xvasprintf.c
  uniconv/u8-conv-from-enc.c unictype/ctype_space.c
  uniwidth/width.c uniname/uniname.c)
PREFIX_LIST_ITEMS(GLIBC_SOURCE "gettext-tools/gnulib-lib/")

list(APPEND GLIBC_SOURCE ${LIBXML_SOURCE} ${UNISTR_SOURCE} ${UNILBRK_SOURCE})

file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/gettext-tools/gnulib-lib/configmake.h "#define PKGDATADIR \"gettext\"")

file(GLOB LIBGLIB_SOURCES libtextstyle/lib/glib/*.c)

file(GLOB LIBTEXTSTYLE_SOURCE libtextstyle/lib/*.c)
file(GLOB REMOVE_FILES_STYLE libtextstyle/lib/*.oo.c)
set(REMOVE_FILES_STYLE2 log10.c snprintf.c vsnprintf.c memchr.c)
PREFIX_LIST_ITEMS(REMOVE_FILES_STYLE2 "${PROJECT_SOURCE_DIR}/libtextstyle/lib/")
list(REMOVE_ITEM LIBTEXTSTYLE_SOURCE ${REMOVE_FILES_STYLE} ${REMOVE_FILES_STYLE2})

configure_file(
  libtextstyle/lib/stdbool.mini.h
  ${CMAKE_CURRENT_BINARY_DIR}/libtextstyle/lib/textstyle/stdbool.h
  COPYONLY)

file(GLOB LIBCROCO_SOURCES libtextstyle/lib/libcroco/*.c)

macro(CONFIGURE_HEADER_FILES HEADER_TEMPLATES_PATH)
  set(HEADER_TEMPLATES_ABS_PATH "${CMAKE_CURRENT_SOURCE_DIR}/${HEADER_TEMPLATES_PATH}")
  file(GLOB_RECURSE HEADER_TEMPLATES "${HEADER_TEMPLATES_ABS_PATH}/*.in.h")
  list(REMOVE_ITEM HEADER_TEMPLATES  "${HEADER_TEMPLATES_ABS_PATH}/stdint.in.h")
  list(REMOVE_ITEM HEADER_TEMPLATES  "${HEADER_TEMPLATES_ABS_PATH}/wchar.in.h")
  foreach(HEADER_TEMPLATE ${HEADER_TEMPLATES})
    file(READ ${HEADER_TEMPLATE} HEADER_CONTENT)
    string(REPLACE "/* The definition of _GL_ARG_NONNULL is copied here.  */" "#include \"arg-nonnull.h\"" HEADER_CONTENT "${HEADER_CONTENT}")
    string(REPLACE "/* The definition of _GL_WARN_ON_USE is copied here.  */" "#include \"warn-on-use.h\"" HEADER_CONTENT "${HEADER_CONTENT}")
    string(REPLACE "/* The definitions of _GL_FUNCDECL_RPL etc. are copied here.  */" "#include \"c++defs.h\"" HEADER_CONTENT "${HEADER_CONTENT}")
    string(REPLACE "@GNULIB_LSTAT@" "1" HEADER_CONTENT "${HEADER_CONTENT}")
    string(REPLACE "@GNULIB_MBSINIT@" "1" HEADER_CONTENT "${HEADER_CONTENT}")
    string(REPLACE "@GNULIB_SIGACTION@" "1" HEADER_CONTENT "${HEADER_CONTENT}")
    string(REPLACE "@GNULIB_SIGPROCMASK@" "1" HEADER_CONTENT "${HEADER_CONTENT}")
    string(REPLACE "@GNULIB_STPCPY@" "1" HEADER_CONTENT "${HEADER_CONTENT}")
    string(REPLACE "@GNULIB_STPNCPY@" "1" HEADER_CONTENT "${HEADER_CONTENT}")
    string(REPLACE "@GNULIB_STRCHRNUL@" "1" HEADER_CONTENT "${HEADER_CONTENT}")
    string(REPLACE "@HAVE_ISWCNTRL@" "1" HEADER_CONTENT "${HEADER_CONTENT}")
    string(REPLACE "@HAVE_WCTYPE_T@" "1" HEADER_CONTENT "${HEADER_CONTENT}")
    string(REPLACE "@HAVE_STRUCT_TIMEVAL@" "1" HEADER_CONTENT "${HEADER_CONTENT}")
    string(REPLACE "@HAVE_WINSOCK2_H@" "1" HEADER_CONTENT "${HEADER_CONTENT}")
    string(REPLACE "@DLL_VARIABLE@" "" HEADER_CONTENT "${HEADER_CONTENT}")
    string(REPLACE "@HAVE_NEWLOCALE@" "0" HEADER_CONTENT "${HEADER_CONTENT}")
    string(REPLACE "@PRAGMA_COLUMNS@" "" HEADER_CONTENT "${HEADER_CONTENT}")
    string(REPLACE "#if @GNULIB_UTIME@" "#if 1\n#define utime gl_utime" HEADER_CONTENT "${HEADER_CONTENT}")
    string(REPLACE "@HAVE_UTIME@" "1" HEADER_CONTENT "${HEADER_CONTENT}")
    string(REPLACE "@HAVE_LONG_LONG_INT@" "1" HEADER_CONTENT "${HEADER_CONTENT}")

    string(REGEX REPLACE "^${HEADER_TEMPLATES_ABS_PATH}/" "" HEADER_PATH "${HEADER_TEMPLATE}")
    string(REPLACE ".in" "" HEADER_PATH ${HEADER_PATH})
    string(REPLACE "_" "/" HEADER_PATH ${HEADER_PATH})
    # find_file will create a cache entry for the variable
    # SYSTEM_HEADER, so reset it before each call
    set(SYSTEM_HEADER "SYSTEM_HEADER-NOTFOUND")
    find_file(SYSTEM_HEADER ${HEADER_PATH} PATHS "${LIBICONV_INCLUDE_DIRS}")
    if(SYSTEM_HEADER)
      # Gnulib uses #include_next to extend system header files,
      # but MSVC doesn't support it, so a regular include directive
      # with a relative path is used instead
      string(REGEX REPLACE ".*/(.*/${HEADER_PATH})" "../\\1"
        INCLUDE_PATH "${SYSTEM_HEADER}")
      string(REGEX REPLACE "@INCLUDE_NEXT[^@]*@ @NEXT_[^@\n]+@"
        "include <${INCLUDE_PATH}>" HEADER_CONTENT "${HEADER_CONTENT}")
    endif()

    # Default any remaining template variables to 0
    string(REGEX REPLACE "@[^@\n]+@" "0" HEADER_CONTENT "${HEADER_CONTENT}")

    file(WRITE "${CMAKE_CURRENT_BINARY_DIR}/${HEADER_TEMPLATES_PATH}/${HEADER_PATH}" "${HEADER_CONTENT}")
  endforeach()
endmacro()

CONFIGURE_HEADER_FILES("gettext-tools/gnulib-lib")
CONFIGURE_HEADER_FILES("libtextstyle/lib")

add_library(libgettextsrc
  ${libgettextsrc_SOURCES}
  ${GLIBC_SOURCE}
  ${LIBGLIB_SOURCES}
  ${LIBTEXTSTYLE_SOURCE}
  ${LIBCROCO_SOURCES})
target_link_libraries(libgettextsrc PRIVATE libintl)
target_compile_definitions(libgettextsrc PRIVATE LIBTEXTSTYLE_DLL_VARIABLE=)

set(msgmerge_SOURCES
  msgmerge.c msgl-fsearch.c lang-table.c plural-count.c)
PREFIX_LIST_ITEMS(msgmerge_SOURCES "gettext-tools/src/")

add_executable(msgmerge ${msgmerge_SOURCES})
target_link_libraries(msgmerge PRIVATE libgettextsrc libintl)

set(msgfmt_SOURCES
  msgfmt.c write-mo.c write-java.c write-csharp.c write-resources.c write-tcl.c
  write-qt.c write-desktop.c write-xml.c
  ../../gettext-runtime/intl/hash-string.c)
PREFIX_LIST_ITEMS(msgfmt_SOURCES "gettext-tools/src/")

add_executable(msgfmt ${msgfmt_SOURCES})
target_link_libraries(msgfmt PRIVATE libgettextsrc libintl)

file(GLOB xgettext_SOURCES gettext-tools/src/x*.c)
add_executable(xgettext ${xgettext_SOURCES})
target_link_libraries(xgettext PRIVATE libgettextsrc)

add_library(main_lib INTERFACE)
target_include_directories(main_lib INTERFACE
    ${CMAKE_CURRENT_SOURCE_DIR}/gettext-runtime/intl
    ${CMAKE_CURRENT_SOURCE_DIR}/gettext-tools/libgettextpo
    ${CMAKE_CURRENT_SOURCE_DIR}/gettext-tools/gnulib-lib
    ${CMAKE_CURRENT_SOURCE_DIR}/gettext-tools/gnulib-lib/libcroco
    ${CMAKE_CURRENT_SOURCE_DIR}/build-aux/snippet
    ${CMAKE_CURRENT_SOURCE_DIR}/libtextstyle/lib
    ${CMAKE_CURRENT_SOURCE_DIR}/libtextstyle/lib/libcroco
    ${CMAKE_CURRENT_BINARY_DIR}/gettext-runtime/intl
    ${CMAKE_CURRENT_BINARY_DIR}/gettext-tools
    ${CMAKE_CURRENT_BINARY_DIR}/gettext-tools/gnulib-lib
    ${CMAKE_CURRENT_BINARY_DIR}/libtextstyle/lib
    ${CMAKE_CURRENT_BINARY_DIR}/libtextstyle/lib/textstyle
    ${LIBICONV_INCLUDE_DIRS})

target_link_libraries(libgettextsrc PRIVATE main_lib)
target_link_libraries(msgfmt PRIVATE main_lib)
target_link_libraries(msgmerge PRIVATE main_lib)
target_link_libraries(xgettext PRIVATE main_lib)

include(GNUInstallDirs)

install(FILES
  ${CMAKE_CURRENT_BINARY_DIR}/gettext-runtime/intl/libgnuintl.h
  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
  RENAME libintl.h)

install(TARGETS libintl msgmerge msgfmt xgettext
  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
  PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})

# vim: set ft=cmake:
