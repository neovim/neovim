name: Release
on:
  schedule:
    - cron: '5 5 * * *'
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for release'
        required: false
        default: nightly
  push:
    tags:
      - v[0-9]+.[0-9]+.[0-9]+

# Build on the oldest supported images, so we have broader compatibility
# Upgrade to gcc-11 to prevent it from using its builtins (#14150)
jobs:
  linux:
    strategy:
      matrix:
        arch: [x86_64, aarch64]
    runs-on: ubuntu-18.04
    outputs:
      # this metadata is used when constructing the GH release post
      version: ${{ steps.metadata.outputs.version }}
      release: ${{ steps.metadata.outputs.release }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: arm64 # Platforms to install (arm64,riscv64,arm ; default all)
      -
        name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true # build -> buildx automatically
      -
        if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.tag_name != 'nightly')
        run: printf 'NVIM_BUILD_TYPE=Release\n' >> $GITHUB_ENV
      -
        if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && github.event.inputs.tag_name == 'nightly')
        run: printf 'NVIM_BUILD_TYPE=RelWithDebInfo\n' >> $GITHUB_ENV
      -
        name: Build Neovim and Create .tar.gz for ${{ matrix.arch }}
        run: |
          docker build --platform linux/${{ matrix.arch }} \
                 --build-arg CC=gcc-11 \
                 --build-arg CMAKE_BUILD_TYPE=${NVIM_BUILD_TYPE} \
                 --build-arg CMAKE_EXTRA_FLAGS="-DCMAKE_INSTALL_PREFIX:PATH=" \
                 --build-arg ARCH=${{ matrix.arch }} \
                 -f .github/workflows/dockerfile-output-targz \
                 -o $GITHUB_WORKSPACE/build .
      -
        name: Output version and release for GH release notes
        id: metadata
        run: |
          cd $GITHUB_WORKSPACE/build/
          tar xzf nvim-linux-${{ matrix.arch }}.tar.gz
          printf '::set-output name=version::%s\n' "$(./nvim-linux-${{ matrix.arch }}/bin/nvim --version | head -n 3 | sed -z 's/\n/%0A/g')"
          printf '::set-output name=release::%s\n' "$(./nvim-linux-${{ matrix.arch }}/bin/nvim --version | head -n 1)"
      -
        uses: actions/upload-artifact@v2
        with:
          name: nvim-linux
          path: build/nvim-linux-${{ matrix.arch }}.tar.gz
          retention-days: 1

  linux-appimage:
    strategy:
      matrix:
        arch: [x86_64, aarch64]
    runs-on: ubuntu-18.04
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: aarch64 # Platforms to install (aarch64,riscv64,arm ; default all)
      -
        name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true # build -> buildx automatically
      -
        if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.tag_name != 'nightly')
        run: |
          printf 'NVIM_BUILD_TYPE=Release\n' >> $GITHUB_ENV
          printf 'TAG=latest\n' >> $GITHUB_ENV
      -
        if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && github.event.inputs.tag_name == 'nightly')
        run: |
          printf 'NVIM_BUILD_TYPE=RelWithDebInfo\n' >> $GITHUB_ENV
          printf 'TAG=nightly\n' >> $GITHUB_ENV
      -
        name: Build and Export AppDir for ${{ matrix.arch }}
        run: |
          # This builds nvim and outputs the resulting build dir to build/
          # which we can then feed into linuxdeploy in the next step.
          # Can can't run linuxdeploy in the docker build container because it
          # has no aarch64 binary and also needs access to FUSE.
          docker build --platform linux/${{ matrix.arch }} \
                 --build-arg CC=gcc-11 \
                 --build-arg CMAKE_BUILD_TYPE=${NVIM_BUILD_TYPE} \
                 --build-arg CMAKE_EXTRA_FLAGS="-DCMAKE_INSTALL_PREFIX=nvim-${{ matrix.arch }}.AppDir/usr -DCMAKE_INSTALL_MANDIR=man" \
                 --build-arg APP_DIR=nvim-${{ matrix.arch }}.AppDir \
                 -f .github/workflows/dockerfile-output-appdir \
                 -o $GITHUB_WORKSPACE/build .
      - name: Bundle AppDir into AppImage
        run: |
          cd build
          # linuxdeploy automates some of the AppDir to AppImage process
          # this may be removable and just use appimagetool
          # we retain it for now to just prepare the appdir
          curl -Lo linuxdeploy https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          chmod +x linuxdeploy
          # appimagetool allows us to pass --runtime-file to create aarch64 appimages
          # on an x86 platform
          curl -Lo appimagetool https://github.com/AppImage/AppImageKit/releases/download/13/appimagetool-x86_64.AppImage
          chmod +x appimagetool
          curl -Lo appimage-runtime https://github.com/AppImage/AppImageKit/releases/download/13/runtime-${{ matrix.arch }}
          chmod +x appimage-runtime

          # This only prepares the app dir for bundling.
          # Possibly this could be done manually.
          ./linuxdeploy --appdir nvim-${{ matrix.arch }}.AppDir \
            -d nvim.desktop \
            -i nvim.png

          # Actually build the app image
          # TODO Update information arch-var must match the final name used on the release download page!:w
          ./appimagetool \
            --runtime-file appimage-runtime \
            --updateinformation "gh-releases-zsync|neovim|neovim|${TAG}|nvim-linux-${{ matrix.arch}}.appimage.zsync" \
            nvim-${{ matrix.arch }}.AppDir \
            nvim-linux-${{ matrix.arch }}.appimage
      -
        uses: actions/upload-artifact@v2
        with:
          name: nvim-linux-appimage
          path: build/nvim-linux-${{ matrix.arch }}.appimage
          retention-days: 1
      -
        uses: actions/upload-artifact@v2
        with:
          name: nvim-linux-appimage
          path: build/nvim-linux-${{ matrix.arch }}.appimage.zsync
          retention-days: 1

  # macOS:
  #   runs-on: macos-10.15
  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0
  #     - name: Install brew packages
  #       run: |
  #         rm -f /usr/local/bin/2to3
  #         brew update >/dev/null
  #         brew upgrade
  #         brew install automake ninja
  #     - if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.tag_name != 'nightly')
  #       run: printf 'NVIM_BUILD_TYPE=Release\n' >> $GITHUB_ENV
  #     - if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && github.event.inputs.tag_name == 'nightly')
  #       run: printf 'NVIM_BUILD_TYPE=RelWithDebInfo\n' >> $GITHUB_ENV
  #     - name: Build release
  #       run: |
  #         make CMAKE_BUILD_TYPE=${NVIM_BUILD_TYPE} CMAKE_EXTRA_FLAGS="-DCMAKE_INSTALL_PREFIX:PATH= -DCMAKE_OSX_DEPLOYMENT_TARGET=10.11"
  #         make DESTDIR="$GITHUB_WORKSPACE/build/release/nvim-osx64" install
  #     - name: Create package
  #       run: |
  #         cd "$GITHUB_WORKSPACE/build/release"
  #         mkdir -p nvim-osx64/libs
  #         libs=($(otool -L nvim-osx64/bin/nvim | sed 1d | sed -E -e 's|^[[:space:]]*||' -e 's| .*||'))
  #         echo "libs:"
  #         for lib in "${libs[@]}"; do
  #           if echo "$lib" | grep -q -E 'libSystem|CoreFoundation' 2>/dev/null; then
  #             echo "  [skipped] $lib"
  #           else
  #             echo "  $lib"
  #             relname="libs/${lib##*/}"
  #             cp -L "$lib" "nvim-osx64/$relname"
  #             install_name_tool -change "$lib" "@executable_path/../$relname" nvim-osx64/bin/nvim
  #           fi
  #         done
  #         tar cfz nvim-macos.tar.gz nvim-osx64
  #     - uses: actions/upload-artifact@v2
  #       with:
  #         name: nvim-macos
  #         path: build/release/nvim-macos.tar.gz
  #         retention-days: 1

  # windows:
  #   runs-on: windows-2016
  #   env:
  #     DEPS_BUILD_DIR: ${{ format('{0}/nvim-deps', github.workspace) }}
  #     DEPS_PREFIX: ${{ format('{0}/nvim-deps/usr', github.workspace) }}
  #   strategy:
  #     matrix:
  #       include:
  #         - config: MSVC_64
  #           archive: nvim-win64
  #         - config: MSVC_32
  #           archive: nvim-win32
  #   name: windows (${{ matrix.config }})
  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0
  #     - run: powershell ci\build.ps1 -NoTests
  #       env:
  #         CONFIGURATION: ${{ matrix.config }}
  #     - run: move build\Neovim.zip build\${{ matrix.archive }}.zip
  #     - uses: actions/upload-artifact@v2
  #       with:
  #         name: ${{ matrix.archive }}
  #         path: build/${{ matrix.archive }}.zip
  #         retention-days: 1

  publish:
    needs: [linux, linux-appimage] #, macOS, windows]
    runs-on: ubuntu-20.04
    permissions:
      contents: write
    steps:
      - uses: actions/download-artifact@v2
      - if: github.event_name == 'workflow_dispatch'
        run: echo "TAG_NAME=${{ github.event.inputs.tag_name }}" >> $GITHUB_ENV
      - if: github.event_name == 'schedule'
        run: echo 'TAG_NAME=nightly' >> $GITHUB_ENV
      - if: github.event_name == 'push'
        run: |
          TAG_NAME=${{ github.ref }}
          echo "TAG_NAME=${TAG_NAME#refs/tags/}" >> $GITHUB_ENV
      - if: env.TAG_NAME == 'nightly'
        run: echo 'SUBJECT=Nvim development (prerelease) build' >> $GITHUB_ENV
      - if: env.TAG_NAME != 'nightly'
        run: echo 'SUBJECT=Nvim release build' >> $GITHUB_ENV
      - if: env.TAG_NAME == 'nightly'
        uses: dev-drprasad/delete-tag-and-release@v0.1.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          delete_release: true
          tag_name: nightly
      # `sha256sum` outputs <sha> <path>, so we cd into each dir to drop the
      # containing folder from the output.
      - name: Generate SHA256 checksums
        run: |
          touch checksums.txt
          for dir in */; do
            pushd $dir
            for file in *; do
              sha256sum $file > $file.sha256sum
              cat $file.sha256sum >> ../checksums.txt
            done
            popd
          done
      - name: Extract SHA256 checksums for post body
        run: |
          echo "SHA_LINUX_AARCH64=$(cat nvim-linux/nvim-linux-x86_64.tar.gz.sha256sum)" >> $GITHUB_ENV
          echo "SHA_LINUX_AARCH64_APPIMAGE=$(cat nvim-linux-appimage/nvim-linux-x86_64.appimage.sha256sum)" >> $GITHUB_ENV
          echo "SHA_LINUX_AARCH64_APPIMAGE_ZSYNC=$(cat nvim-linux-appimage/nvim-linux-x86_64.appimage.zsync.sha256sum)" >> $GITHUB_ENV
          echo "SHA_LINUX_X86_64=$(cat nvim-linux/nvim-linux-aarch64.tar.gz.sha256sum)" >> $GITHUB_ENV
          echo "SHA_LINUX_X86_64_APPIMAGE=$(cat nvim-linux-appimage/nvim-linux-aarch64.appimage.sha256sum)" >> $GITHUB_ENV
          echo "SHA_LINUX_X86_64_APPIMAGE_ZSYNC=$(cat nvim-linux-appimage/nvim-linux-aarch64.appimage.zsync.sha256sum)" >> $GITHUB_ENV
          # echo "SHA_MACOS=$(cat nvim-macos/nvim-macos.tar.gz.sha256sum)" >> $GITHUB_ENV
          # echo "SHA_WIN_32=$(cat nvim-win32/nvim-win32.zip.sha256sum)" >> $GITHUB_ENV
          # echo "SHA_WIN_64=$(cat nvim-win64/nvim-win64.zip.sha256sum)" >> $GITHUB_ENV
      - uses: meeDamian/github-release@2.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ env.TAG_NAME }}
          name: ${{ needs.linux.outputs.release }}
          prerelease: ${{ env.TAG_NAME == 'nightly' }}
          commitish: ${{ github.sha }}
          gzip: false
          allow_override: ${{ env.TAG_NAME == 'nightly' }}
          files: |
            nvim-linux-x86_64.tar.gz:./nvim-linux/nvim-linux-x86_64.tar.gz
            nvim-linux-x86_64.tar.gz.sha256sum:./nvim-linux/nvim-linux-x86_64.tar.gz.sha256sum
            nvim-linux-x86_64.appimage:./nvim-linux-appimage/nvim-linux-x86_64.appimage
            nvim-linux-x86_64.appimage.sha256sum:./nvim-linux-appimage/nvim-linux-x86_64.appimage.sha256sum
            nvim-linux-x86_64.appimage.zsync:./nvim-linux-appimage/nvim-linux-x86_64.appimage.zsync
            nvim-linux-x86_64.appimage.zsync.sha256sum:./nvim-linux-appimage/nvim-linux-x86_64.appimage.zsync.sha256sum
            nvim-linux-aarch64.tar.gz:./nvim-linux/nvim-linux-aarch64.tar.gz
            nvim-linux-aarch64.tar.gz.sha256sum:./nvim-linux/nvim-linux-aarch64.tar.gz.sha256sum
            nvim-linux-aarch64.appimage:./nvim-linux-appimage/nvim-linux-aarch64.appimage
            nvim-linux-aarch64.appimage.sha256sum:./nvim-linux-appimage/nvim-linux-aarch64.appimage.sha256sum
            nvim-linux-aarch64.appimage.zsync:./nvim-linux-appimage/nvim-linux-aarch64.appimage.zsync
            nvim-linux-aarch64.appimage.zsync.sha256sum:./nvim-linux-appimage/nvim-linux-aarch64.appimage.zsync.sha256sum
            checksums.txt:checksums.txt
          # nvim-macos.tar.gz:./nvim-macos/nvim-macos.tar.gz
          # nvim-macos.tar.gz.sha256sum:./nvim-macos/nvim-macos.tar.gz.sha256sum
          # nvim-win32.zip:./nvim-win32/nvim-win32.zip
          # nvim-win32.zip.sha256sum:./nvim-win32/nvim-win32.zip.sha256sum
          # nvim-win64.zip:./nvim-win64/nvim-win64.zip
          # nvim-win64.zip.sha256sum:./nvim-win64/nvim-win64.zip.sha256sum
          body: |
            ${{ env.SUBJECT }}
            ```
            ${{ needs.linux.outputs.version }}```

            ## Install

            ### Windows

            1. Extract **nvim-win64.zip** (or **nvim-win32.zip**)
            2. Run `nvim-qt.exe`

            ### macOS

            1. Download **nvim-macos.tar.gz**
            2. Extract: `tar xzvf nvim-macos.tar.gz`
            3. Run `./nvim-osx64/bin/nvim`

            ### Linux (x64)

            1. Download **nvim.appimage**
            2. Run `chmod u+x nvim.appimage && ./nvim.appimage`
               - If your system does not have FUSE you can [extract the appimage](https://github.com/AppImage/AppImageKit/wiki/FUSE#type-2-appimage):
                 ```
                 ./nvim.appimage --appimage-extract
                 ./squashfs-root/usr/bin/nvim
                 ```

            ### Other

            - Install by [package manager](https://github.com/neovim/neovim/wiki/Installing-Neovim)

            ## SHA256 Checksums

            ```
            ${{ env.SHA_LINUX_AARCH64 }}
            ${{ env.SHA_LINUX_AARCH64_APPIMAGE }}
            ${{ env.SHA_LINUX_AARCH64_APPIMAGE_ZSYNC }}
            ${{ env.SHA_LINUX_X86_64 }}
            ${{ env.SHA_LINUX_X86_64_APPIMAGE }}
            ${{ env.SHA_LINUX_X86_64_APPIMAGE_ZSYNC }}
            ${{ env.SHA_MACOS }}
            ${{ env.SHA_WIN_32 }}
            ${{ env.SHA_WIN_64 }}
            ```
