name: release
on:
  schedule:
    - cron: '5 5 * * *'
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for release'
        required: false
        default: nightly
  push:
    tags:
      - v[0-9]+.[0-9]+.[0-9]+

# Build on the oldest supported images, so we have broader compatibility
jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      build_type: ${{ steps.build.outputs.build_type }}
      appimage_tag: ${{ steps.build.outputs.appimage_tag }}
    steps:
      # Nightly uses RelWithDebInfo while stable uses Release (which disables
      # asserts). This helps get better debug info from people brave enough to
      # use the nightly builds.
      - if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.tag_name != 'nightly')
        run: |
          echo 'CMAKE_BUILD_TYPE=Release' >> $GITHUB_ENV
          echo 'APPIMAGE_TAG=latest' >> $GITHUB_ENV
      - if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && github.event.inputs.tag_name == 'nightly')
        run: |
          echo 'CMAKE_BUILD_TYPE=RelWithDebInfo' >> $GITHUB_ENV
          echo 'APPIMAGE_TAG=nightly' >> $GITHUB_ENV
      - name: Export build information
        id: build
        run: |
          printf "build_type=${CMAKE_BUILD_TYPE}\n" >> $GITHUB_OUTPUT
          printf "appimage_tag=${APPIMAGE_TAG}\n" >> $GITHUB_OUTPUT

  linux:
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        runner: [ ubuntu-22.04, ubuntu-22.04-arm ]
        include:
          - runner: ubuntu-22.04
            arch: x86_64
          - runner: ubuntu-22.04-arm
            arch: arm64
    runs-on: ${{ matrix.runner }}
    env:
      CC: ${{ matrix.cc }}
      LDAI_NO_APPSTREAM: 1 # skip checking (broken) AppStream metadata for issues
    outputs:
      version: ${{ steps.build.outputs.version }}
    steps:
      - uses: actions/checkout@v5
        with:
          # Perform a full checkout #13471
          fetch-depth: 0
      - run: ./.github/scripts/install_deps.sh
      - run: sudo apt-get install -y libfuse2
      - run: echo "CMAKE_BUILD_TYPE=${{ needs.setup.outputs.build_type }}" >> $GITHUB_ENV
      - name: appimage
        run:  |
          ./scripts/genappimage.sh ${{ needs.setup.outputs.appimage_tag }}
      - name: tar.gz
        run: cpack --config build/CPackConfig.cmake -G TGZ
      - uses: actions/upload-artifact@v4
        with:
          name: nvim-appimage-${{ matrix.arch }}
          path: |
            build/bin/nvim-linux-${{ matrix.arch }}.appimage
            build/bin/nvim-linux-${{ matrix.arch }}.appimage.zsync
          retention-days: 1
      - uses: actions/upload-artifact@v4
        with:
          name: nvim-linux-${{ matrix.arch }}
          path: |
            build/nvim-linux-${{ matrix.arch }}.tar.gz
          retention-days: 1
      - name: Export version
        id: build
        run: |
          printf 'version<<END\n' >> $GITHUB_OUTPUT
          ./build/bin/nvim --version | head -n 3 >> $GITHUB_OUTPUT
          printf 'END\n' >> $GITHUB_OUTPUT
  macos:
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        runner: [ macos-13, macos-14 ]
        include:
          - runner: macos-13
            arch: x86_64
          - runner: macos-14
            arch: arm64
    runs-on: ${{ matrix.runner }}
    env:
      MACOSX_DEPLOYMENT_TARGET: 11.0
    steps:
      - uses: actions/checkout@v5
        with:
          # Perform a full checkout #13471
          fetch-depth: 0
      - name: Install dependencies
        run: ./.github/scripts/install_deps.sh

      - name: Build deps
        run: |
          cmake -S cmake.deps -B .deps -G Ninja \
            -D CMAKE_BUILD_TYPE=${{ needs.setup.outputs.build_type }} \
            -D CMAKE_FIND_FRAMEWORK=NEVER
          cmake --build .deps
      - name: Build neovim
        run: |
          cmake -B build -G Ninja \
            -D CMAKE_BUILD_TYPE=${{ needs.setup.outputs.build_type }} \
            -D ENABLE_LIBINTL=OFF \
            -D CMAKE_FIND_FRAMEWORK=NEVER
          cmake --build build
      - name: Package
        run: cpack --config build/CPackConfig.cmake

      - uses: actions/upload-artifact@v4
        with:
          name: nvim-macos-${{ matrix.arch }}
          path: build/nvim-macos-${{ matrix.arch }}.tar.gz
          retention-days: 1

  windows:
    needs: setup
    strategy:
      matrix:
        include:
          - runner: windows-2022
            arch: x86_64
            archive_name: nvim-win64
          - runner: windows-11-arm
            arch: arm64
            archive_name: nvim-win-arm64
    runs-on: ${{ matrix.runner }}
    steps:
      - uses: actions/checkout@v5
        with:
          # Perform a full checkout #13471
          fetch-depth: 0
      - run: .github/scripts/env.ps1
        env:
          BUILD_ARCH: ${{ matrix.arch }}
      - name: Install Wix
        run: |
          Invoke-WebRequest -Uri "https://github.com/wixtoolset/wix3/releases/download/wix3141rtm/wix314-binaries.zip" -OutFile "wix314-binaries.zip"
          Expand-Archive -Path "wix314-binaries.zip" -DestinationPath "C:/wix"
          echo "C:\wix" >> $env:GITHUB_PATH
      - name: Build deps
        run: |
          cmake -S cmake.deps -B .deps -G Ninja -DCMAKE_BUILD_TYPE=${{ needs.setup.outputs.build_type }}
          cmake --build .deps
      - name: Build package
        run: |
          cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=${{ needs.setup.outputs.build_type }}
          cmake --build build --target package
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: nvim-win-${{ matrix.arch }}
          path: |
            build/${{ matrix.archive_name }}.zip
            build/${{ matrix.archive_name }}.msi
          retention-days: 1

  publish:
    needs: [linux, macos, windows]
    runs-on: ubuntu-latest
    env:
      GH_REPO: ${{ github.repository }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    permissions:
      contents: write
    steps:
      # Must perform checkout first, since it deletes the target directory
      # before running, and would therefore delete the downloaded artifacts
      - uses: actions/checkout@v5

      - uses: actions/download-artifact@v5

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y gettext-base

      - if: github.event_name == 'workflow_dispatch'
        run: echo "TAG_NAME=${{ github.event.inputs.tag_name }}" >> $GITHUB_ENV
      - if: github.event_name == 'schedule'
        run: echo 'TAG_NAME=nightly' >> $GITHUB_ENV
      - if: github.event_name == 'push'
        run: |
          TAG_NAME=${{ github.ref }}
          echo "TAG_NAME=${TAG_NAME#refs/tags/}" >> $GITHUB_ENV
      - if: env.TAG_NAME == 'nightly'
        run: |
          (echo 'SUBJECT=Nvim development (prerelease) build';
           echo 'PRERELEASE=--prerelease') >> $GITHUB_ENV
          gh release delete nightly --yes || true
          git push origin :nightly || true
      - if: env.TAG_NAME != 'nightly'
        run: |
          (echo 'SUBJECT=Nvim release build';
           echo 'PRERELEASE=') >> $GITHUB_ENV
          gh release delete stable --yes || true
          git push origin :stable || true
      - name: Publish release
        env:
          NVIM_VERSION: ${{ needs.linux.outputs.version }}
          NVIM_COMMIT: ${{ github.sha }}
          DEBUG: api
        run: |
          envsubst < "$GITHUB_WORKSPACE/.github/workflows/notes.md" > "$RUNNER_TEMP/notes.md"
          if [ "$TAG_NAME" != "nightly" ]; then
            gh release create stable $PRERELEASE --notes-file "$RUNNER_TEMP/notes.md" --title "$SUBJECT" --target $GITHUB_SHA nvim-macos-x86_64/* nvim-macos-arm64/* nvim-linux-x86_64/* nvim-linux-arm64/* nvim-appimage-x86_64/* nvim-appimage-arm64/* nvim-win-x86_64/* nvim-win-arm64/*
          fi
          gh release create $TAG_NAME $PRERELEASE --notes-file "$RUNNER_TEMP/notes.md" --title "$SUBJECT" --target $GITHUB_SHA nvim-macos-x86_64/* nvim-macos-arm64/* nvim-linux-x86_64/* nvim-linux-arm64/* nvim-appimage-x86_64/* nvim-appimage-arm64/* nvim-win-x86_64/* nvim-win-arm64/*
