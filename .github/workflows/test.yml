name: test
on:
  push:
    branches:
      - 'master'
      - 'release-[0-9]+.[0-9]+'
  pull_request:
    branches:
      - 'master'
      - 'release-[0-9]+.[0-9]+'
    paths-ignore:
      - 'contrib/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.head_ref || github.sha }}
  cancel-in-progress: true

env:
  ASAN_OPTIONS: detect_leaks=1:check_initialization_order=1:handle_abort=1:handle_sigill=1:log_path=${{ github.workspace }}/build/log/asan:intercept_tls_get_addr=0
  BIN_DIR: ${{ github.workspace }}/bin
  BUILD_DIR: ${{ github.workspace }}/build
  INSTALL_PREFIX: ${{ github.workspace }}/nvim-install
  LOG_DIR: ${{ github.workspace }}/build/log
  NVIM_LOG_FILE: ${{ github.workspace }}/build/.nvimlog
  TSAN_OPTIONS: log_path=${{ github.workspace }}/build/log/tsan
  UBSAN_OPTIONS: "print_stacktrace=1 log_path=${{ github.workspace }}/build/log/ubsan"
  VALGRIND_LOG: ${{ github.workspace }}/build/log/valgrind-%p.log
  # TEST_FILE: test/functional/core/startup_spec.lua
  # TEST_FILTER: foo

jobs:
  posix:
    name: ${{ matrix.runner }} ${{ matrix.flavor }} (cc=${{ matrix.cc }})
    strategy:
      fail-fast: false
      matrix:
        include:
          - flavor: asan
            cc: clang
            runner: ubuntu-22.04
            flags: -D CLANG_ASAN_UBSAN=ON
          - flavor: tsan
            cc: clang
            runner: ubuntu-22.04
            flags: -D CLANG_TSAN=ON
          - flavor: uchar
            cc: gcc
            runner: ubuntu-22.04
            flags: -D UNSIGNED_CHAR=ON
          - cc: clang
            runner: macos-12

            # functionaltest-lua is our dumping ground for non-mainline configurations.
            # 1. Check that the tests pass with PUC Lua instead of LuaJIT.
            # 2. No treesitter parsers installed.
          - flavor: functionaltest-lua
            cc: gcc
            runner: ubuntu-22.04
            deps_flags: -D USE_BUNDLED_LUAJIT=OFF -D USE_BUNDLED_LUA=ON
            flags: -D PREFER_LUA=ON
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 45
    env:
      CC: ${{ matrix.cc }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up environment
        run: |
          ulimit -c unlimited
          echo "$BIN_DIR" >> $GITHUB_PATH

      - name: Create log dir
        run: mkdir -p "$LOG_DIR"

      - name: Install dependencies
        run: ./.github/scripts/install_deps.sh cpanminus

      - uses: ./.github/actions/cache

      - name: Build third-party deps
        run: |
          cmake -S cmake.deps -B .deps -G Ninja ${{ matrix.deps_flags }}
          cmake --build .deps

      - name: Build
        run: |
          cmake -B build -G Ninja -D CMAKE_INSTALL_PREFIX:PATH=$INSTALL_PREFIX ${{ matrix.flags }}
          cmake --build build

      - if: "!cancelled()"
        name: Determine if run should be aborted
        id: abort_job
        run: echo "status=${{ job.status }}" >> $GITHUB_OUTPUT

      - if: matrix.flavor != 'tsan' && (success() || failure() && steps.abort_job.outputs.status == 'success')
        name: Oldtest
        run: make oldtest

  windows:
    runs-on: windows-2019
    timeout-minutes: 45
    name: windows
    steps:
      - uses: actions/checkout@v3

      - uses: ./.github/actions/cache

      - name: Set env
        run: |
          $installationPath = vswhere.exe -latest -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath
          if ($installationPath -and (Test-Path "$installationPath\Common7\Tools\vsdevcmd.bat")) {
            & "${env:COMSPEC}" /s /c "`"$installationPath\Common7\Tools\vsdevcmd.bat`" -arch=x64 -no_logo && set" | ForEach-Object {
              $name, $value = $_ -split '=', 2
              "$name=$value" >> $env:GITHUB_ENV
            }
          }

      - name: Build deps
        run: |
          cmake -S cmake.deps -B .deps -G Ninja -D CMAKE_BUILD_TYPE='RelWithDebInfo'
          cmake --build .deps

      - name: Build
        run: |
          cmake -B build -G Ninja -D CMAKE_BUILD_TYPE='RelWithDebInfo'
          cmake --build build

      - if: "!cancelled()"
        name: Determine if run should be aborted
        id: abort_job
        run: |
          "status=${{ job.status }}" >> $env:GITHUB_OUTPUT

      - if: success() || failure() && steps.abort_job.outputs.status == 'success'
        name: Run oldtest
        run: |
          # Add MSYS to path, required for e.g. `find` used in test scripts.
          # But would break functionaltest, where its `more` would be used then.
          $OldPath = $env:PATH
          $env:PATH = "C:\msys64\usr\bin;$env:PATH"
          & "C:\msys64\mingw64\bin\mingw32-make.exe" -C $(Convert-Path test\old\testdir) VERBOSE=1
          $env:PATH = $OldPath
