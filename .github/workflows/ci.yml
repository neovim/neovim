name: CI
on:
  push:
    branches:
      - 'master'
      - 'release-[0-9]+.[0-9]+'
  pull_request:
    branches:
      - 'master'
      - 'release-[0-9]+.[0-9]+'
    paths-ignore:
      - 'contrib/**'

# Cancel any in-progress CI runs for a PR if it is updated
concurrency:
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.head_ref || github.sha }}
  cancel-in-progress: true

jobs:
  windows:
    runs-on: windows-2019
    timeout-minutes: 45
    env:
      DEPS_BUILD_DIR: ${{ github.workspace }}/nvim-deps
      DEPS_PREFIX: ${{ github.workspace }}/nvim-deps/usr
    name: windows (MSVC_64)
    steps:
      - uses: actions/checkout@v3

      - uses: actions/cache@v3
        with:
          path: ${{ env.DEPS_BUILD_DIR }}
          key: windows-${{ hashFiles('cmake.deps/**') }}

      - name: Set env
        run: ./.github/workflows/env.ps1

      - name: Build deps
        run: |
          cmake -S cmake.deps -B $env:DEPS_BUILD_DIR -G Ninja -DCMAKE_BUILD_TYPE='RelWithDebInfo'
          cmake --build $env:DEPS_BUILD_DIR

      - name: Build nvim
        run: |
          cmake -B build -G Ninja -DCMAKE_BUILD_TYPE='RelWithDebInfo' -DDEPS_PREFIX="$env:DEPS_PREFIX"
          cmake --build build

      - name: Install test deps
        run: |
          & build\bin\nvim.exe "--version"

          # Ensure that the "win32" feature is set.
          for (($i = 0); $i -lt 1000; $i++)
          {    
           & build\bin\nvim -u NONE --headless -c 'exe !has(\"win32\").\"cq\"'
          }

          python -m pip install pynvim
          # Sanity check
          python -c "import pynvim; print(str(pynvim))"

          gem.cmd install --pre neovim
          Get-Command -CommandType Application neovim-ruby-host.bat

          node --version
          npm.cmd --version

          npm.cmd install -g neovim
          Get-Command -CommandType Application neovim-node-host.cmd
          npm.cmd link neovim

      - if: "!cancelled()"
        name: Determine if run should be aborted
        id: abort_job
        run: |
          "status=${{ job.status }}" >> $env:GITHUB_OUTPUT

      - if: success() || failure() && steps.abort_job.outputs.status == 'success'
        name: Run functionaltests
        run: cmake --build build --target functionaltest

      - if: success() || failure() && steps.abort_job.outputs.status == 'success'
        name: Run oldtests
        run: |
          # Add MSYS to path, required for e.g. `find` used in test scripts.
          # But would break functionaltests, where its `more` would be used then.
          $OldPath = $env:PATH
          $env:PATH = "C:\msys64\usr\bin;$env:PATH"
          & "C:\msys64\mingw64\bin\mingw32-make.exe" -C $(Convert-Path src\nvim\testdir) VERBOSE=1
          $env:PATH = $OldPath
