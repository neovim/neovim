# configuration file for git-cliff

[changelog]
# changelog header
header = """
# Changelog\n
All notable changes to this project will be documented in this file.\n
"""
# template for the changelog body
# https://github.com/Keats/tera
# https://keats.github.io/tera/docs/
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | upper_first }}
    {% for commit in commits | sort(attribute="message")%}\
        {% if not commit.scope %}\
            - {{ commit.message }}
        {% endif %}\
    {% endfor %}\
    {% for group, commits in commits | group_by(attribute="scope") %}\
        {% for commit in commits | sort(attribute="message") %}\
            - **{{commit.scope}}**: {{ commit.message }}
        {% endfor %}\
    {% endfor %}
{% endfor %}\n
"""
# remove the leading and trailing whitespace from the template
trim = true

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
#    { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](https://github.com/neovim/neovim/issues/${2}))"},
]
# regex for parsing and grouping commits
commit_parsers = [
    { message = "!:", group = "<!-- 0 -->Breaking"},
    { message = "^feat", group = "<!-- 1 -->Features"},
    { message = "^fix", group = "<!-- 2 -->Bug Fixes"},
    { message = "^perf", group = "<!-- 3 -->Performance"},
    { message = "^build", group = "<!-- 4 -->Build System"},
    { message = "^vim-patch", group = "<!-- 5 -->Vim patches"},
    { message = "^refactor", group = "<!-- 6 -->Refactor" },
    { message = "^ci", group = "<!-- 8 -->CI" },
    { message = "^test", group = "<!-- 9 -->Testing" },
    { message = "^docs", group = "<!-- 99 -->Documentation" },
    { message = "^revert", group = "<!-- 999 -->Reverted Changes" },
    { message = ".*", group = "<!-- 9999 -->Other"},
]
# filter out the commits that are not matched by commit parsers
filter_commits = true
# glob pattern for matching git tags
tag_pattern = "v[0-9]*"
# regex for skipping tags
skip_tags = "v0.1.0-beta.1"
# regex for ignoring tags
ignore_tags = ""
# sort the tags chronologically
date_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
